# -*- coding: utf-8 -*-
# Symbolic Functions for N = 3 (General Symm. Stochastic)
# Generated by script

import math
import numpy as np


# --------------------------------------------------------------------------
# Value Function (S1_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S1_n3(x_vec):
    """Calculates S_1 for n=3 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_1 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # S_k CSE Defs

    # Final S_k Calculation
    result = -2*x_0_1 - 2*x_0_2 - 2*x_1_2 + 3
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S1_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S1_n3_jacobian(x_vec):
    """Calculates Jacobian of S_1 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Jacobian CSE Defs

    # Final Gradient Calculation
    gradient = [
        -2,
        -2,
        -2
    ]
    return gradient



# --------------------------------------------------------------------------
# Hessian Function (S1_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S1_n3_hessian(x_vec):
    """Calculates Hessian matrix of S_1 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: numpy.ndarray: Hessian matrix (3x3).
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Hessian CSE Defs

    # Final Hessian Calculation
    hessian_np = np.zeros((3, 3)) # Initialize
    hessian_np[0, 0] = 0
    hessian_np[0, 1] = 0
    hessian_np[0, 2] = 0
    hessian_np[1, 0] = 0
    hessian_np[1, 1] = 0
    hessian_np[1, 2] = 0
    hessian_np[2, 0] = 0
    hessian_np[2, 1] = 0
    hessian_np[2, 2] = 0
    return hessian_np



# --------------------------------------------------------------------------
# Value Function (S2_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S2_n3(x_vec):
    """Calculates S_2 for n=3 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_2 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # S_k CSE Defs
    x0 = 3*x_0_1
    # Final S_k Calculation
    result = x0*x_0_2 + x0*x_1_2 - 4*x_0_1 + 3*x_0_2*x_1_2 - 4*x_0_2 - 4*x_1_2 + 3
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S2_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S2_n3_jacobian(x_vec):
    """Calculates Jacobian of S_2 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Jacobian CSE Defs
    x0 = 3*x_0_2
    x1 = 3*x_1_2 - 4
    x2 = 3*x_0_1
    # Final Gradient Calculation
    gradient = [
        x0 + x1,
        x1 + x2,
        x0 + x2 - 4
    ]
    return gradient



# --------------------------------------------------------------------------
# Hessian Function (S2_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S2_n3_hessian(x_vec):
    """Calculates Hessian matrix of S_2 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: numpy.ndarray: Hessian matrix (3x3).
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Hessian CSE Defs

    # Final Hessian Calculation
    hessian_np = np.zeros((3, 3)) # Initialize
    hessian_np[0, 0] = 0
    hessian_np[0, 1] = 3
    hessian_np[0, 2] = 3
    hessian_np[1, 0] = 3
    hessian_np[1, 1] = 0
    hessian_np[1, 2] = 3
    hessian_np[2, 0] = 3
    hessian_np[2, 1] = 3
    hessian_np[2, 2] = 0
    return hessian_np



# --------------------------------------------------------------------------
# Value Function (S3_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S3_n3(x_vec):
    """Calculates S_3 for n=3 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_3 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # S_k CSE Defs
    x0 = 3*x_0_1
    # Final S_k Calculation
    result = x0*x_0_2 + x0*x_1_2 - 2*x_0_1 + 3*x_0_2*x_1_2 - 2*x_0_2 - 2*x_1_2 + 1
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S3_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S3_n3_jacobian(x_vec):
    """Calculates Jacobian of S_3 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Jacobian CSE Defs
    x0 = 3*x_0_2
    x1 = 3*x_1_2 - 2
    x2 = 3*x_0_1
    # Final Gradient Calculation
    gradient = [
        x0 + x1,
        x1 + x2,
        x0 + x2 - 2
    ]
    return gradient



# --------------------------------------------------------------------------
# Hessian Function (S3_n3)
# Input: x_0_1, x_0_2, x_1_2
# --------------------------------------------------------------------------
def calculate_S3_n3_hessian(x_vec):
    """Calculates Hessian matrix of S_3 (n=3).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 3
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_1_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: numpy.ndarray: Hessian matrix (3x3).
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_1_2 = x_vec[2]
    # Hessian CSE Defs

    # Final Hessian Calculation
    hessian_np = np.zeros((3, 3)) # Initialize
    hessian_np[0, 0] = 0
    hessian_np[0, 1] = 3
    hessian_np[0, 2] = 3
    hessian_np[1, 0] = 3
    hessian_np[1, 1] = 0
    hessian_np[1, 2] = 3
    hessian_np[2, 0] = 3
    hessian_np[2, 1] = 3
    hessian_np[2, 2] = 0
    return hessian_np




# --- Basic Test Usage ---
if __name__ == '__main__':
    print("\n" + "-"*20); print("--- Running Basic Tests for N=3 (General) ---"); print("-" * 20)
    x_test = (0.3333333333333333, 0.3333333333333333, 0.3333333333333333) # Test vector for the 1/N matrix
    print(f"Test input vector (len 3): {x_test}")

    s_k_expected = {1: 1.0, 2: 0.0, 3: 0.0}

    print("\n--- Testing S_1 ---")
    # Value
    val = None
    try:
        val = calculate_S1_n3(x_test)
        exp_val = s_k_expected.get(1, None)
        print(f"  calculate_S1_n3(x_test) = {val:.6e}")
        if exp_val is not None:
            check_result = 'PASS' if abs(val - exp_val) < 1e-9 else 'FAIL'
            print(f"    Check vs Expected ({exp_val:.1f}): {check_result}")
        else: print("    (No expected value for check)")
    except Exception as e: print(f"  Error testing calculate_S1_n3: {e}")

    # Jacobian
    try: jac = calculate_S1_n3_jacobian(x_test); print(f"  calculate_S1_n3_jacobian(x_test) returned vector length {len(jac)}"); is_zero = all(abs(j) < 1e-9 for j in jac); print(f"    Check if zero vector: {is_zero}")
    except Exception as e: print(f"  Error testing calculate_S1_n3_jacobian: {e}")

    # Hessian
    try: hess = calculate_S1_n3_hessian(x_test); print(f"  calculate_S1_n3_hessian(x_test) returned matrix shape {hess.shape if hasattr(hess,'shape') else 'N/A'}")
    except Exception as e: print(f"  Error testing calculate_S1_n3_hessian: {e}")

    print("\n--- Testing S_2 ---")
    # Value
    val = None
    try:
        val = calculate_S2_n3(x_test)
        exp_val = s_k_expected.get(2, None)
        print(f"  calculate_S2_n3(x_test) = {val:.6e}")
        if exp_val is not None:
            check_result = 'PASS' if abs(val - exp_val) < 1e-9 else 'FAIL'
            print(f"    Check vs Expected ({exp_val:.1f}): {check_result}")
        else: print("    (No expected value for check)")
    except Exception as e: print(f"  Error testing calculate_S2_n3: {e}")

    # Jacobian
    try: jac = calculate_S2_n3_jacobian(x_test); print(f"  calculate_S2_n3_jacobian(x_test) returned vector length {len(jac)}"); is_zero = all(abs(j) < 1e-9 for j in jac); print(f"    Check if zero vector: {is_zero}")
    except Exception as e: print(f"  Error testing calculate_S2_n3_jacobian: {e}")

    # Hessian
    try: hess = calculate_S2_n3_hessian(x_test); print(f"  calculate_S2_n3_hessian(x_test) returned matrix shape {hess.shape if hasattr(hess,'shape') else 'N/A'}")
    except Exception as e: print(f"  Error testing calculate_S2_n3_hessian: {e}")

    print("\n--- Testing S_3 ---")
    # Value
    val = None
    try:
        val = calculate_S3_n3(x_test)
        exp_val = s_k_expected.get(3, None)
        print(f"  calculate_S3_n3(x_test) = {val:.6e}")
        if exp_val is not None:
            check_result = 'PASS' if abs(val - exp_val) < 1e-9 else 'FAIL'
            print(f"    Check vs Expected ({exp_val:.1f}): {check_result}")
        else: print("    (No expected value for check)")
    except Exception as e: print(f"  Error testing calculate_S3_n3: {e}")

    # Jacobian
    try: jac = calculate_S3_n3_jacobian(x_test); print(f"  calculate_S3_n3_jacobian(x_test) returned vector length {len(jac)}"); is_zero = all(abs(j) < 1e-9 for j in jac); print(f"    Check if zero vector: {is_zero}")
    except Exception as e: print(f"  Error testing calculate_S3_n3_jacobian: {e}")

    # Hessian
    try: hess = calculate_S3_n3_hessian(x_test); print(f"  calculate_S3_n3_hessian(x_test) returned matrix shape {hess.shape if hasattr(hess,'shape') else 'N/A'}")
    except Exception as e: print(f"  Error testing calculate_S3_n3_hessian: {e}")
