# -*- coding: utf-8 -*-
# Separated Value, Jacobian, & Hessian Functions for N = 5 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import numpy as np
import numba

# --- Functions for S_1 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5(x_vec):
    """Calculates the value of S_1 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    return x_0_0 + x_1_1 + x_2_2 + x_3_3 + x_4_4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    return np.array([1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_1 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    hessian = np.empty((15, 15))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 0
    hessian[0, 6] = 0
    hessian[0, 7] = 0
    hessian[0, 8] = 0
    hessian[0, 9] = 0
    hessian[0, 10] = 0
    hessian[0, 11] = 0
    hessian[0, 12] = 0
    hessian[0, 13] = 0
    hessian[0, 14] = 0
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[1, 10] = 0
    hessian[1, 11] = 0
    hessian[1, 12] = 0
    hessian[1, 13] = 0
    hessian[1, 14] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[2, 10] = 0
    hessian[2, 11] = 0
    hessian[2, 12] = 0
    hessian[2, 13] = 0
    hessian[2, 14] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[3, 10] = 0
    hessian[3, 11] = 0
    hessian[3, 12] = 0
    hessian[3, 13] = 0
    hessian[3, 14] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = 0
    hessian[4, 9] = 0
    hessian[4, 10] = 0
    hessian[4, 11] = 0
    hessian[4, 12] = 0
    hessian[4, 13] = 0
    hessian[4, 14] = 0
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 0
    hessian[5, 10] = 0
    hessian[5, 11] = 0
    hessian[5, 12] = 0
    hessian[5, 13] = 0
    hessian[5, 14] = 0
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[6, 10] = 0
    hessian[6, 11] = 0
    hessian[6, 12] = 0
    hessian[6, 13] = 0
    hessian[6, 14] = 0
    hessian[7, 0] = 0
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 0
    hessian[7, 10] = 0
    hessian[7, 11] = 0
    hessian[7, 12] = 0
    hessian[7, 13] = 0
    hessian[7, 14] = 0
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = 0
    hessian[8, 10] = 0
    hessian[8, 11] = 0
    hessian[8, 12] = 0
    hessian[8, 13] = 0
    hessian[8, 14] = 0
    hessian[9, 0] = 0
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 0
    hessian[9, 5] = 0
    hessian[9, 6] = 0
    hessian[9, 7] = 0
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[9, 12] = 0
    hessian[9, 13] = 0
    hessian[9, 14] = 0
    hessian[10, 0] = 0
    hessian[10, 1] = 0
    hessian[10, 2] = 0
    hessian[10, 3] = 0
    hessian[10, 4] = 0
    hessian[10, 5] = 0
    hessian[10, 6] = 0
    hessian[10, 7] = 0
    hessian[10, 8] = 0
    hessian[10, 9] = 0
    hessian[10, 10] = 0
    hessian[10, 11] = 0
    hessian[10, 12] = 0
    hessian[10, 13] = 0
    hessian[10, 14] = 0
    hessian[11, 0] = 0
    hessian[11, 1] = 0
    hessian[11, 2] = 0
    hessian[11, 3] = 0
    hessian[11, 4] = 0
    hessian[11, 5] = 0
    hessian[11, 6] = 0
    hessian[11, 7] = 0
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = 0
    hessian[11, 12] = 0
    hessian[11, 13] = 0
    hessian[11, 14] = 0
    hessian[12, 0] = 0
    hessian[12, 1] = 0
    hessian[12, 2] = 0
    hessian[12, 3] = 0
    hessian[12, 4] = 0
    hessian[12, 5] = 0
    hessian[12, 6] = 0
    hessian[12, 7] = 0
    hessian[12, 8] = 0
    hessian[12, 9] = 0
    hessian[12, 10] = 0
    hessian[12, 11] = 0
    hessian[12, 12] = 0
    hessian[12, 13] = 0
    hessian[12, 14] = 0
    hessian[13, 0] = 0
    hessian[13, 1] = 0
    hessian[13, 2] = 0
    hessian[13, 3] = 0
    hessian[13, 4] = 0
    hessian[13, 5] = 0
    hessian[13, 6] = 0
    hessian[13, 7] = 0
    hessian[13, 8] = 0
    hessian[13, 9] = 0
    hessian[13, 10] = 0
    hessian[13, 11] = 0
    hessian[13, 12] = 0
    hessian[13, 13] = 0
    hessian[13, 14] = 0
    hessian[14, 0] = 0
    hessian[14, 1] = 0
    hessian[14, 2] = 0
    hessian[14, 3] = 0
    hessian[14, 4] = 0
    hessian[14, 5] = 0
    hessian[14, 6] = 0
    hessian[14, 7] = 0
    hessian[14, 8] = 0
    hessian[14, 9] = 0
    hessian[14, 10] = 0
    hessian[14, 11] = 0
    hessian[14, 12] = 0
    hessian[14, 13] = 0
    hessian[14, 14] = 0
    return hessian


# --- Functions for S_2 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5(x_vec):
    """Calculates the value of S_2 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    return x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 + x_0_0*x_4_4 - x_0_1**2 - x_0_2**2 - x_0_3**2 - x_0_4**2 + x_1_1*x_2_2 + x_1_1*x_3_3 + x_1_1*x_4_4 - x_1_2**2 - x_1_3**2 - x_1_4**2 + x_2_2*x_3_3 + x_2_2*x_4_4 - x_2_3**2 - x_2_4**2 + x_3_3*x_4_4 - x_3_4**2



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_2_2 + x_3_3 + x_4_4
    x1 = x_0_0 + x_1_1 + x_4_4
    return np.array([x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        -2*x_0_4,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        -2*x_1_4,
        x1 + x_3_3,
        -2*x_2_3,
        -2*x_2_4,
        x1 + x_2_2,
        -2*x_3_4,
        x_0_0 + x_1_1 + x_2_2 + x_3_3])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_2 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    hessian = np.empty((15, 15))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 1
    hessian[0, 6] = 0
    hessian[0, 7] = 0
    hessian[0, 8] = 0
    hessian[0, 9] = 1
    hessian[0, 10] = 0
    hessian[0, 11] = 0
    hessian[0, 12] = 1
    hessian[0, 13] = 0
    hessian[0, 14] = 1
    hessian[1, 0] = 0
    hessian[1, 1] = -2
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[1, 10] = 0
    hessian[1, 11] = 0
    hessian[1, 12] = 0
    hessian[1, 13] = 0
    hessian[1, 14] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = -2
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[2, 10] = 0
    hessian[2, 11] = 0
    hessian[2, 12] = 0
    hessian[2, 13] = 0
    hessian[2, 14] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = -2
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[3, 10] = 0
    hessian[3, 11] = 0
    hessian[3, 12] = 0
    hessian[3, 13] = 0
    hessian[3, 14] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = -2
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = 0
    hessian[4, 9] = 0
    hessian[4, 10] = 0
    hessian[4, 11] = 0
    hessian[4, 12] = 0
    hessian[4, 13] = 0
    hessian[4, 14] = 0
    hessian[5, 0] = 1
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 1
    hessian[5, 10] = 0
    hessian[5, 11] = 0
    hessian[5, 12] = 1
    hessian[5, 13] = 0
    hessian[5, 14] = 1
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = -2
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[6, 10] = 0
    hessian[6, 11] = 0
    hessian[6, 12] = 0
    hessian[6, 13] = 0
    hessian[6, 14] = 0
    hessian[7, 0] = 0
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = -2
    hessian[7, 8] = 0
    hessian[7, 9] = 0
    hessian[7, 10] = 0
    hessian[7, 11] = 0
    hessian[7, 12] = 0
    hessian[7, 13] = 0
    hessian[7, 14] = 0
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = -2
    hessian[8, 9] = 0
    hessian[8, 10] = 0
    hessian[8, 11] = 0
    hessian[8, 12] = 0
    hessian[8, 13] = 0
    hessian[8, 14] = 0
    hessian[9, 0] = 1
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 0
    hessian[9, 5] = 1
    hessian[9, 6] = 0
    hessian[9, 7] = 0
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[9, 12] = 1
    hessian[9, 13] = 0
    hessian[9, 14] = 1
    hessian[10, 0] = 0
    hessian[10, 1] = 0
    hessian[10, 2] = 0
    hessian[10, 3] = 0
    hessian[10, 4] = 0
    hessian[10, 5] = 0
    hessian[10, 6] = 0
    hessian[10, 7] = 0
    hessian[10, 8] = 0
    hessian[10, 9] = 0
    hessian[10, 10] = -2
    hessian[10, 11] = 0
    hessian[10, 12] = 0
    hessian[10, 13] = 0
    hessian[10, 14] = 0
    hessian[11, 0] = 0
    hessian[11, 1] = 0
    hessian[11, 2] = 0
    hessian[11, 3] = 0
    hessian[11, 4] = 0
    hessian[11, 5] = 0
    hessian[11, 6] = 0
    hessian[11, 7] = 0
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = -2
    hessian[11, 12] = 0
    hessian[11, 13] = 0
    hessian[11, 14] = 0
    hessian[12, 0] = 1
    hessian[12, 1] = 0
    hessian[12, 2] = 0
    hessian[12, 3] = 0
    hessian[12, 4] = 0
    hessian[12, 5] = 1
    hessian[12, 6] = 0
    hessian[12, 7] = 0
    hessian[12, 8] = 0
    hessian[12, 9] = 1
    hessian[12, 10] = 0
    hessian[12, 11] = 0
    hessian[12, 12] = 0
    hessian[12, 13] = 0
    hessian[12, 14] = 1
    hessian[13, 0] = 0
    hessian[13, 1] = 0
    hessian[13, 2] = 0
    hessian[13, 3] = 0
    hessian[13, 4] = 0
    hessian[13, 5] = 0
    hessian[13, 6] = 0
    hessian[13, 7] = 0
    hessian[13, 8] = 0
    hessian[13, 9] = 0
    hessian[13, 10] = 0
    hessian[13, 11] = 0
    hessian[13, 12] = 0
    hessian[13, 13] = -2
    hessian[13, 14] = 0
    hessian[14, 0] = 1
    hessian[14, 1] = 0
    hessian[14, 2] = 0
    hessian[14, 3] = 0
    hessian[14, 4] = 0
    hessian[14, 5] = 1
    hessian[14, 6] = 0
    hessian[14, 7] = 0
    hessian[14, 8] = 0
    hessian[14, 9] = 1
    hessian[14, 10] = 0
    hessian[14, 11] = 0
    hessian[14, 12] = 1
    hessian[14, 13] = 0
    hessian[14, 14] = 0
    return hessian


# --- Functions for S_3 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5(x_vec):
    """Calculates the value of S_3 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_1_4**2
    x3 = x_2_3**2
    x4 = x_2_4**2
    x5 = x_3_4**2
    x6 = x_0_1**2
    x7 = x_0_2**2
    x8 = x_0_3**2
    x9 = x_0_4**2
    return -x0*x_0_0 - x0*x_3_3 - x0*x_4_4 - x1*x_0_0 - x1*x_2_2 - x1*x_4_4 - x2*x_0_0 - x2*x_2_2 - x2*x_3_3 - x3*x_0_0 - x3*x_1_1 - x3*x_4_4 - x4*x_0_0 - x4*x_1_1 - x4*x_3_3 - x5*x_0_0 - x5*x_1_1 - x5*x_2_2 - x6*x_2_2 - x6*x_3_3 - x6*x_4_4 - x7*x_1_1 - x7*x_3_3 - x7*x_4_4 - x8*x_1_1 - x8*x_2_2 - x8*x_4_4 - x9*x_1_1 - x9*x_2_2 - x9*x_3_3 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_1_1*x_4_4 + x_0_0*x_2_2*x_3_3 + x_0_0*x_2_2*x_4_4 + x_0_0*x_3_3*x_4_4 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_1*x_0_4*x_1_4 + 2*x_0_2*x_0_3*x_2_3 + 2*x_0_2*x_0_4*x_2_4 + 2*x_0_3*x_0_4*x_3_4 + x_1_1*x_2_2*x_3_3 + x_1_1*x_2_2*x_4_4 + x_1_1*x_3_3*x_4_4 + 2*x_1_2*x_1_3*x_2_3 + 2*x_1_2*x_1_4*x_2_4 + 2*x_1_3*x_1_4*x_3_4 + x_2_2*x_3_3*x_4_4 + 2*x_2_3*x_2_4*x_3_4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = -x_2_3**2
    x1 = -x_2_4**2
    x2 = -x_3_4**2
    x3 = x_2_2*x_3_3
    x4 = x_2_2*x_4_4
    x5 = x_3_3*x_4_4
    x6 = x0 + x1 + x2 + x3 + x4 + x5
    x7 = -x_1_3**2
    x8 = -x_1_4**2
    x9 = x_1_1*x_3_3
    x10 = x_1_1*x_4_4
    x11 = x10 + x7 + x8 + x9
    x12 = x_1_1*x_2_2 - x_1_2**2
    x13 = -x_0_3**2
    x14 = -x_0_4**2
    x15 = x_0_0*x_3_3
    x16 = x_0_0*x_4_4
    x17 = x13 + x14 + x15 + x16
    x18 = x_0_0*x_2_2 - x_0_2**2
    x19 = x_0_0*x_1_1 - x_0_1**2
    x20 = x12 + x18 + x19
    return np.array([x11 + x12 + x6,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 - x_0_1*x_4_4 + x_0_2*x_1_2 + x_0_3*x_1_3 + x_0_4*x_1_4),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 - x_0_2*x_4_4 + x_0_3*x_2_3 + x_0_4*x_2_4),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2 - x_0_3*x_4_4 + x_0_4*x_3_4),
        2*(x_0_1*x_1_4 + x_0_2*x_2_4 + x_0_3*x_3_4 - x_0_4*x_1_1 - x_0_4*x_2_2 - x_0_4*x_3_3),
        x17 + x18 + x6,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 - x_1_2*x_4_4 + x_1_3*x_2_3 + x_1_4*x_2_4),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2 - x_1_3*x_4_4 + x_1_4*x_3_4),
        2*(-x_0_0*x_1_4 + x_0_1*x_0_4 + x_1_2*x_2_4 + x_1_3*x_3_4 - x_1_4*x_2_2 - x_1_4*x_3_3),
        x11 + x17 + x19 + x2 + x5,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3 - x_2_3*x_4_4 + x_2_4*x_3_4),
        2*(-x_0_0*x_2_4 + x_0_2*x_0_4 - x_1_1*x_2_4 + x_1_2*x_1_4 + x_2_3*x_3_4 - x_2_4*x_3_3),
        x1 + x10 + x14 + x16 + x20 + x4 + x8,
        2*(-x_0_0*x_3_4 + x_0_3*x_0_4 - x_1_1*x_3_4 + x_1_3*x_1_4 - x_2_2*x_3_4 + x_2_3*x_2_4),
        x0 + x13 + x15 + x20 + x3 + x7 + x9])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_3 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_3_3 + x_4_4
    x1 = x0 + x_2_2
    x2 = 2*x_1_2
    x3 = -x2
    x4 = 2*x_1_3
    x5 = -x4
    x6 = 2*x_1_4
    x7 = -x6
    x8 = x0 + x_1_1
    x9 = 2*x_2_3
    x10 = -x9
    x11 = 2*x_2_4
    x12 = -x11
    x13 = x_1_1 + x_2_2
    x14 = x13 + x_4_4
    x15 = 2*x_3_4
    x16 = -x15
    x17 = x13 + x_3_3
    x18 = 2*x_0_2
    x19 = 2*x_0_3
    x20 = 2*x_0_4
    x21 = 2*x_0_1
    x22 = -x21
    x23 = -x18
    x24 = -x19
    x25 = -x20
    x26 = x0 + x_0_0
    x27 = x_0_0 + x_2_2
    x28 = x27 + x_4_4
    x29 = x27 + x_3_3
    x30 = x_0_0 + x_1_1
    x31 = x30 + x_4_4
    x32 = x30 + x_3_3
    x33 = x13 + x_0_0
    hessian = np.empty((15, 15))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = x1
    hessian[0, 6] = x3
    hessian[0, 7] = x5
    hessian[0, 8] = x7
    hessian[0, 9] = x8
    hessian[0, 10] = x10
    hessian[0, 11] = x12
    hessian[0, 12] = x14
    hessian[0, 13] = x16
    hessian[0, 14] = x17
    hessian[1, 0] = 0
    hessian[1, 1] = -2*x1
    hessian[1, 2] = x2
    hessian[1, 3] = x4
    hessian[1, 4] = x6
    hessian[1, 5] = 0
    hessian[1, 6] = x18
    hessian[1, 7] = x19
    hessian[1, 8] = x20
    hessian[1, 9] = x22
    hessian[1, 10] = 0
    hessian[1, 11] = 0
    hessian[1, 12] = x22
    hessian[1, 13] = 0
    hessian[1, 14] = x22
    hessian[2, 0] = 0
    hessian[2, 1] = x2
    hessian[2, 2] = -2*x8
    hessian[2, 3] = x9
    hessian[2, 4] = x11
    hessian[2, 5] = x23
    hessian[2, 6] = x21
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[2, 10] = x19
    hessian[2, 11] = x20
    hessian[2, 12] = x23
    hessian[2, 13] = 0
    hessian[2, 14] = x23
    hessian[3, 0] = 0
    hessian[3, 1] = x4
    hessian[3, 2] = x9
    hessian[3, 3] = -2*x14
    hessian[3, 4] = x15
    hessian[3, 5] = x24
    hessian[3, 6] = 0
    hessian[3, 7] = x21
    hessian[3, 8] = 0
    hessian[3, 9] = x24
    hessian[3, 10] = x18
    hessian[3, 11] = 0
    hessian[3, 12] = 0
    hessian[3, 13] = x20
    hessian[3, 14] = x24
    hessian[4, 0] = 0
    hessian[4, 1] = x6
    hessian[4, 2] = x11
    hessian[4, 3] = x15
    hessian[4, 4] = -2*x17
    hessian[4, 5] = x25
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = x21
    hessian[4, 9] = x25
    hessian[4, 10] = 0
    hessian[4, 11] = x18
    hessian[4, 12] = x25
    hessian[4, 13] = x19
    hessian[4, 14] = 0
    hessian[5, 0] = x1
    hessian[5, 1] = 0
    hessian[5, 2] = x23
    hessian[5, 3] = x24
    hessian[5, 4] = x25
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = x26
    hessian[5, 10] = x10
    hessian[5, 11] = x12
    hessian[5, 12] = x28
    hessian[5, 13] = x16
    hessian[5, 14] = x29
    hessian[6, 0] = x3
    hessian[6, 1] = x18
    hessian[6, 2] = x21
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = -2*x26
    hessian[6, 7] = x9
    hessian[6, 8] = x11
    hessian[6, 9] = 0
    hessian[6, 10] = x4
    hessian[6, 11] = x6
    hessian[6, 12] = x3
    hessian[6, 13] = 0
    hessian[6, 14] = x3
    hessian[7, 0] = x5
    hessian[7, 1] = x19
    hessian[7, 2] = 0
    hessian[7, 3] = x21
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = x9
    hessian[7, 7] = -2*x28
    hessian[7, 8] = x15
    hessian[7, 9] = x5
    hessian[7, 10] = x2
    hessian[7, 11] = 0
    hessian[7, 12] = 0
    hessian[7, 13] = x6
    hessian[7, 14] = x5
    hessian[8, 0] = x7
    hessian[8, 1] = x20
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = x21
    hessian[8, 5] = 0
    hessian[8, 6] = x11
    hessian[8, 7] = x15
    hessian[8, 8] = -2*x29
    hessian[8, 9] = x7
    hessian[8, 10] = 0
    hessian[8, 11] = x2
    hessian[8, 12] = x7
    hessian[8, 13] = x4
    hessian[8, 14] = 0
    hessian[9, 0] = x8
    hessian[9, 1] = x22
    hessian[9, 2] = 0
    hessian[9, 3] = x24
    hessian[9, 4] = x25
    hessian[9, 5] = x26
    hessian[9, 6] = 0
    hessian[9, 7] = x5
    hessian[9, 8] = x7
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[9, 12] = x31
    hessian[9, 13] = x16
    hessian[9, 14] = x32
    hessian[10, 0] = x10
    hessian[10, 1] = 0
    hessian[10, 2] = x19
    hessian[10, 3] = x18
    hessian[10, 4] = 0
    hessian[10, 5] = x10
    hessian[10, 6] = x4
    hessian[10, 7] = x2
    hessian[10, 8] = 0
    hessian[10, 9] = 0
    hessian[10, 10] = -2*x31
    hessian[10, 11] = x15
    hessian[10, 12] = 0
    hessian[10, 13] = x11
    hessian[10, 14] = x10
    hessian[11, 0] = x12
    hessian[11, 1] = 0
    hessian[11, 2] = x20
    hessian[11, 3] = 0
    hessian[11, 4] = x18
    hessian[11, 5] = x12
    hessian[11, 6] = x6
    hessian[11, 7] = 0
    hessian[11, 8] = x2
    hessian[11, 9] = 0
    hessian[11, 10] = x15
    hessian[11, 11] = -2*x32
    hessian[11, 12] = x12
    hessian[11, 13] = x9
    hessian[11, 14] = 0
    hessian[12, 0] = x14
    hessian[12, 1] = x22
    hessian[12, 2] = x23
    hessian[12, 3] = 0
    hessian[12, 4] = x25
    hessian[12, 5] = x28
    hessian[12, 6] = x3
    hessian[12, 7] = 0
    hessian[12, 8] = x7
    hessian[12, 9] = x31
    hessian[12, 10] = 0
    hessian[12, 11] = x12
    hessian[12, 12] = 0
    hessian[12, 13] = 0
    hessian[12, 14] = x33
    hessian[13, 0] = x16
    hessian[13, 1] = 0
    hessian[13, 2] = 0
    hessian[13, 3] = x20
    hessian[13, 4] = x19
    hessian[13, 5] = x16
    hessian[13, 6] = 0
    hessian[13, 7] = x6
    hessian[13, 8] = x4
    hessian[13, 9] = x16
    hessian[13, 10] = x11
    hessian[13, 11] = x9
    hessian[13, 12] = 0
    hessian[13, 13] = -2*x33
    hessian[13, 14] = 0
    hessian[14, 0] = x17
    hessian[14, 1] = x22
    hessian[14, 2] = x23
    hessian[14, 3] = x24
    hessian[14, 4] = 0
    hessian[14, 5] = x29
    hessian[14, 6] = x3
    hessian[14, 7] = x5
    hessian[14, 8] = 0
    hessian[14, 9] = x32
    hessian[14, 10] = x10
    hessian[14, 11] = 0
    hessian[14, 12] = x33
    hessian[14, 13] = 0
    hessian[14, 14] = 0
    return hessian


# --- Functions for S_4 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5(x_vec):
    """Calculates the value of S_4 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_2_3**2
    x1 = x_0_0*x_1_1
    x2 = x_2_4**2
    x3 = x_3_4**2
    x4 = x_1_2**2
    x5 = x_0_0*x_3_3
    x6 = x_0_0*x_4_4
    x7 = x_1_3**2
    x8 = x_0_0*x_2_2
    x9 = x_1_4**2
    x10 = x_0_1**2
    x11 = x_2_2*x_3_3
    x12 = x_2_2*x_4_4
    x13 = x_3_3*x_4_4
    x14 = x_0_2**2
    x15 = x_1_1*x_3_3
    x16 = x_1_1*x_4_4
    x17 = x_0_3**2
    x18 = x_1_1*x_2_2
    x19 = x_0_4**2
    x20 = 2*x_0_1
    x21 = x20*x_0_2
    x22 = x_1_3*x_2_3
    x23 = x_1_4*x_2_4
    x24 = x20*x_0_3
    x25 = x_1_2*x_2_3
    x26 = x_1_4*x_3_4
    x27 = x20*x_0_4
    x28 = x_1_2*x_2_4
    x29 = x_1_3*x_3_4
    x30 = 2*x_0_2
    x31 = x30*x_0_3
    x32 = x30*x_0_4
    x33 = x_0_3*x_0_4
    return -x0*x1 + x0*x10 - x0*x16 + x0*x19 - x0*x6 + x0*x9 - x1*x2 - x1*x3 - x10*x11 - x10*x12 - x10*x13 + x10*x2 + x10*x3 - x11*x19 - x11*x9 - x12*x17 - x12*x7 - x13*x14 - x13*x4 - x14*x15 - x14*x16 + x14*x3 + x14*x7 + x14*x9 - x15*x19 - x15*x2 - x16*x17 - x17*x18 + x17*x2 + x17*x4 + x17*x9 - x18*x19 - x18*x3 + x19*x4 + x19*x7 - x2*x5 + x2*x7 - x21*x22 - x21*x23 - 2*x22*x23 - x24*x25 - x24*x26 - 2*x25*x26 - x27*x28 - x27*x29 - 2*x28*x29 + x3*x4 - x3*x8 - x31*x_1_2*x_1_3 - x31*x_2_4*x_3_4 - x32*x_1_2*x_1_4 - x32*x_2_3*x_3_4 - 2*x33*x_1_3*x_1_4 - 2*x33*x_2_3*x_2_4 - x4*x5 - x4*x6 - x5*x9 - x6*x7 - x7*x8 - x8*x9 + x_0_0*x_1_1*x_2_2*x_3_3 + x_0_0*x_1_1*x_2_2*x_4_4 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_2*x_0_3*x_1_1*x_2_3 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_1_1*x_2_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4 + 2*x_0_3*x_0_4*x_2_2*x_3_4 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_3_4**2
    x1 = x_2_4**2
    x2 = x_2_3**2
    x3 = x0*x_2_2 + x1*x_3_3 + x2*x_4_4 - x_2_2*x_3_3*x_4_4 - 2*x_2_3*x_2_4*x_3_4
    x4 = x_1_4**2
    x5 = x_1_3**2
    x6 = x0*x_1_1 + x4*x_3_3 + x5*x_4_4 - x_1_1*x_3_3*x_4_4 - 2*x_1_3*x_1_4*x_3_4
    x7 = x_1_2**2
    x8 = x1*x_1_1 + x4*x_2_2 + x7*x_4_4 - x_1_1*x_2_2*x_4_4 - 2*x_1_2*x_1_4*x_2_4
    x9 = x2*x_1_1 + x5*x_2_2 + x7*x_3_3 - x_1_1*x_2_2*x_3_3 - 2*x_1_2*x_1_3*x_2_3
    x10 = x_0_1*x_2_2
    x11 = x_3_3*x_4_4
    x12 = x_1_3*x_2_3
    x13 = x_1_4*x_2_4
    x14 = x_0_3*x_2_3
    x15 = x_0_3*x_3_4
    x16 = x_0_4*x_2_4
    x17 = x_0_4*x_3_4
    x18 = x_0_1*x_1_2
    x19 = x_0_2*x_1_1
    x20 = x_0_3*x_1_3
    x21 = x_0_4*x_1_4
    x22 = x_0_1*x_1_4
    x23 = x_0_2*x_1_2
    x24 = x_0_2*x_2_4
    x25 = x_1_1*x_2_2
    x26 = x_0_3*x_4_4
    x27 = x_0_1*x_1_3
    x28 = x_0_2*x_2_3
    x29 = x_0_4*x_3_3
    x30 = x_0_4**2
    x31 = x_0_3**2
    x32 = x0*x_0_0 + x30*x_3_3 + x31*x_4_4 - x_0_0*x_3_3*x_4_4 - 2*x_0_3*x_0_4*x_3_4
    x33 = x_0_2**2
    x34 = x1*x_0_0 + x30*x_2_2 + x33*x_4_4 - x_0_0*x_2_2*x_4_4 - 2*x_0_2*x_0_4*x_2_4
    x35 = x2*x_0_0 + x31*x_2_2 + x33*x_3_3 - x_0_0*x_2_2*x_3_3 - 2*x_0_2*x_0_3*x_2_3
    x36 = x_0_0*x_1_2
    x37 = x_2_4*x_3_4
    x38 = x_1_4*x_3_4
    x39 = x_1_2*x_2_3
    x40 = x_0_0*x_2_2
    x41 = x_1_3*x_4_4
    x42 = x_1_3*x_3_4
    x43 = x_1_4*x_3_3
    x44 = x_0_1**2
    x45 = x30*x_1_1 + x4*x_0_0 + x44*x_4_4 - x_0_0*x_1_1*x_4_4 - 2*x_0_1*x_0_4*x_1_4
    x46 = x31*x_1_1 + x44*x_3_3 + x5*x_0_0 - x_0_0*x_1_1*x_3_3 - 2*x_0_1*x_0_3*x_1_3
    x47 = x_0_0*x_1_1
    x48 = x_2_3*x_4_4
    x49 = x_2_4*x_3_3
    x50 = x33*x_1_1 + x44*x_2_2 + x7*x_0_0 - x_0_0*x_1_1*x_2_2 - 2*x_0_1*x_0_2*x_1_2
    return np.array([-x3 - x6 - x8 - x9,
        2*x0*x_0_1 + 2*x1*x_0_1 - 2*x10*x_3_3 - 2*x10*x_4_4 - 2*x11*x_0_1 - 2*x12*x_0_2 - 2*x13*x_0_2 - 2*x14*x_1_2 - 2*x15*x_1_4 - 2*x16*x_1_2 - 2*x17*x_1_3 + 2*x2*x_0_1 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_2*x_1_2*x_4_4 + 2*x_0_3*x_1_3*x_2_2 + 2*x_0_3*x_1_3*x_4_4 + 2*x_0_4*x_1_4*x_2_2 + 2*x_0_4*x_1_4*x_3_3,
        2*x0*x_0_2 - 2*x11*x_0_2 - 2*x12*x_0_1 - 2*x13*x_0_1 + 2*x14*x_1_1 + 2*x14*x_4_4 - 2*x15*x_2_4 + 2*x16*x_1_1 + 2*x16*x_3_3 - 2*x17*x_2_3 + 2*x18*x_3_3 + 2*x18*x_4_4 - 2*x19*x_3_3 - 2*x19*x_4_4 - 2*x20*x_1_2 - 2*x21*x_1_2 + 2*x4*x_0_2 + 2*x5*x_0_2,
        2*x1*x_0_3 - 2*x16*x_2_3 - 2*x18*x_2_3 - 2*x21*x_1_3 - 2*x22*x_3_4 - 2*x23*x_1_3 - 2*x24*x_3_4 - 2*x25*x_0_3 - 2*x26*x_1_1 - 2*x26*x_2_2 + 2*x4*x_0_3 + 2*x7*x_0_3 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_1*x_1_3*x_4_4 + 2*x_0_2*x_1_1*x_2_3 + 2*x_0_2*x_2_3*x_4_4 + 2*x_0_4*x_1_1*x_3_4 + 2*x_0_4*x_2_2*x_3_4,
        -2*x14*x_2_4 - 2*x18*x_2_4 + 2*x2*x_0_4 - 2*x20*x_1_4 - 2*x23*x_1_4 - 2*x25*x_0_4 - 2*x27*x_3_4 - 2*x28*x_3_4 - 2*x29*x_1_1 - 2*x29*x_2_2 + 2*x5*x_0_4 + 2*x7*x_0_4 + 2*x_0_1*x_1_4*x_2_2 + 2*x_0_1*x_1_4*x_3_3 + 2*x_0_2*x_1_1*x_2_4 + 2*x_0_2*x_2_4*x_3_3 + 2*x_0_3*x_1_1*x_3_4 + 2*x_0_3*x_2_2*x_3_4,
        -x3 - x32 - x34 - x35,
        2*x0*x_1_2 - 2*x11*x_1_2 - 2*x14*x_0_1 - 2*x16*x_0_1 - 2*x20*x_0_2 - 2*x21*x_0_2 + 2*x30*x_1_2 + 2*x31*x_1_2 - 2*x36*x_3_3 - 2*x36*x_4_4 - 2*x37*x_1_3 - 2*x38*x_2_3 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_0*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_3_3 + 2*x_0_1*x_0_2*x_4_4 + 2*x_1_3*x_2_3*x_4_4 + 2*x_1_4*x_2_4*x_3_3,
        2*x1*x_1_3 + 2*x10*x_0_3 - 2*x13*x_2_3 - 2*x17*x_0_1 - 2*x21*x_0_3 - 2*x23*x_0_3 + 2*x26*x_0_1 - 2*x28*x_0_1 + 2*x30*x_1_3 + 2*x33*x_1_3 + 2*x36*x_2_3 - 2*x37*x_1_2 + 2*x38*x_0_0 + 2*x38*x_2_2 + 2*x39*x_4_4 - 2*x40*x_1_3 - 2*x41*x_0_0 - 2*x41*x_2_2,
        2*x10*x_0_4 - 2*x12*x_2_4 - 2*x15*x_0_1 + 2*x2*x_1_4 - 2*x20*x_0_4 - 2*x23*x_0_4 - 2*x24*x_0_1 + 2*x29*x_0_1 + 2*x31*x_1_4 + 2*x33*x_1_4 + 2*x36*x_2_4 - 2*x39*x_3_4 - 2*x40*x_1_4 + 2*x42*x_0_0 + 2*x42*x_2_2 - 2*x43*x_0_0 - 2*x43*x_2_2 + 2*x_1_2*x_2_4*x_3_3,
        -x32 - x45 - x46 - x6,
        -2*x13*x_1_3 - 2*x16*x_0_3 - 2*x17*x_0_2 - 2*x18*x_0_3 - 2*x27*x_0_2 + 2*x30*x_2_3 - 2*x38*x_1_2 + 2*x4*x_2_3 + 2*x44*x_2_3 - 2*x47*x_2_3 - 2*x48*x_0_0 - 2*x48*x_1_1 + 2*x_0_0*x_1_2*x_1_3 + 2*x_0_0*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_1_1 + 2*x_0_2*x_0_3*x_4_4 + 2*x_1_1*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_4_4,
        -2*x12*x_1_4 - 2*x14*x_0_4 - 2*x15*x_0_2 - 2*x18*x_0_4 - 2*x22*x_0_2 + 2*x31*x_2_4 - 2*x42*x_1_2 + 2*x44*x_2_4 - 2*x47*x_2_4 - 2*x49*x_0_0 - 2*x49*x_1_1 + 2*x5*x_2_4 + 2*x_0_0*x_1_2*x_1_4 + 2*x_0_0*x_2_3*x_3_4 + 2*x_0_2*x_0_4*x_1_1 + 2*x_0_2*x_0_4*x_3_3 + 2*x_1_1*x_2_3*x_3_4 + 2*x_1_2*x_1_4*x_3_3,
        -x34 - x45 - x50 - x8,
        -2*x22*x_0_3 - 2*x24*x_0_3 - 2*x25*x_3_4 - 2*x27*x_0_4 - 2*x28*x_0_4 + 2*x33*x_3_4 - 2*x39*x_1_4 - 2*x40*x_3_4 + 2*x44*x_3_4 - 2*x47*x_3_4 + 2*x7*x_3_4 + 2*x_0_0*x_1_3*x_1_4 + 2*x_0_0*x_2_3*x_2_4 + 2*x_0_3*x_0_4*x_1_1 + 2*x_0_3*x_0_4*x_2_2 + 2*x_1_1*x_2_3*x_2_4 - 2*x_1_2*x_1_3*x_2_4 + 2*x_1_3*x_1_4*x_2_2,
        -x35 - x46 - x50 - x9])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_4 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_3_3*x_4_4 - x_3_4**2
    x1 = x_2_2*x_4_4 - x_2_4**2
    x2 = x_2_2*x_3_3 - x_2_3**2
    x3 = x0 + x1 + x2
    x4 = x_1_2*x_4_4 - x_1_4*x_2_4
    x5 = x_1_2*x_3_3 - x_1_3*x_2_3
    x6 = x4 + x5
    x7 = -2*x6
    x8 = x_1_2*x_2_3
    x9 = x_1_4*x_3_4
    x10 = x_1_3*x_2_2
    x11 = x_1_3*x_4_4
    x12 = -x10 - x11 + x8 + x9
    x13 = 2*x12
    x14 = x_1_2*x_2_4
    x15 = x_1_3*x_3_4
    x16 = x_1_4*x_2_2
    x17 = x_1_4*x_3_3
    x18 = x14 + x15 - x16 - x17
    x19 = 2*x18
    x20 = x_1_1*x_4_4 - x_1_4**2
    x21 = x_1_1*x_3_3 - x_1_3**2
    x22 = x0 + x20 + x21
    x23 = x_2_3*x_4_4 - x_2_4*x_3_4
    x24 = x_1_1*x_2_3 - x_1_2*x_1_3
    x25 = x23 + x24
    x26 = -2*x25
    x27 = -x_2_3*x_3_4 + x_2_4*x_3_3
    x28 = x_1_1*x_2_4 - x_1_2*x_1_4
    x29 = x27 + x28
    x30 = -2*x29
    x31 = x_1_1*x_2_2 - x_1_2**2
    x32 = x1 + x20 + x31
    x33 = x_2_2*x_3_4 - x_2_3*x_2_4
    x34 = x_1_1*x_3_4 - x_1_3*x_1_4
    x35 = x33 + x34
    x36 = -2*x35
    x37 = x2 + x21 + x31
    x38 = 2*x6
    x39 = -2*x12
    x40 = -2*x18
    x41 = x_0_2*x_3_3
    x42 = x_0_2*x_4_4
    x43 = x_0_3*x_2_3
    x44 = x_0_4*x_2_4
    x45 = x41 + x42 - x43 - x44
    x46 = 2*x45
    x47 = -x_0_3*x_4_4 + x_0_4*x_3_4
    x48 = x_0_2*x_2_3 - x_0_3*x_2_2
    x49 = x47 + x48
    x50 = -2*x49
    x51 = x_0_3*x_3_4 - x_0_4*x_3_3
    x52 = x_0_2*x_2_4 - x_0_4*x_2_2
    x53 = x51 + x52
    x54 = -2*x53
    x55 = x_0_1*x_4_4 - x_0_4*x_1_4
    x56 = x_0_1*x_3_3 - x_0_3*x_1_3
    x57 = x55 + x56
    x58 = -2*x57
    x59 = x_0_2*x_1_3
    x60 = x_0_3*x_1_2
    x61 = -2*x59 - 2*x60 + 4*x_0_1*x_2_3
    x62 = x_0_2*x_1_4
    x63 = x_0_4*x_1_2
    x64 = -2*x62 - 2*x63 + 4*x_0_1*x_2_4
    x65 = x_0_1*x_2_2 - x_0_2*x_1_2
    x66 = x55 + x65
    x67 = -2*x66
    x68 = x_0_3*x_1_4
    x69 = x_0_4*x_1_3
    x70 = -2*x68 - 2*x69 + 4*x_0_1*x_3_4
    x71 = x56 + x65
    x72 = -2*x71
    x73 = 2*x25
    x74 = 2*x29
    x75 = -2*x45
    x76 = 2*x57
    x77 = x_0_1*x_2_3
    x78 = -2*x60 - 2*x77 + 4*x_0_2*x_1_3
    x79 = x_0_1*x_2_4
    x80 = -2*x63 - 2*x79 + 4*x_0_2*x_1_4
    x81 = x_0_1*x_1_3 - x_0_3*x_1_1
    x82 = x47 + x81
    x83 = -2*x82
    x84 = x_0_1*x_1_4 - x_0_4*x_1_1
    x85 = x51 + x84
    x86 = -2*x85
    x87 = x_0_1*x_1_2 - x_0_2*x_1_1
    x88 = -x42 + x44 + x87
    x89 = 2*x88
    x90 = x_0_3*x_2_4
    x91 = x_0_4*x_2_3
    x92 = -2*x90 - 2*x91 + 4*x_0_2*x_3_4
    x93 = -x41 + x43 + x87
    x94 = 2*x93
    x95 = 2*x35
    x96 = 2*x49
    x97 = -2*x59 - 2*x77 + 4*x_0_3*x_1_2
    x98 = 2*x66
    x99 = x_0_1*x_3_4
    x100 = -2*x69 - 2*x99 + 4*x_0_3*x_1_4
    x101 = 2*x82
    x102 = -2*x88
    x103 = x_0_2*x_3_4
    x104 = -2*x103 - 2*x91 + 4*x_0_3*x_2_4
    x105 = x52 + x84
    x106 = -2*x105
    x107 = x48 + x81
    x108 = 2*x107
    x109 = 2*x53
    x110 = -2*x62 - 2*x79 + 4*x_0_4*x_1_2
    x111 = -2*x68 - 2*x99 + 4*x_0_4*x_1_3
    x112 = 2*x71
    x113 = 2*x85
    x114 = -2*x103 - 2*x90 + 4*x_0_4*x_2_3
    x115 = -2*x93
    x116 = 2*x105
    x117 = -2*x107
    x118 = x_0_0*x_4_4 - x_0_4**2
    x119 = x_0_0*x_3_3 - x_0_3**2
    x120 = x0 + x118 + x119
    x121 = x_0_0*x_2_3 - x_0_2*x_0_3
    x122 = x121 + x23
    x123 = -2*x122
    x124 = x_0_0*x_2_4 - x_0_2*x_0_4
    x125 = x124 + x27
    x126 = -2*x125
    x127 = x_0_0*x_2_2 - x_0_2**2
    x128 = x1 + x118 + x127
    x129 = x_0_0*x_3_4 - x_0_3*x_0_4
    x130 = x129 + x33
    x131 = -2*x130
    x132 = x119 + x127 + x2
    x133 = 2*x122
    x134 = 2*x125
    x135 = x_0_0*x_1_3 - x_0_1*x_0_3
    x136 = x11 + x135 - x9
    x137 = 2*x136
    x138 = x_0_0*x_1_4 - x_0_1*x_0_4
    x139 = x138 - x15 + x17
    x140 = 2*x139
    x141 = x_0_0*x_1_2 - x_0_1*x_0_2
    x142 = x141 + x4
    x143 = -2*x142
    x144 = x_1_3*x_2_4
    x145 = x_1_4*x_2_3
    x146 = -2*x144 - 2*x145 + 4*x_1_2*x_3_4
    x147 = x141 + x5
    x148 = -2*x147
    x149 = 2*x130
    x150 = -2*x136
    x151 = 2*x142
    x152 = x_1_2*x_3_4
    x153 = -2*x145 - 2*x152 + 4*x_1_3*x_2_4
    x154 = x138 - x14 + x16
    x155 = 2*x154
    x156 = x10 + x135 - x8
    x157 = -2*x156
    x158 = -2*x139
    x159 = -2*x144 - 2*x152 + 4*x_1_4*x_2_3
    x160 = 2*x147
    x161 = -2*x154
    x162 = 2*x156
    x163 = x_0_0*x_1_1 - x_0_1**2
    x164 = x118 + x163 + x20
    x165 = x129 + x34
    x166 = -2*x165
    x167 = x119 + x163 + x21
    x168 = 2*x165
    x169 = x124 + x28
    x170 = 2*x169
    x171 = x121 + x24
    x172 = -2*x171
    x173 = -2*x169
    x174 = 2*x171
    x175 = x127 + x163 + x31
    hessian = np.empty((15, 15))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = x3
    hessian[0, 6] = x7
    hessian[0, 7] = x13
    hessian[0, 8] = x19
    hessian[0, 9] = x22
    hessian[0, 10] = x26
    hessian[0, 11] = x30
    hessian[0, 12] = x32
    hessian[0, 13] = x36
    hessian[0, 14] = x37
    hessian[1, 0] = 0
    hessian[1, 1] = -2*x3
    hessian[1, 2] = x38
    hessian[1, 3] = x39
    hessian[1, 4] = x40
    hessian[1, 5] = 0
    hessian[1, 6] = x46
    hessian[1, 7] = x50
    hessian[1, 8] = x54
    hessian[1, 9] = x58
    hessian[1, 10] = x61
    hessian[1, 11] = x64
    hessian[1, 12] = x67
    hessian[1, 13] = x70
    hessian[1, 14] = x72
    hessian[2, 0] = 0
    hessian[2, 1] = x38
    hessian[2, 2] = -2*x22
    hessian[2, 3] = x73
    hessian[2, 4] = x74
    hessian[2, 5] = x75
    hessian[2, 6] = x76
    hessian[2, 7] = x78
    hessian[2, 8] = x80
    hessian[2, 9] = 0
    hessian[2, 10] = x83
    hessian[2, 11] = x86
    hessian[2, 12] = x89
    hessian[2, 13] = x92
    hessian[2, 14] = x94
    hessian[3, 0] = 0
    hessian[3, 1] = x39
    hessian[3, 2] = x73
    hessian[3, 3] = -2*x32
    hessian[3, 4] = x95
    hessian[3, 5] = x96
    hessian[3, 6] = x97
    hessian[3, 7] = x98
    hessian[3, 8] = x100
    hessian[3, 9] = x101
    hessian[3, 10] = x102
    hessian[3, 11] = x104
    hessian[3, 12] = 0
    hessian[3, 13] = x106
    hessian[3, 14] = x108
    hessian[4, 0] = 0
    hessian[4, 1] = x40
    hessian[4, 2] = x74
    hessian[4, 3] = x95
    hessian[4, 4] = -2*x37
    hessian[4, 5] = x109
    hessian[4, 6] = x110
    hessian[4, 7] = x111
    hessian[4, 8] = x112
    hessian[4, 9] = x113
    hessian[4, 10] = x114
    hessian[4, 11] = x115
    hessian[4, 12] = x116
    hessian[4, 13] = x117
    hessian[4, 14] = 0
    hessian[5, 0] = x3
    hessian[5, 1] = 0
    hessian[5, 2] = x75
    hessian[5, 3] = x96
    hessian[5, 4] = x109
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = x120
    hessian[5, 10] = x123
    hessian[5, 11] = x126
    hessian[5, 12] = x128
    hessian[5, 13] = x131
    hessian[5, 14] = x132
    hessian[6, 0] = x7
    hessian[6, 1] = x46
    hessian[6, 2] = x76
    hessian[6, 3] = x97
    hessian[6, 4] = x110
    hessian[6, 5] = 0
    hessian[6, 6] = -2*x120
    hessian[6, 7] = x133
    hessian[6, 8] = x134
    hessian[6, 9] = 0
    hessian[6, 10] = x137
    hessian[6, 11] = x140
    hessian[6, 12] = x143
    hessian[6, 13] = x146
    hessian[6, 14] = x148
    hessian[7, 0] = x13
    hessian[7, 1] = x50
    hessian[7, 2] = x78
    hessian[7, 3] = x98
    hessian[7, 4] = x111
    hessian[7, 5] = 0
    hessian[7, 6] = x133
    hessian[7, 7] = -2*x128
    hessian[7, 8] = x149
    hessian[7, 9] = x150
    hessian[7, 10] = x151
    hessian[7, 11] = x153
    hessian[7, 12] = 0
    hessian[7, 13] = x155
    hessian[7, 14] = x157
    hessian[8, 0] = x19
    hessian[8, 1] = x54
    hessian[8, 2] = x80
    hessian[8, 3] = x100
    hessian[8, 4] = x112
    hessian[8, 5] = 0
    hessian[8, 6] = x134
    hessian[8, 7] = x149
    hessian[8, 8] = -2*x132
    hessian[8, 9] = x158
    hessian[8, 10] = x159
    hessian[8, 11] = x160
    hessian[8, 12] = x161
    hessian[8, 13] = x162
    hessian[8, 14] = 0
    hessian[9, 0] = x22
    hessian[9, 1] = x58
    hessian[9, 2] = 0
    hessian[9, 3] = x101
    hessian[9, 4] = x113
    hessian[9, 5] = x120
    hessian[9, 6] = 0
    hessian[9, 7] = x150
    hessian[9, 8] = x158
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[9, 12] = x164
    hessian[9, 13] = x166
    hessian[9, 14] = x167
    hessian[10, 0] = x26
    hessian[10, 1] = x61
    hessian[10, 2] = x83
    hessian[10, 3] = x102
    hessian[10, 4] = x114
    hessian[10, 5] = x123
    hessian[10, 6] = x137
    hessian[10, 7] = x151
    hessian[10, 8] = x159
    hessian[10, 9] = 0
    hessian[10, 10] = -2*x164
    hessian[10, 11] = x168
    hessian[10, 12] = 0
    hessian[10, 13] = x170
    hessian[10, 14] = x172
    hessian[11, 0] = x30
    hessian[11, 1] = x64
    hessian[11, 2] = x86
    hessian[11, 3] = x104
    hessian[11, 4] = x115
    hessian[11, 5] = x126
    hessian[11, 6] = x140
    hessian[11, 7] = x153
    hessian[11, 8] = x160
    hessian[11, 9] = 0
    hessian[11, 10] = x168
    hessian[11, 11] = -2*x167
    hessian[11, 12] = x173
    hessian[11, 13] = x174
    hessian[11, 14] = 0
    hessian[12, 0] = x32
    hessian[12, 1] = x67
    hessian[12, 2] = x89
    hessian[12, 3] = 0
    hessian[12, 4] = x116
    hessian[12, 5] = x128
    hessian[12, 6] = x143
    hessian[12, 7] = 0
    hessian[12, 8] = x161
    hessian[12, 9] = x164
    hessian[12, 10] = 0
    hessian[12, 11] = x173
    hessian[12, 12] = 0
    hessian[12, 13] = 0
    hessian[12, 14] = x175
    hessian[13, 0] = x36
    hessian[13, 1] = x70
    hessian[13, 2] = x92
    hessian[13, 3] = x106
    hessian[13, 4] = x117
    hessian[13, 5] = x131
    hessian[13, 6] = x146
    hessian[13, 7] = x155
    hessian[13, 8] = x162
    hessian[13, 9] = x166
    hessian[13, 10] = x170
    hessian[13, 11] = x174
    hessian[13, 12] = 0
    hessian[13, 13] = -2*x175
    hessian[13, 14] = 0
    hessian[14, 0] = x37
    hessian[14, 1] = x72
    hessian[14, 2] = x94
    hessian[14, 3] = x108
    hessian[14, 4] = 0
    hessian[14, 5] = x132
    hessian[14, 6] = x148
    hessian[14, 7] = x157
    hessian[14, 8] = 0
    hessian[14, 9] = x167
    hessian[14, 10] = x172
    hessian[14, 11] = 0
    hessian[14, 12] = x175
    hessian[14, 13] = 0
    hessian[14, 14] = 0
    return hessian


# --- Functions for S_5 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5(x_vec):
    """Calculates the value of S_5 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_1_1*x_2_2
    x1 = x_0_0*x_3_3
    x2 = 2*x_3_4
    x3 = x2*x_2_3
    x4 = x3*x_2_4
    x5 = x_0_0*x_4_4
    x6 = 2*x_1_2
    x7 = x_1_3*x_2_3
    x8 = x6*x7
    x9 = x2*x_1_3
    x10 = x_0_0*x_1_2
    x11 = x_1_4*x_2_4
    x12 = x11*x6
    x13 = x9*x_1_4
    x14 = x_3_3*x_4_4
    x15 = 2*x_0_1
    x16 = x15*x_0_2
    x17 = x16*x_1_2
    x18 = x16*x_3_4
    x19 = x_1_3*x_2_4
    x20 = x_1_4*x_2_3
    x21 = x_1_2*x_4_4
    x22 = x15*x_0_3
    x23 = x22*x_2_3
    x24 = x_1_2*x_3_4
    x25 = x_2_2*x_4_4
    x26 = x22*x_1_3
    x27 = x_2_2*x_3_4
    x28 = x15*x_0_4
    x29 = x_1_2*x_3_3
    x30 = x28*x_2_4
    x31 = x_2_2*x_3_3
    x32 = x28*x_1_4
    x33 = x_1_1*x_4_4
    x34 = 2*x_0_2
    x35 = x34*x_0_3
    x36 = x35*x_2_3
    x37 = x_1_1*x_3_4
    x38 = x35*x_1_3
    x39 = x34*x_0_4
    x40 = x_1_1*x_3_3
    x41 = x39*x_2_4
    x42 = x39*x_1_4
    x43 = x_0_3*x_0_4
    x44 = x2*x43
    x45 = 2*x43
    x46 = x43*x6
    x47 = x_1_2**2
    x48 = x_3_4**2
    x49 = x48*x_0_0
    x50 = x_1_3**2
    x51 = x_2_4**2
    x52 = x51*x_0_0
    x53 = x_1_4**2
    x54 = x_2_3**2
    x55 = x54*x_0_0
    x56 = x_0_1**2
    x57 = x56*x_2_2
    x58 = x_0_2**2
    x59 = x58*x_1_1
    x60 = x_0_3**2
    x61 = x60*x_1_1
    x62 = x53*x_2_2
    x63 = x_0_4**2
    x64 = x63*x_1_1
    x65 = x47*x_3_3
    x66 = x50*x_2_2
    return x0*x1*x_4_4 + x0*x44 - x0*x49 + x1*x12 - x1*x62 - x10*x3*x_1_4 - x10*x9*x_2_4 - x11*x16*x_3_3 + x11*x23 + x11*x38 - 2*x11*x7*x_0_0 - x12*x60 - x13*x58 + x13*x_0_0*x_2_2 + x14*x17 - x14*x57 - x14*x59 - x16*x7*x_4_4 - x17*x48 + x18*x19 + x18*x20 + x19*x46 + x20*x46 - x21*x23 - x21*x38 + x22*x24*x_2_4 - x22*x27*x_1_4 + x24*x28*x_2_3 + x24*x35*x_1_4 + x24*x39*x_1_3 + x25*x26 - x25*x61 - x26*x51 - x27*x28*x_1_3 - x29*x30 - x29*x42 + x30*x7 + x31*x32 - x31*x64 - x32*x54 + x33*x36 - x33*x55 - x35*x37*x_2_4 - x36*x53 - x37*x39*x_2_3 - x4*x56 + x4*x_0_0*x_1_1 + x40*x41 - x40*x52 - x41*x50 + x42*x7 - x44*x47 - x45*x_1_1*x_2_3*x_2_4 - x45*x_1_3*x_1_4*x_2_2 + x47*x49 + x47*x60*x_4_4 + x48*x57 + x48*x59 - x5*x65 - x5*x66 + x5*x8 + x50*x52 + x50*x58*x_4_4 + x51*x56*x_3_3 + x51*x61 + x53*x55 + x53*x58*x_3_3 + x54*x56*x_4_4 + x54*x64 + x60*x62 + x63*x65 + x63*x66 - x63*x8



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_5 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_3_4**2
    x1 = x0*x_2_2
    x2 = x_2_3**2
    x3 = x2*x_4_4
    x4 = x_2_4**2
    x5 = x4*x_3_3
    x6 = x_1_2**2
    x7 = x6*x_4_4
    x8 = x_1_3**2
    x9 = x8*x_4_4
    x10 = x_1_4**2
    x11 = x10*x_3_3
    x12 = x_1_3*x_2_4
    x13 = x_1_2*x_3_4
    x14 = 2*x13
    x15 = x_1_4*x_2_3
    x16 = 2*x12
    x17 = x_3_3*x_4_4
    x18 = x17*x_1_2
    x19 = x_0_2*x_3_4
    x20 = x_0_3*x_2_4
    x21 = x_1_3*x_4_4
    x22 = x_0_3*x_2_2
    x23 = x_0_4*x_2_3
    x24 = x_2_2*x_3_3
    x25 = x_0_4*x_1_4
    x26 = x_0_1*x_4_4
    x27 = x_0_1*x_3_4
    x28 = x_2_3*x_2_4
    x29 = x21*x_2_3
    x30 = x_2_4*x_3_3
    x31 = x_0_2*x_1_4
    x32 = x_0_3*x_1_2
    x33 = x_2_3*x_4_4
    x34 = x_1_4*x_3_4
    x35 = x_0_4*x_1_2
    x36 = x_0_4*x_1_3
    x37 = x_2_2*x_3_4
    x38 = x0*x_0_2
    x39 = x4*x_0_3
    x40 = x2*x_0_4
    x41 = x33*x_1_1
    x42 = x_0_3*x_1_4
    x43 = x_1_1*x_3_3
    x44 = x43*x_2_4
    x45 = x_0_1*x_1_4
    x46 = x_0_2*x_4_4
    x47 = x_1_3*x_1_4
    x48 = 2*x19
    x49 = x_1_1*x_3_4
    x50 = x_1_2*x_3_3
    x51 = x0*x_1_2
    x52 = x10*x_0_3
    x53 = x8*x_0_4
    x54 = x_0_1*x_2_4
    x55 = x_0_1*x_2_2
    x56 = x19*x_1_2
    x57 = x_1_1*x_2_2
    x58 = x57*x_3_4
    x59 = x26*x_2_3
    x60 = x_1_1*x_2_4
    x61 = x21*x_0_2
    x62 = x57*x_0_3
    x63 = 2*x_1_2
    x64 = x25*x_1_3
    x65 = x4*x_1_3
    x66 = x10*x_2_3
    x67 = x6*x_0_4
    x68 = x_0_1*x_2_3
    x69 = x15*x_0_2
    x70 = x30*x_0_1
    x71 = x37*x_0_1
    x72 = x_1_1*x_2_3
    x73 = x23*x_1_3
    x74 = x2*x_1_4
    x75 = x8*x_2_4
    x76 = x6*x_3_4
    x77 = x_0_2**2
    x78 = x77*x_4_4
    x79 = x_0_3**2
    x80 = x79*x_4_4
    x81 = x_0_4**2
    x82 = x81*x_3_3
    x83 = x_0_0*x_3_3
    x84 = x83*x_2_4
    x85 = x_0_1*x_0_2
    x86 = x_0_3*x_0_4
    x87 = x83*x_1_2
    x88 = x_0_0*x_3_4
    x89 = x_0_2*x_3_3
    x90 = x79*x_1_4
    x91 = x81*x_1_3
    x92 = x_0_0*x_1_2
    x93 = x_0_0*x_2_2
    x94 = x_0_0*x_2_4
    x95 = x_0_2*x_0_4
    x96 = x77*x_1_4
    x97 = x81*x_2_3
    x98 = x_0_1*x_0_4
    x99 = x_0_0*x_2_3
    x100 = 2*x_0_3
    x101 = x77*x_3_4
    x102 = x79*x_2_4
    x103 = x_0_0*x_1_1
    x104 = x_0_1**2
    x105 = x104*x_4_4
    x106 = x_0_1*x_0_3
    x107 = x103*x_3_4
    x108 = x_0_3*x_1_1
    x109 = x_0_0*x_1_4
    x110 = x_0_4*x_1_1
    x111 = x104*x_2_4
    x112 = x_0_0*x_1_3
    x113 = x_0_1*x_3_3
    x114 = x104*x_3_4
    x115 = 2*x54
    x116 = x_0_1*x_1_2
    x117 = x_0_2*x_1_3
    x118 = x_0_2*x_1_1
    x119 = 2*x68
    return np.array([x0*x6 - x1*x_1_1 + x10*x2 - x11*x_2_2 - x12*x14 - x14*x15 - x15*x16 - x3*x_1_1 + x4*x8 - x5*x_1_1 - x7*x_3_3 - x9*x_2_2 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4,
        2*x1*x_0_1 + 2*x12*x19 + 2*x12*x23 + 2*x13*x20 + 2*x13*x23 + 2*x15*x19 + 2*x15*x20 + 2*x18*x_0_2 + 2*x21*x22 - 2*x22*x34 + 2*x24*x25 - 2*x24*x26 - 4*x27*x28 - 2*x29*x_0_2 + 2*x3*x_0_1 - 2*x30*x31 - 2*x30*x35 - 2*x32*x33 - 2*x36*x37 - 2*x38*x_1_2 - 2*x39*x_1_3 - 2*x40*x_1_4 + 2*x5*x_0_1,
        2*x11*x_0_2 + 2*x12*x27 + 2*x12*x42 + 2*x13*x36 + 2*x13*x42 + 2*x15*x27 + 2*x15*x36 + 2*x18*x_0_1 - 2*x20*x49 - 2*x21*x32 - 2*x23*x49 - 2*x25*x50 - 2*x29*x_0_1 - 2*x30*x45 + 2*x38*x_1_1 + 2*x41*x_0_3 - 2*x43*x46 + 2*x44*x_0_4 - 2*x47*x48 - 2*x51*x_0_1 - 2*x52*x_2_3 - 2*x53*x_2_4 + 2*x9*x_0_2,
        2*x12*x31 + 2*x12*x35 + 2*x13*x54 + 2*x15*x35 + 2*x15*x54 - 2*x19*x60 - 2*x20*x63*x_1_4 + 2*x21*x55 - 2*x23*x60 - 2*x34*x55 + 2*x39*x_1_1 + 2*x41*x_0_2 + 2*x52*x_2_2 + 2*x56*x_1_4 + 2*x58*x_0_4 - 2*x59*x_1_2 - 2*x61*x_1_2 - 2*x62*x_4_4 - 2*x64*x_2_2 - 2*x65*x_0_1 - 2*x66*x_0_2 - 2*x67*x_3_4 + 2*x7*x_0_3,
        2*x12*x32 + 2*x12*x68 + 2*x13*x68 + 2*x15*x32 - 2*x19*x72 - 2*x20*x72 - 2*x22*x47 + 2*x24*x45 - 2*x31*x50 + 2*x40*x_1_1 + 2*x44*x_0_2 + 2*x53*x_2_2 + 2*x56*x_1_3 - 2*x57*x_0_4*x_3_3 + 2*x58*x_0_3 - 2*x63*x73 + 2*x67*x_3_3 + 2*x69*x_1_3 - 2*x70*x_1_2 - 2*x71*x_1_3 - 2*x74*x_0_1 - 2*x75*x_0_2 - 2*x76*x_0_3,
        x0*x77 - x1*x_0_0 + x2*x81 - 2*x20*x23 - x20*x48 - x23*x48 - x3*x_0_0 + x4*x79 - x5*x_0_0 - x78*x_3_3 - x80*x_2_2 - x82*x_2_2 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_2_2*x_3_4,
        2*x12*x86 - 2*x12*x88 - 2*x14*x86 + 2*x15*x86 - 2*x15*x88 + 2*x17*x85 + 2*x19*x36 + 2*x19*x42 + 2*x20*x27 + 2*x23*x27 - 2*x25*x89 + 2*x29*x_0_0 - 2*x38*x_0_1 + 2*x51*x_0_0 - 2*x59*x_0_3 - 2*x61*x_0_3 - 2*x70*x_0_4 + 2*x80*x_1_2 + 2*x82*x_1_2 + 2*x84*x_1_4 - 2*x87*x_4_4 - 2*x90*x_2_4 - 2*x91*x_2_3,
        -2*x13*x94 - 2*x15*x94 - 2*x16*x95 + 2*x19*x35 + 2*x19*x54 + 2*x20*x31 + 2*x20*x35 - 2*x21*x93 - 2*x22*x25 + 2*x22*x26 + 2*x23*x54 - 2*x32*x46 + 2*x33*x92 + 2*x34*x93 - 2*x39*x_0_1 - 2*x59*x_0_2 + 2*x65*x_0_0 + 2*x69*x_0_4 - 2*x71*x_0_4 + 2*x78*x_1_3 + 2*x91*x_2_2 - 2*x96*x_3_4 - 2*x97*x_1_2,
        -2*x100*x69 - 2*x101*x_1_3 - 2*x102*x_1_2 - 2*x12*x99 + 2*x12*x_0_2*x_0_3 - 2*x13*x99 + 2*x19*x32 + 2*x19*x68 + 2*x20*x68 - 2*x22*x27 - 2*x22*x36 + 2*x23*x32 + 2*x24*x98 - 2*x35*x89 - 2*x40*x_0_1 - 2*x70*x_0_2 + 2*x73*x_0_2 + 2*x74*x_0_0 + 2*x84*x_1_2 + 2*x90*x_2_2 + 2*x93*x_1_3*x_3_4 - 2*x93*x_1_4*x_3_3 + 2*x96*x_3_3,
        -x0*x103 + x0*x104 + x10*x79 - x100*x64 - x105*x_3_3 - 2*x106*x34 - x11*x_0_0 - 2*x27*x36 + x8*x81 - x80*x_1_1 - x82*x_1_1 - x9*x_0_0 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4,
        -2*x103*x33 + 2*x105*x_2_3 + 2*x107*x_2_4 + 2*x108*x46 - 2*x109*x12 - 2*x109*x13 - 2*x110*x19 - 2*x110*x20 - 2*x111*x_3_4 + 2*x12*x98 + 2*x13*x98 - 4*x15*x98 + 2*x19*x45 + 2*x20*x45 + 2*x21*x92 + 2*x25*x32 - 2*x26*x32 - 2*x52*x_0_2 - 2*x61*x_0_1 + 2*x64*x_0_2 + 2*x66*x_0_0 - 2*x91*x_1_2 + 2*x97*x_1_1,
        2*x102*x_1_1 - 2*x103*x30 + 2*x106*x13 + 2*x106*x15 - 2*x106*x16 + 2*x107*x_2_3 - 2*x108*x19 - 2*x108*x23 + 2*x111*x_3_3 - 2*x112*x13 - 2*x112*x15 - 2*x113*x31 - 2*x113*x35 - 2*x114*x_2_3 + 2*x19*x_0_1*x_1_3 + 2*x31*x_0_3*x_1_3 + 2*x32*x36 + 2*x43*x95 - 2*x53*x_0_2 + 2*x73*x_0_1 + 2*x75*x_0_0 + 2*x87*x_1_4 - 2*x90*x_1_2,
        x10*x77 - x10*x93 - x103*x4 + x104*x4 - x105*x_2_2 - x115*x31 - x115*x35 - x25*x63*x_0_2 - x57*x81 + x6*x81 - x7*x_0_0 - x78*x_1_1 + x_0_0*x_1_1*x_2_2*x_4_4 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_2*x_0_4*x_1_1*x_2_4,
        2*x101*x_1_1 + 2*x103*x28 - 2*x103*x37 - 2*x111*x_2_3 + 2*x114*x_2_2 + 2*x116*x20 + 2*x116*x23 + 2*x117*x35 - 2*x118*x20 - 2*x118*x23 + 2*x12*x85 - 2*x12*x92 - 2*x15*x92 - 2*x22*x45 + 2*x31*x32 - 2*x36*x55 + 2*x47*x93 - 4*x56*x_0_1 + 2*x62*x_0_4 - 2*x67*x_0_3 + 2*x69*x_0_1 + 2*x76*x_0_0 - 2*x96*x_1_3,
        -x103*x2 + x104*x2 - x104*x24 - x117*x119 - 2*x117*x32 - x119*x32 - x43*x77 - x57*x79 + x6*x79 - x6*x83 + x77*x8 - x8*x93 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_5 for n=5."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    x0 = x_3_4**2
    x1 = x_2_3**2
    x2 = x_2_4**2
    x3 = x0*x_2_2 + x1*x_4_4 + x2*x_3_3 - x_2_2*x_3_3*x_4_4 - 2*x_2_3*x_2_4*x_3_4
    x4 = -x3
    x5 = x_3_3*x_4_4
    x6 = x_2_4*x_3_4
    x7 = x_1_4*x_3_4
    x8 = -x0*x_1_2 + x5*x_1_2 + x6*x_1_3 + x7*x_2_3 - x_1_3*x_2_3*x_4_4 - x_1_4*x_2_4*x_3_3
    x9 = -2*x8
    x10 = x_2_3*x_4_4
    x11 = x_1_3*x_2_2
    x12 = x_1_4*x_2_4
    x13 = x10*x_1_2 - x11*x_4_4 - x12*x_2_3 + x2*x_1_3 - x6*x_1_2 + x7*x_2_2
    x14 = 2*x13
    x15 = x_2_3*x_3_4
    x16 = x_1_3*x_2_3
    x17 = x_2_2*x_3_3
    x18 = -x1*x_1_4 + x15*x_1_2 + x16*x_2_4 + x17*x_1_4 - x_1_2*x_2_4*x_3_3 - x_1_3*x_2_2*x_3_4
    x19 = -2*x18
    x20 = x_1_3**2
    x21 = x_1_4**2
    x22 = x0*x_1_1 + x20*x_4_4 + x21*x_3_3 - x_1_1*x_3_3*x_4_4 - 2*x_1_3*x_1_4*x_3_4
    x23 = -x22
    x24 = x10*x_1_1 + x12*x_1_3 - x21*x_2_3 + x7*x_1_2 - x_1_1*x_2_4*x_3_4 - x_1_2*x_1_3*x_4_4
    x25 = -2*x24
    x26 = x_1_2*x_3_3
    x27 = x_1_1*x_2_4
    x28 = x_1_2*x_1_3
    x29 = x15*x_1_1 - x16*x_1_4 + x20*x_2_4 + x26*x_1_4 - x27*x_3_3 - x28*x_3_4
    x30 = 2*x29
    x31 = x_1_2**2
    x32 = x2*x_1_1 + x21*x_2_2 + x31*x_4_4 - x_1_1*x_2_2*x_4_4 - 2*x_1_2*x_1_4*x_2_4
    x33 = -x32
    x34 = x_1_1*x_2_2
    x35 = x_1_4*x_2_3
    x36 = x28*x_2_4 - x31*x_3_4 + x34*x_3_4 + x35*x_1_2 - x_1_1*x_2_3*x_2_4 - x_1_3*x_1_4*x_2_2
    x37 = -2*x36
    x38 = x1*x_1_1 + x20*x_2_2 + x31*x_3_3 - x_1_1*x_2_2*x_3_3 - 2*x_1_2*x_1_3*x_2_3
    x39 = -x38
    x40 = 2*x8
    x41 = -2*x13
    x42 = 2*x18
    x43 = x_0_4*x_2_4
    x44 = -x0*x_0_2 - x10*x_0_3 + x15*x_0_4 - x43*x_3_3 + x5*x_0_2 + x6*x_0_3
    x45 = 2*x44
    x46 = x_0_4*x_3_4
    x47 = x10*x_0_2 + x2*x_0_3 + x46*x_2_2 - x_0_2*x_2_4*x_3_4 - x_0_3*x_2_2*x_4_4 - x_0_4*x_2_3*x_2_4
    x48 = -2*x47
    x49 = x_0_3*x_2_4
    x50 = x_0_2*x_3_3
    x51 = x_0_3*x_2_2
    x52 = -x1*x_0_4 + x15*x_0_2 + x17*x_0_4 + x49*x_2_3 - x50*x_2_4 - x51*x_3_4
    x53 = 2*x52
    x54 = -x0*x_0_1 + x46*x_1_3 + x5*x_0_1 + x7*x_0_3 - x_0_3*x_1_3*x_4_4 - x_0_4*x_1_4*x_3_3
    x55 = -2*x54
    x56 = x6*x_0_1
    x57 = x35*x_0_4
    x58 = x10*x_0_1
    x59 = x12*x_0_3
    x60 = x46*x_1_2
    x61 = x_0_3*x_1_2
    x62 = x61*x_4_4
    x63 = x59 + x60 - x62
    x64 = x7*x_0_2
    x65 = x43*x_1_3
    x66 = x_1_3*x_4_4
    x67 = x66*x_0_2
    x68 = x64 + x65 - x67
    x69 = -4*x56 - 4*x57 + 4*x58 + 2*x63 + 2*x68
    x70 = x15*x_0_1
    x71 = x49*x_1_3
    x72 = x_0_1*x_3_3
    x73 = x72*x_2_4
    x74 = x61*x_3_4
    x75 = x16*x_0_4
    x76 = x26*x_0_4
    x77 = x74 + x75 - x76
    x78 = x_0_2*x_1_3
    x79 = x78*x_3_4
    x80 = x35*x_0_3
    x81 = x50*x_1_4
    x82 = x79 + x80 - x81
    x83 = -4*x70 - 4*x71 + 4*x73 + 2*x77 + 2*x82
    x84 = x_0_1*x_2_2
    x85 = x12*x_0_2 - x2*x_0_1 + x43*x_1_2 + x84*x_4_4 - x_0_2*x_1_2*x_4_4 - x_0_4*x_1_4*x_2_2
    x86 = -2*x85
    x87 = x_0_1*x_2_4
    x88 = x87*x_2_3
    x89 = x_1_2*x_3_4
    x90 = x89*x_0_2
    x91 = x84*x_3_4
    x92 = x78*x_2_4
    x93 = x_0_4*x_2_3
    x94 = x93*x_1_2
    x95 = x11*x_0_4
    x96 = x92 + x94 - x95
    x97 = x35*x_0_2
    x98 = x49*x_1_2
    x99 = x51*x_1_4
    x100 = x97 + x98 - x99
    x101 = 2*x100 - 4*x88 - 4*x90 + 4*x91 + 2*x96
    x102 = -x1*x_0_1 + x16*x_0_2 + x17*x_0_1 + x61*x_2_3 - x_0_2*x_1_2*x_3_3 - x_0_3*x_1_3*x_2_2
    x103 = -2*x102
    x104 = 2*x24
    x105 = -2*x29
    x106 = -2*x44
    x107 = 2*x54
    x108 = x56 + x57 - x58
    x109 = 2*x108 + 2*x63 - 4*x64 - 4*x65 + 4*x67
    x110 = x70 + x71 - x73
    x111 = 2*x110 + 2*x77 - 4*x79 - 4*x80 + 4*x81
    x112 = x21*x_0_3 + x46*x_1_1 + x66*x_0_1 - x_0_1*x_1_4*x_3_4 - x_0_3*x_1_1*x_4_4 - x_0_4*x_1_3*x_1_4
    x113 = -2*x112
    x114 = x_0_1*x_1_3
    x115 = x_0_3*x_1_1
    x116 = x114*x_3_4 - x115*x_3_4 - x20*x_0_4 - x72*x_1_4 + x_0_3*x_1_3*x_1_4 + x_0_4*x_1_1*x_3_3
    x117 = 2*x116
    x118 = x_1_2*x_4_4
    x119 = x_0_2*x_1_1
    x120 = x_0_4*x_1_4
    x121 = x118*x_0_1 - x119*x_4_4 - x12*x_0_1 - x120*x_1_2 + x21*x_0_2 + x27*x_0_4
    x122 = 2*x121
    x123 = x89*x_0_1
    x124 = x78*x_1_4
    x125 = x119*x_3_4
    x126 = x35*x_0_1
    x127 = x28*x_0_4
    x128 = x93*x_1_1
    x129 = x126 + x127 - x128
    x130 = x114*x_2_4
    x131 = x61*x_1_4
    x132 = x27*x_0_3
    x133 = x130 + x131 - x132
    x134 = -4*x123 - 4*x124 + 4*x125 + 2*x129 + 2*x133
    x135 = x115*x_2_3 - x16*x_0_1 + x20*x_0_2 + x26*x_0_1 - x28*x_0_3 - x50*x_1_1
    x136 = 2*x135
    x137 = 2*x36
    x138 = 2*x47
    x139 = 2*x108 - 4*x59 - 4*x60 + 4*x62 + 2*x68
    x140 = 2*x85
    x141 = x88 + x90 - x91
    x142 = 2*x141 + 2*x96 - 4*x97 - 4*x98 + 4*x99
    x143 = 2*x112
    x144 = -2*x121
    x145 = x123 + x124 - x125
    x146 = 2*x129 - 4*x130 - 4*x131 + 4*x132 + 2*x145
    x147 = x_0_2*x_1_4
    x148 = x147*x_1_2 - x27*x_0_2 - x31*x_0_4 + x34*x_0_4 - x84*x_1_4 + x87*x_1_2
    x149 = 2*x148
    x150 = x_0_1*x_2_3
    x151 = x150*x_1_2 + x28*x_0_2 - x31*x_0_3 + x34*x_0_3 - x_0_1*x_1_3*x_2_2 - x_0_2*x_1_1*x_2_3
    x152 = -2*x151
    x153 = -2*x52
    x154 = 2*x110 - 4*x74 - 4*x75 + 4*x76 + 2*x82
    x155 = 2*x100 + 2*x141 - 4*x92 - 4*x94 + 4*x95
    x156 = 2*x102
    x157 = -2*x116
    x158 = -4*x126 - 4*x127 + 4*x128 + 2*x133 + 2*x145
    x159 = -2*x135
    x160 = -2*x148
    x161 = 2*x151
    x162 = x_0_3**2
    x163 = x_0_4**2
    x164 = x0*x_0_0 + x162*x_4_4 + x163*x_3_3 - x_0_0*x_3_3*x_4_4 - 2*x_0_3*x_0_4*x_3_4
    x165 = -x164
    x166 = x10*x_0_0 - x163*x_2_3 + x43*x_0_3 + x46*x_0_2 - x_0_0*x_2_4*x_3_4 - x_0_2*x_0_3*x_4_4
    x167 = -2*x166
    x168 = x_0_0*x_2_4
    x169 = x15*x_0_0 + x162*x_2_4 - x168*x_3_3 + x50*x_0_4 - x93*x_0_3 - x_0_2*x_0_3*x_3_4
    x170 = 2*x169
    x171 = x_0_2**2
    x172 = x163*x_2_2 + x171*x_4_4 + x2*x_0_0 - x_0_0*x_2_2*x_4_4 - 2*x_0_2*x_0_4*x_2_4
    x173 = -x172
    x174 = -x171*x_3_4 + x49*x_0_2 + x93*x_0_2 + x_0_0*x_2_2*x_3_4 - x_0_0*x_2_3*x_2_4 - x_0_3*x_0_4*x_2_2
    x175 = -2*x174
    x176 = x1*x_0_0 + x162*x_2_2 + x171*x_3_3 - x_0_0*x_2_2*x_3_3 - 2*x_0_2*x_0_3*x_2_3
    x177 = -x176
    x178 = 2*x166
    x179 = -2*x169
    x180 = x_0_1*x_0_3
    x181 = x120*x_0_3 - x163*x_1_3 - x180*x_4_4 + x46*x_0_1 + x66*x_0_0 - x7*x_0_0
    x182 = 2*x181
    x183 = x_0_0*x_3_4
    x184 = x162*x_1_4 + x183*x_1_3 + x72*x_0_4 - x_0_0*x_1_4*x_3_3 - x_0_1*x_0_3*x_3_4 - x_0_3*x_0_4*x_1_3
    x185 = -2*x184
    x186 = x118*x_0_0 + x120*x_0_2 - x163*x_1_2 + x43*x_0_1 - x_0_0*x_1_4*x_2_4 - x_0_1*x_0_2*x_4_4
    x187 = -2*x186
    x188 = x_0_1*x_0_2*x_3_4
    x189 = x61*x_0_4
    x190 = x89*x_0_0
    x191 = x93*x_0_1
    x192 = x147*x_0_3
    x193 = x35*x_0_0
    x194 = x191 + x192 - x193
    x195 = x49*x_0_1
    x196 = x78*x_0_4
    x197 = x168*x_1_3
    x198 = x195 + x196 - x197
    x199 = -4*x188 - 4*x189 + 4*x190 + 2*x194 + 2*x198
    x200 = x150*x_0_3 - x162*x_1_2 + x26*x_0_0 + x78*x_0_3 - x_0_0*x_1_3*x_2_3 - x_0_1*x_0_2*x_3_3
    x201 = -2*x200
    x202 = 2*x174
    x203 = -2*x181
    x204 = 2*x186
    x205 = x188 + x189 - x190
    x206 = 2*x194 - 4*x195 - 4*x196 + 4*x197 + 2*x205
    x207 = x168*x_1_2 + x171*x_1_4 + x84*x_0_4 - x_0_0*x_1_4*x_2_2 - x_0_1*x_0_2*x_2_4 - x_0_2*x_0_4*x_1_2
    x208 = -2*x207
    x209 = x_0_0*x_2_3
    x210 = -x11*x_0_0 - x150*x_0_2 + x171*x_1_3 + x209*x_1_2 + x51*x_0_1 - x61*x_0_2
    x211 = 2*x210
    x212 = 2*x184
    x213 = -4*x191 - 4*x192 + 4*x193 + 2*x198 + 2*x205
    x214 = 2*x200
    x215 = 2*x207
    x216 = -2*x210
    x217 = x_0_1**2
    x218 = x163*x_1_1 + x21*x_0_0 + x217*x_4_4 - x_0_0*x_1_1*x_4_4 - 2*x_0_1*x_0_4*x_1_4
    x219 = -x218
    x220 = x114*x_0_4 + x180*x_1_4 + x183*x_1_1 - x217*x_3_4 - x_0_0*x_1_3*x_1_4 - x_0_3*x_0_4*x_1_1
    x221 = -2*x220
    x222 = x162*x_1_1 + x20*x_0_0 + x217*x_3_3 - x_0_0*x_1_1*x_3_3 - 2*x_0_1*x_0_3*x_1_3
    x223 = -x222
    x224 = 2*x220
    x225 = -x119*x_0_4 + x147*x_0_1 - x217*x_2_4 + x27*x_0_0 - x_0_0*x_1_2*x_1_4 + x_0_1*x_0_4*x_1_2
    x226 = 2*x225
    x227 = x209*x_1_1 - x217*x_2_3 + x61*x_0_1 + x78*x_0_1 - x_0_0*x_1_2*x_1_3 - x_0_2*x_0_3*x_1_1
    x228 = -2*x227
    x229 = -2*x225
    x230 = 2*x227
    x231 = x171*x_1_1 + x217*x_2_2 + x31*x_0_0 - x_0_0*x_1_1*x_2_2 - 2*x_0_1*x_0_2*x_1_2
    x232 = -x231
    hessian = np.empty((15, 15))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = x4
    hessian[0, 6] = x9
    hessian[0, 7] = x14
    hessian[0, 8] = x19
    hessian[0, 9] = x23
    hessian[0, 10] = x25
    hessian[0, 11] = x30
    hessian[0, 12] = x33
    hessian[0, 13] = x37
    hessian[0, 14] = x39
    hessian[1, 0] = 0
    hessian[1, 1] = 2*x3
    hessian[1, 2] = x40
    hessian[1, 3] = x41
    hessian[1, 4] = x42
    hessian[1, 5] = 0
    hessian[1, 6] = x45
    hessian[1, 7] = x48
    hessian[1, 8] = x53
    hessian[1, 9] = x55
    hessian[1, 10] = x69
    hessian[1, 11] = x83
    hessian[1, 12] = x86
    hessian[1, 13] = x101
    hessian[1, 14] = x103
    hessian[2, 0] = 0
    hessian[2, 1] = x40
    hessian[2, 2] = 2*x22
    hessian[2, 3] = x104
    hessian[2, 4] = x105
    hessian[2, 5] = x106
    hessian[2, 6] = x107
    hessian[2, 7] = x109
    hessian[2, 8] = x111
    hessian[2, 9] = 0
    hessian[2, 10] = x113
    hessian[2, 11] = x117
    hessian[2, 12] = x122
    hessian[2, 13] = x134
    hessian[2, 14] = x136
    hessian[3, 0] = 0
    hessian[3, 1] = x41
    hessian[3, 2] = x104
    hessian[3, 3] = 2*x32
    hessian[3, 4] = x137
    hessian[3, 5] = x138
    hessian[3, 6] = x139
    hessian[3, 7] = x140
    hessian[3, 8] = x142
    hessian[3, 9] = x143
    hessian[3, 10] = x144
    hessian[3, 11] = x146
    hessian[3, 12] = 0
    hessian[3, 13] = x149
    hessian[3, 14] = x152
    hessian[4, 0] = 0
    hessian[4, 1] = x42
    hessian[4, 2] = x105
    hessian[4, 3] = x137
    hessian[4, 4] = 2*x38
    hessian[4, 5] = x153
    hessian[4, 6] = x154
    hessian[4, 7] = x155
    hessian[4, 8] = x156
    hessian[4, 9] = x157
    hessian[4, 10] = x158
    hessian[4, 11] = x159
    hessian[4, 12] = x160
    hessian[4, 13] = x161
    hessian[4, 14] = 0
    hessian[5, 0] = x4
    hessian[5, 1] = 0
    hessian[5, 2] = x106
    hessian[5, 3] = x138
    hessian[5, 4] = x153
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = x165
    hessian[5, 10] = x167
    hessian[5, 11] = x170
    hessian[5, 12] = x173
    hessian[5, 13] = x175
    hessian[5, 14] = x177
    hessian[6, 0] = x9
    hessian[6, 1] = x45
    hessian[6, 2] = x107
    hessian[6, 3] = x139
    hessian[6, 4] = x154
    hessian[6, 5] = 0
    hessian[6, 6] = 2*x164
    hessian[6, 7] = x178
    hessian[6, 8] = x179
    hessian[6, 9] = 0
    hessian[6, 10] = x182
    hessian[6, 11] = x185
    hessian[6, 12] = x187
    hessian[6, 13] = x199
    hessian[6, 14] = x201
    hessian[7, 0] = x14
    hessian[7, 1] = x48
    hessian[7, 2] = x109
    hessian[7, 3] = x140
    hessian[7, 4] = x155
    hessian[7, 5] = 0
    hessian[7, 6] = x178
    hessian[7, 7] = 2*x172
    hessian[7, 8] = x202
    hessian[7, 9] = x203
    hessian[7, 10] = x204
    hessian[7, 11] = x206
    hessian[7, 12] = 0
    hessian[7, 13] = x208
    hessian[7, 14] = x211
    hessian[8, 0] = x19
    hessian[8, 1] = x53
    hessian[8, 2] = x111
    hessian[8, 3] = x142
    hessian[8, 4] = x156
    hessian[8, 5] = 0
    hessian[8, 6] = x179
    hessian[8, 7] = x202
    hessian[8, 8] = 2*x176
    hessian[8, 9] = x212
    hessian[8, 10] = x213
    hessian[8, 11] = x214
    hessian[8, 12] = x215
    hessian[8, 13] = x216
    hessian[8, 14] = 0
    hessian[9, 0] = x23
    hessian[9, 1] = x55
    hessian[9, 2] = 0
    hessian[9, 3] = x143
    hessian[9, 4] = x157
    hessian[9, 5] = x165
    hessian[9, 6] = 0
    hessian[9, 7] = x203
    hessian[9, 8] = x212
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[9, 12] = x219
    hessian[9, 13] = x221
    hessian[9, 14] = x223
    hessian[10, 0] = x25
    hessian[10, 1] = x69
    hessian[10, 2] = x113
    hessian[10, 3] = x144
    hessian[10, 4] = x158
    hessian[10, 5] = x167
    hessian[10, 6] = x182
    hessian[10, 7] = x204
    hessian[10, 8] = x213
    hessian[10, 9] = 0
    hessian[10, 10] = 2*x218
    hessian[10, 11] = x224
    hessian[10, 12] = 0
    hessian[10, 13] = x226
    hessian[10, 14] = x228
    hessian[11, 0] = x30
    hessian[11, 1] = x83
    hessian[11, 2] = x117
    hessian[11, 3] = x146
    hessian[11, 4] = x159
    hessian[11, 5] = x170
    hessian[11, 6] = x185
    hessian[11, 7] = x206
    hessian[11, 8] = x214
    hessian[11, 9] = 0
    hessian[11, 10] = x224
    hessian[11, 11] = 2*x222
    hessian[11, 12] = x229
    hessian[11, 13] = x230
    hessian[11, 14] = 0
    hessian[12, 0] = x33
    hessian[12, 1] = x86
    hessian[12, 2] = x122
    hessian[12, 3] = 0
    hessian[12, 4] = x160
    hessian[12, 5] = x173
    hessian[12, 6] = x187
    hessian[12, 7] = 0
    hessian[12, 8] = x215
    hessian[12, 9] = x219
    hessian[12, 10] = 0
    hessian[12, 11] = x229
    hessian[12, 12] = 0
    hessian[12, 13] = 0
    hessian[12, 14] = x232
    hessian[13, 0] = x37
    hessian[13, 1] = x101
    hessian[13, 2] = x134
    hessian[13, 3] = x149
    hessian[13, 4] = x161
    hessian[13, 5] = x175
    hessian[13, 6] = x199
    hessian[13, 7] = x208
    hessian[13, 8] = x216
    hessian[13, 9] = x221
    hessian[13, 10] = x226
    hessian[13, 11] = x230
    hessian[13, 12] = 0
    hessian[13, 13] = 2*x231
    hessian[13, 14] = 0
    hessian[14, 0] = x39
    hessian[14, 1] = x103
    hessian[14, 2] = x136
    hessian[14, 3] = x152
    hessian[14, 4] = 0
    hessian[14, 5] = x177
    hessian[14, 6] = x201
    hessian[14, 7] = x211
    hessian[14, 8] = 0
    hessian[14, 9] = x223
    hessian[14, 10] = x228
    hessian[14, 11] = 0
    hessian[14, 12] = x232
    hessian[14, 13] = 0
    hessian[14, 14] = 0
    return hessian


