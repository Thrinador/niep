# -*- coding: utf-8 -*-
# Symbolic Functions for N = 5 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import math
import numpy as np
import numba


# --------------------------------------------------------------------------
# Value Function (S1_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S1_n5(x_vec):
    """Calculates S_1 for n=5 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        float: The value of S_1.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # S_k CSE Defs

    # Final S_k Calculation
    result = x_0_0 + x_1_1 + x_2_2 + x_3_3 + x_4_4
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S1_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S1_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=5.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        numpy.ndarray: The gradient vector of S_1.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # Jacobian CSE Defs

    # Final Gradient Calculation
    gradient = np.array([
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S2_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S2_n5(x_vec):
    """Calculates S_2 for n=5 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        float: The value of S_2.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # S_k CSE Defs

    # Final S_k Calculation
    result = x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 + x_0_0*x_4_4 - x_0_1**2 - x_0_2**2 - x_0_3**2 - x_0_4**2 + x_1_1*x_2_2 + x_1_1*x_3_3 + x_1_1*x_4_4 - x_1_2**2 - x_1_3**2 - x_1_4**2 + x_2_2*x_3_3 + x_2_2*x_4_4 - x_2_3**2 - x_2_4**2 + x_3_3*x_4_4 - x_3_4**2
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S2_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S2_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=5.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        numpy.ndarray: The gradient vector of S_2.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # Jacobian CSE Defs
    x0 = x_2_2 + x_3_3 + x_4_4
    x1 = x_0_0 + x_1_1 + x_4_4
    # Final Gradient Calculation
    gradient = np.array([
        x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        -2*x_0_4,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        -2*x_1_4,
        x1 + x_3_3,
        -2*x_2_3,
        -2*x_2_4,
        x1 + x_2_2,
        -2*x_3_4,
        x_0_0 + x_1_1 + x_2_2 + x_3_3
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S3_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S3_n5(x_vec):
    """Calculates S_3 for n=5 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        float: The value of S_3.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # S_k CSE Defs
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_1_4**2
    x3 = x_2_3**2
    x4 = x_2_4**2
    x5 = x_3_4**2
    x6 = x_0_1**2
    x7 = x_0_2**2
    x8 = x_0_3**2
    x9 = x_0_4**2
    # Final S_k Calculation
    result = -x0*x_0_0 - x0*x_3_3 - x0*x_4_4 - x1*x_0_0 - x1*x_2_2 - x1*x_4_4 - x2*x_0_0 - x2*x_2_2 - x2*x_3_3 - x3*x_0_0 - x3*x_1_1 - x3*x_4_4 - x4*x_0_0 - x4*x_1_1 - x4*x_3_3 - x5*x_0_0 - x5*x_1_1 - x5*x_2_2 - x6*x_2_2 - x6*x_3_3 - x6*x_4_4 - x7*x_1_1 - x7*x_3_3 - x7*x_4_4 - x8*x_1_1 - x8*x_2_2 - x8*x_4_4 - x9*x_1_1 - x9*x_2_2 - x9*x_3_3 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_1_1*x_4_4 + x_0_0*x_2_2*x_3_3 + x_0_0*x_2_2*x_4_4 + x_0_0*x_3_3*x_4_4 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_1*x_0_4*x_1_4 + 2*x_0_2*x_0_3*x_2_3 + 2*x_0_2*x_0_4*x_2_4 + 2*x_0_3*x_0_4*x_3_4 + x_1_1*x_2_2*x_3_3 + x_1_1*x_2_2*x_4_4 + x_1_1*x_3_3*x_4_4 + 2*x_1_2*x_1_3*x_2_3 + 2*x_1_2*x_1_4*x_2_4 + 2*x_1_3*x_1_4*x_3_4 + x_2_2*x_3_3*x_4_4 + 2*x_2_3*x_2_4*x_3_4
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S3_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S3_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=5.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        numpy.ndarray: The gradient vector of S_3.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # Jacobian CSE Defs
    x0 = -x_2_3**2
    x1 = -x_2_4**2
    x2 = -x_3_4**2
    x3 = x_2_2*x_3_3
    x4 = x_2_2*x_4_4
    x5 = x_3_3*x_4_4
    x6 = x0 + x1 + x2 + x3 + x4 + x5
    x7 = -x_1_3**2
    x8 = -x_1_4**2
    x9 = x_1_1*x_3_3
    x10 = x_1_1*x_4_4
    x11 = x10 + x7 + x8 + x9
    x12 = x_1_1*x_2_2 - x_1_2**2
    x13 = -x_0_3**2
    x14 = -x_0_4**2
    x15 = x_0_0*x_3_3
    x16 = x_0_0*x_4_4
    x17 = x13 + x14 + x15 + x16
    x18 = x_0_0*x_2_2 - x_0_2**2
    x19 = x_0_0*x_1_1 - x_0_1**2
    x20 = x12 + x18 + x19
    # Final Gradient Calculation
    gradient = np.array([
        x11 + x12 + x6,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 - x_0_1*x_4_4 + x_0_2*x_1_2 + x_0_3*x_1_3 + x_0_4*x_1_4),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 - x_0_2*x_4_4 + x_0_3*x_2_3 + x_0_4*x_2_4),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2 - x_0_3*x_4_4 + x_0_4*x_3_4),
        2*(x_0_1*x_1_4 + x_0_2*x_2_4 + x_0_3*x_3_4 - x_0_4*x_1_1 - x_0_4*x_2_2 - x_0_4*x_3_3),
        x17 + x18 + x6,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 - x_1_2*x_4_4 + x_1_3*x_2_3 + x_1_4*x_2_4),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2 - x_1_3*x_4_4 + x_1_4*x_3_4),
        2*(-x_0_0*x_1_4 + x_0_1*x_0_4 + x_1_2*x_2_4 + x_1_3*x_3_4 - x_1_4*x_2_2 - x_1_4*x_3_3),
        x11 + x17 + x19 + x2 + x5,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3 - x_2_3*x_4_4 + x_2_4*x_3_4),
        2*(-x_0_0*x_2_4 + x_0_2*x_0_4 - x_1_1*x_2_4 + x_1_2*x_1_4 + x_2_3*x_3_4 - x_2_4*x_3_3),
        x1 + x10 + x14 + x16 + x20 + x4 + x8,
        2*(-x_0_0*x_3_4 + x_0_3*x_0_4 - x_1_1*x_3_4 + x_1_3*x_1_4 - x_2_2*x_3_4 + x_2_3*x_2_4),
        x0 + x13 + x15 + x20 + x3 + x7 + x9
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S4_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S4_n5(x_vec):
    """Calculates S_4 for n=5 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        float: The value of S_4.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # S_k CSE Defs
    x0 = x_2_3**2
    x1 = x_0_0*x_1_1
    x2 = x_2_4**2
    x3 = x_3_4**2
    x4 = x_1_2**2
    x5 = x_0_0*x_3_3
    x6 = x_0_0*x_4_4
    x7 = x_1_3**2
    x8 = x_0_0*x_2_2
    x9 = x_1_4**2
    x10 = x_0_1**2
    x11 = x_2_2*x_3_3
    x12 = x_2_2*x_4_4
    x13 = x_3_3*x_4_4
    x14 = x_0_2**2
    x15 = x_1_1*x_3_3
    x16 = x_1_1*x_4_4
    x17 = x_0_3**2
    x18 = x_1_1*x_2_2
    x19 = x_0_4**2
    x20 = 2*x_0_1
    x21 = x20*x_0_2
    x22 = x_1_3*x_2_3
    x23 = x_1_4*x_2_4
    x24 = x20*x_0_3
    x25 = x_1_2*x_2_3
    x26 = x_1_4*x_3_4
    x27 = x20*x_0_4
    x28 = x_1_2*x_2_4
    x29 = x_1_3*x_3_4
    x30 = 2*x_0_2
    x31 = x30*x_0_3
    x32 = x30*x_0_4
    x33 = x_0_3*x_0_4
    # Final S_k Calculation
    result = -x0*x1 + x0*x10 - x0*x16 + x0*x19 - x0*x6 + x0*x9 - x1*x2 - x1*x3 - x10*x11 - x10*x12 - x10*x13 + x10*x2 + x10*x3 - x11*x19 - x11*x9 - x12*x17 - x12*x7 - x13*x14 - x13*x4 - x14*x15 - x14*x16 + x14*x3 + x14*x7 + x14*x9 - x15*x19 - x15*x2 - x16*x17 - x17*x18 + x17*x2 + x17*x4 + x17*x9 - x18*x19 - x18*x3 + x19*x4 + x19*x7 - x2*x5 + x2*x7 - x21*x22 - x21*x23 - 2*x22*x23 - x24*x25 - x24*x26 - 2*x25*x26 - x27*x28 - x27*x29 - 2*x28*x29 + x3*x4 - x3*x8 - x31*x_1_2*x_1_3 - x31*x_2_4*x_3_4 - x32*x_1_2*x_1_4 - x32*x_2_3*x_3_4 - 2*x33*x_1_3*x_1_4 - 2*x33*x_2_3*x_2_4 - x4*x5 - x4*x6 - x5*x9 - x6*x7 - x7*x8 - x8*x9 + x_0_0*x_1_1*x_2_2*x_3_3 + x_0_0*x_1_1*x_2_2*x_4_4 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_2*x_0_3*x_1_1*x_2_3 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_1_1*x_2_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4 + 2*x_0_3*x_0_4*x_2_2*x_3_4 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S4_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S4_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=5.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        numpy.ndarray: The gradient vector of S_4.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # Jacobian CSE Defs
    x0 = x_3_4**2
    x1 = x_2_4**2
    x2 = x_2_3**2
    x3 = x0*x_2_2 + x1*x_3_3 + x2*x_4_4 - x_2_2*x_3_3*x_4_4 - 2*x_2_3*x_2_4*x_3_4
    x4 = x_1_4**2
    x5 = x_1_3**2
    x6 = x0*x_1_1 + x4*x_3_3 + x5*x_4_4 - x_1_1*x_3_3*x_4_4 - 2*x_1_3*x_1_4*x_3_4
    x7 = x_1_2**2
    x8 = x1*x_1_1 + x4*x_2_2 + x7*x_4_4 - x_1_1*x_2_2*x_4_4 - 2*x_1_2*x_1_4*x_2_4
    x9 = x2*x_1_1 + x5*x_2_2 + x7*x_3_3 - x_1_1*x_2_2*x_3_3 - 2*x_1_2*x_1_3*x_2_3
    x10 = x_0_1*x_2_2
    x11 = x_3_3*x_4_4
    x12 = x_1_3*x_2_3
    x13 = x_1_4*x_2_4
    x14 = x_0_3*x_2_3
    x15 = x_0_3*x_3_4
    x16 = x_0_4*x_2_4
    x17 = x_0_4*x_3_4
    x18 = x_0_1*x_1_2
    x19 = x_0_2*x_1_1
    x20 = x_0_3*x_1_3
    x21 = x_0_4*x_1_4
    x22 = x_0_1*x_1_4
    x23 = x_0_2*x_1_2
    x24 = x_0_2*x_2_4
    x25 = x_1_1*x_2_2
    x26 = x_0_3*x_4_4
    x27 = x_0_1*x_1_3
    x28 = x_0_2*x_2_3
    x29 = x_0_4*x_3_3
    x30 = x_0_4**2
    x31 = x_0_3**2
    x32 = x0*x_0_0 + x30*x_3_3 + x31*x_4_4 - x_0_0*x_3_3*x_4_4 - 2*x_0_3*x_0_4*x_3_4
    x33 = x_0_2**2
    x34 = x1*x_0_0 + x30*x_2_2 + x33*x_4_4 - x_0_0*x_2_2*x_4_4 - 2*x_0_2*x_0_4*x_2_4
    x35 = x2*x_0_0 + x31*x_2_2 + x33*x_3_3 - x_0_0*x_2_2*x_3_3 - 2*x_0_2*x_0_3*x_2_3
    x36 = x_0_0*x_1_2
    x37 = x_2_4*x_3_4
    x38 = x_1_4*x_3_4
    x39 = x_1_2*x_2_3
    x40 = x_0_0*x_2_2
    x41 = x_1_3*x_4_4
    x42 = x_1_3*x_3_4
    x43 = x_1_4*x_3_3
    x44 = x_0_1**2
    x45 = x30*x_1_1 + x4*x_0_0 + x44*x_4_4 - x_0_0*x_1_1*x_4_4 - 2*x_0_1*x_0_4*x_1_4
    x46 = x31*x_1_1 + x44*x_3_3 + x5*x_0_0 - x_0_0*x_1_1*x_3_3 - 2*x_0_1*x_0_3*x_1_3
    x47 = x_0_0*x_1_1
    x48 = x_2_3*x_4_4
    x49 = x_2_4*x_3_3
    x50 = x33*x_1_1 + x44*x_2_2 + x7*x_0_0 - x_0_0*x_1_1*x_2_2 - 2*x_0_1*x_0_2*x_1_2
    # Final Gradient Calculation
    gradient = np.array([
        -x3 - x6 - x8 - x9,
        2*x0*x_0_1 + 2*x1*x_0_1 - 2*x10*x_3_3 - 2*x10*x_4_4 - 2*x11*x_0_1 - 2*x12*x_0_2 - 2*x13*x_0_2 - 2*x14*x_1_2 - 2*x15*x_1_4 - 2*x16*x_1_2 - 2*x17*x_1_3 + 2*x2*x_0_1 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_2*x_1_2*x_4_4 + 2*x_0_3*x_1_3*x_2_2 + 2*x_0_3*x_1_3*x_4_4 + 2*x_0_4*x_1_4*x_2_2 + 2*x_0_4*x_1_4*x_3_3,
        2*x0*x_0_2 - 2*x11*x_0_2 - 2*x12*x_0_1 - 2*x13*x_0_1 + 2*x14*x_1_1 + 2*x14*x_4_4 - 2*x15*x_2_4 + 2*x16*x_1_1 + 2*x16*x_3_3 - 2*x17*x_2_3 + 2*x18*x_3_3 + 2*x18*x_4_4 - 2*x19*x_3_3 - 2*x19*x_4_4 - 2*x20*x_1_2 - 2*x21*x_1_2 + 2*x4*x_0_2 + 2*x5*x_0_2,
        2*x1*x_0_3 - 2*x16*x_2_3 - 2*x18*x_2_3 - 2*x21*x_1_3 - 2*x22*x_3_4 - 2*x23*x_1_3 - 2*x24*x_3_4 - 2*x25*x_0_3 - 2*x26*x_1_1 - 2*x26*x_2_2 + 2*x4*x_0_3 + 2*x7*x_0_3 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_1*x_1_3*x_4_4 + 2*x_0_2*x_1_1*x_2_3 + 2*x_0_2*x_2_3*x_4_4 + 2*x_0_4*x_1_1*x_3_4 + 2*x_0_4*x_2_2*x_3_4,
        -2*x14*x_2_4 - 2*x18*x_2_4 + 2*x2*x_0_4 - 2*x20*x_1_4 - 2*x23*x_1_4 - 2*x25*x_0_4 - 2*x27*x_3_4 - 2*x28*x_3_4 - 2*x29*x_1_1 - 2*x29*x_2_2 + 2*x5*x_0_4 + 2*x7*x_0_4 + 2*x_0_1*x_1_4*x_2_2 + 2*x_0_1*x_1_4*x_3_3 + 2*x_0_2*x_1_1*x_2_4 + 2*x_0_2*x_2_4*x_3_3 + 2*x_0_3*x_1_1*x_3_4 + 2*x_0_3*x_2_2*x_3_4,
        -x3 - x32 - x34 - x35,
        2*x0*x_1_2 - 2*x11*x_1_2 - 2*x14*x_0_1 - 2*x16*x_0_1 - 2*x20*x_0_2 - 2*x21*x_0_2 + 2*x30*x_1_2 + 2*x31*x_1_2 - 2*x36*x_3_3 - 2*x36*x_4_4 - 2*x37*x_1_3 - 2*x38*x_2_3 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_0*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_3_3 + 2*x_0_1*x_0_2*x_4_4 + 2*x_1_3*x_2_3*x_4_4 + 2*x_1_4*x_2_4*x_3_3,
        2*x1*x_1_3 + 2*x10*x_0_3 - 2*x13*x_2_3 - 2*x17*x_0_1 - 2*x21*x_0_3 - 2*x23*x_0_3 + 2*x26*x_0_1 - 2*x28*x_0_1 + 2*x30*x_1_3 + 2*x33*x_1_3 + 2*x36*x_2_3 - 2*x37*x_1_2 + 2*x38*x_0_0 + 2*x38*x_2_2 + 2*x39*x_4_4 - 2*x40*x_1_3 - 2*x41*x_0_0 - 2*x41*x_2_2,
        2*x10*x_0_4 - 2*x12*x_2_4 - 2*x15*x_0_1 + 2*x2*x_1_4 - 2*x20*x_0_4 - 2*x23*x_0_4 - 2*x24*x_0_1 + 2*x29*x_0_1 + 2*x31*x_1_4 + 2*x33*x_1_4 + 2*x36*x_2_4 - 2*x39*x_3_4 - 2*x40*x_1_4 + 2*x42*x_0_0 + 2*x42*x_2_2 - 2*x43*x_0_0 - 2*x43*x_2_2 + 2*x_1_2*x_2_4*x_3_3,
        -x32 - x45 - x46 - x6,
        -2*x13*x_1_3 - 2*x16*x_0_3 - 2*x17*x_0_2 - 2*x18*x_0_3 - 2*x27*x_0_2 + 2*x30*x_2_3 - 2*x38*x_1_2 + 2*x4*x_2_3 + 2*x44*x_2_3 - 2*x47*x_2_3 - 2*x48*x_0_0 - 2*x48*x_1_1 + 2*x_0_0*x_1_2*x_1_3 + 2*x_0_0*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_1_1 + 2*x_0_2*x_0_3*x_4_4 + 2*x_1_1*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_4_4,
        -2*x12*x_1_4 - 2*x14*x_0_4 - 2*x15*x_0_2 - 2*x18*x_0_4 - 2*x22*x_0_2 + 2*x31*x_2_4 - 2*x42*x_1_2 + 2*x44*x_2_4 - 2*x47*x_2_4 - 2*x49*x_0_0 - 2*x49*x_1_1 + 2*x5*x_2_4 + 2*x_0_0*x_1_2*x_1_4 + 2*x_0_0*x_2_3*x_3_4 + 2*x_0_2*x_0_4*x_1_1 + 2*x_0_2*x_0_4*x_3_3 + 2*x_1_1*x_2_3*x_3_4 + 2*x_1_2*x_1_4*x_3_3,
        -x34 - x45 - x50 - x8,
        -2*x22*x_0_3 - 2*x24*x_0_3 - 2*x25*x_3_4 - 2*x27*x_0_4 - 2*x28*x_0_4 + 2*x33*x_3_4 - 2*x39*x_1_4 - 2*x40*x_3_4 + 2*x44*x_3_4 - 2*x47*x_3_4 + 2*x7*x_3_4 + 2*x_0_0*x_1_3*x_1_4 + 2*x_0_0*x_2_3*x_2_4 + 2*x_0_3*x_0_4*x_1_1 + 2*x_0_3*x_0_4*x_2_2 + 2*x_1_1*x_2_3*x_2_4 - 2*x_1_2*x_1_3*x_2_4 + 2*x_1_3*x_1_4*x_2_2,
        -x35 - x46 - x50 - x9
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S5_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S5_n5(x_vec):
    """Calculates S_5 for n=5 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        float: The value of S_5.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # S_k CSE Defs
    x0 = x_1_1*x_2_2
    x1 = x_0_0*x_3_3
    x2 = 2*x_3_4
    x3 = x2*x_2_3
    x4 = x3*x_2_4
    x5 = x_0_0*x_4_4
    x6 = 2*x_1_2
    x7 = x_1_3*x_2_3
    x8 = x6*x7
    x9 = x2*x_1_3
    x10 = x_0_0*x_1_2
    x11 = x_1_4*x_2_4
    x12 = x11*x6
    x13 = x9*x_1_4
    x14 = x_3_3*x_4_4
    x15 = 2*x_0_1
    x16 = x15*x_0_2
    x17 = x16*x_1_2
    x18 = x16*x_3_4
    x19 = x_1_3*x_2_4
    x20 = x_1_4*x_2_3
    x21 = x_1_2*x_4_4
    x22 = x15*x_0_3
    x23 = x22*x_2_3
    x24 = x_1_2*x_3_4
    x25 = x_2_2*x_4_4
    x26 = x22*x_1_3
    x27 = x_2_2*x_3_4
    x28 = x15*x_0_4
    x29 = x_1_2*x_3_3
    x30 = x28*x_2_4
    x31 = x_2_2*x_3_3
    x32 = x28*x_1_4
    x33 = x_1_1*x_4_4
    x34 = 2*x_0_2
    x35 = x34*x_0_3
    x36 = x35*x_2_3
    x37 = x_1_1*x_3_4
    x38 = x35*x_1_3
    x39 = x34*x_0_4
    x40 = x_1_1*x_3_3
    x41 = x39*x_2_4
    x42 = x39*x_1_4
    x43 = x_0_3*x_0_4
    x44 = x2*x43
    x45 = 2*x43
    x46 = x43*x6
    x47 = x_1_2**2
    x48 = x_3_4**2
    x49 = x48*x_0_0
    x50 = x_1_3**2
    x51 = x_2_4**2
    x52 = x51*x_0_0
    x53 = x_1_4**2
    x54 = x_2_3**2
    x55 = x54*x_0_0
    x56 = x_0_1**2
    x57 = x56*x_2_2
    x58 = x_0_2**2
    x59 = x58*x_1_1
    x60 = x_0_3**2
    x61 = x60*x_1_1
    x62 = x53*x_2_2
    x63 = x_0_4**2
    x64 = x63*x_1_1
    x65 = x47*x_3_3
    x66 = x50*x_2_2
    # Final S_k Calculation
    result = x0*x1*x_4_4 + x0*x44 - x0*x49 + x1*x12 - x1*x62 - x10*x3*x_1_4 - x10*x9*x_2_4 - x11*x16*x_3_3 + x11*x23 + x11*x38 - 2*x11*x7*x_0_0 - x12*x60 - x13*x58 + x13*x_0_0*x_2_2 + x14*x17 - x14*x57 - x14*x59 - x16*x7*x_4_4 - x17*x48 + x18*x19 + x18*x20 + x19*x46 + x20*x46 - x21*x23 - x21*x38 + x22*x24*x_2_4 - x22*x27*x_1_4 + x24*x28*x_2_3 + x24*x35*x_1_4 + x24*x39*x_1_3 + x25*x26 - x25*x61 - x26*x51 - x27*x28*x_1_3 - x29*x30 - x29*x42 + x30*x7 + x31*x32 - x31*x64 - x32*x54 + x33*x36 - x33*x55 - x35*x37*x_2_4 - x36*x53 - x37*x39*x_2_3 - x4*x56 + x4*x_0_0*x_1_1 + x40*x41 - x40*x52 - x41*x50 + x42*x7 - x44*x47 - x45*x_1_1*x_2_3*x_2_4 - x45*x_1_3*x_1_4*x_2_2 + x47*x49 + x47*x60*x_4_4 + x48*x57 + x48*x59 - x5*x65 - x5*x66 + x5*x8 + x50*x52 + x50*x58*x_4_4 + x51*x56*x_3_3 + x51*x61 + x53*x55 + x53*x58*x_3_3 + x54*x56*x_4_4 + x54*x64 + x60*x62 + x63*x65 + x63*x66 - x63*x8
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S5_n5)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2, x_1_3, x_1_4, x_2_2,
# x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S5_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_5 for n=5.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4
    
    Returns:
        numpy.ndarray: The gradient vector of S_5.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]
    # Jacobian CSE Defs
    x0 = x_3_4**2
    x1 = x0*x_2_2
    x2 = x_2_3**2
    x3 = x2*x_4_4
    x4 = x_2_4**2
    x5 = x4*x_3_3
    x6 = x_1_2**2
    x7 = x6*x_4_4
    x8 = x_1_3**2
    x9 = x8*x_4_4
    x10 = x_1_4**2
    x11 = x10*x_3_3
    x12 = x_1_3*x_2_4
    x13 = x_1_2*x_3_4
    x14 = 2*x13
    x15 = x_1_4*x_2_3
    x16 = 2*x12
    x17 = x_3_3*x_4_4
    x18 = x17*x_1_2
    x19 = x_0_2*x_3_4
    x20 = x_0_3*x_2_4
    x21 = x_1_3*x_4_4
    x22 = x_0_3*x_2_2
    x23 = x_0_4*x_2_3
    x24 = x_2_2*x_3_3
    x25 = x_0_4*x_1_4
    x26 = x_0_1*x_4_4
    x27 = x_0_1*x_3_4
    x28 = x_2_3*x_2_4
    x29 = x21*x_2_3
    x30 = x_2_4*x_3_3
    x31 = x_0_2*x_1_4
    x32 = x_0_3*x_1_2
    x33 = x_2_3*x_4_4
    x34 = x_1_4*x_3_4
    x35 = x_0_4*x_1_2
    x36 = x_0_4*x_1_3
    x37 = x_2_2*x_3_4
    x38 = x0*x_0_2
    x39 = x4*x_0_3
    x40 = x2*x_0_4
    x41 = x33*x_1_1
    x42 = x_0_3*x_1_4
    x43 = x_1_1*x_3_3
    x44 = x43*x_2_4
    x45 = x_0_1*x_1_4
    x46 = x_0_2*x_4_4
    x47 = x_1_3*x_1_4
    x48 = 2*x19
    x49 = x_1_1*x_3_4
    x50 = x_1_2*x_3_3
    x51 = x0*x_1_2
    x52 = x10*x_0_3
    x53 = x8*x_0_4
    x54 = x_0_1*x_2_4
    x55 = x_0_1*x_2_2
    x56 = x19*x_1_2
    x57 = x_1_1*x_2_2
    x58 = x57*x_3_4
    x59 = x26*x_2_3
    x60 = x_1_1*x_2_4
    x61 = x21*x_0_2
    x62 = x57*x_0_3
    x63 = 2*x_1_2
    x64 = x25*x_1_3
    x65 = x4*x_1_3
    x66 = x10*x_2_3
    x67 = x6*x_0_4
    x68 = x_0_1*x_2_3
    x69 = x15*x_0_2
    x70 = x30*x_0_1
    x71 = x37*x_0_1
    x72 = x_1_1*x_2_3
    x73 = x23*x_1_3
    x74 = x2*x_1_4
    x75 = x8*x_2_4
    x76 = x6*x_3_4
    x77 = x_0_2**2
    x78 = x77*x_4_4
    x79 = x_0_3**2
    x80 = x79*x_4_4
    x81 = x_0_4**2
    x82 = x81*x_3_3
    x83 = x_0_0*x_3_3
    x84 = x83*x_2_4
    x85 = x_0_1*x_0_2
    x86 = x_0_3*x_0_4
    x87 = x83*x_1_2
    x88 = x_0_0*x_3_4
    x89 = x_0_2*x_3_3
    x90 = x79*x_1_4
    x91 = x81*x_1_3
    x92 = x_0_0*x_1_2
    x93 = x_0_0*x_2_2
    x94 = x_0_0*x_2_4
    x95 = x_0_2*x_0_4
    x96 = x77*x_1_4
    x97 = x81*x_2_3
    x98 = x_0_1*x_0_4
    x99 = x_0_0*x_2_3
    x100 = 2*x_0_3
    x101 = x77*x_3_4
    x102 = x79*x_2_4
    x103 = x_0_0*x_1_1
    x104 = x_0_1**2
    x105 = x104*x_4_4
    x106 = x_0_1*x_0_3
    x107 = x103*x_3_4
    x108 = x_0_3*x_1_1
    x109 = x_0_0*x_1_4
    x110 = x_0_4*x_1_1
    x111 = x104*x_2_4
    x112 = x_0_0*x_1_3
    x113 = x_0_1*x_3_3
    x114 = x104*x_3_4
    x115 = 2*x54
    x116 = x_0_1*x_1_2
    x117 = x_0_2*x_1_3
    x118 = x_0_2*x_1_1
    x119 = 2*x68
    # Final Gradient Calculation
    gradient = np.array([
        x0*x6 - x1*x_1_1 + x10*x2 - x11*x_2_2 - x12*x14 - x14*x15 - x15*x16 - x3*x_1_1 + x4*x8 - x5*x_1_1 - x7*x_3_3 - x9*x_2_2 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4,
        2*x1*x_0_1 + 2*x12*x19 + 2*x12*x23 + 2*x13*x20 + 2*x13*x23 + 2*x15*x19 + 2*x15*x20 + 2*x18*x_0_2 + 2*x21*x22 - 2*x22*x34 + 2*x24*x25 - 2*x24*x26 - 4*x27*x28 - 2*x29*x_0_2 + 2*x3*x_0_1 - 2*x30*x31 - 2*x30*x35 - 2*x32*x33 - 2*x36*x37 - 2*x38*x_1_2 - 2*x39*x_1_3 - 2*x40*x_1_4 + 2*x5*x_0_1,
        2*x11*x_0_2 + 2*x12*x27 + 2*x12*x42 + 2*x13*x36 + 2*x13*x42 + 2*x15*x27 + 2*x15*x36 + 2*x18*x_0_1 - 2*x20*x49 - 2*x21*x32 - 2*x23*x49 - 2*x25*x50 - 2*x29*x_0_1 - 2*x30*x45 + 2*x38*x_1_1 + 2*x41*x_0_3 - 2*x43*x46 + 2*x44*x_0_4 - 2*x47*x48 - 2*x51*x_0_1 - 2*x52*x_2_3 - 2*x53*x_2_4 + 2*x9*x_0_2,
        2*x12*x31 + 2*x12*x35 + 2*x13*x54 + 2*x15*x35 + 2*x15*x54 - 2*x19*x60 - 2*x20*x63*x_1_4 + 2*x21*x55 - 2*x23*x60 - 2*x34*x55 + 2*x39*x_1_1 + 2*x41*x_0_2 + 2*x52*x_2_2 + 2*x56*x_1_4 + 2*x58*x_0_4 - 2*x59*x_1_2 - 2*x61*x_1_2 - 2*x62*x_4_4 - 2*x64*x_2_2 - 2*x65*x_0_1 - 2*x66*x_0_2 - 2*x67*x_3_4 + 2*x7*x_0_3,
        2*x12*x32 + 2*x12*x68 + 2*x13*x68 + 2*x15*x32 - 2*x19*x72 - 2*x20*x72 - 2*x22*x47 + 2*x24*x45 - 2*x31*x50 + 2*x40*x_1_1 + 2*x44*x_0_2 + 2*x53*x_2_2 + 2*x56*x_1_3 - 2*x57*x_0_4*x_3_3 + 2*x58*x_0_3 - 2*x63*x73 + 2*x67*x_3_3 + 2*x69*x_1_3 - 2*x70*x_1_2 - 2*x71*x_1_3 - 2*x74*x_0_1 - 2*x75*x_0_2 - 2*x76*x_0_3,
        x0*x77 - x1*x_0_0 + x2*x81 - 2*x20*x23 - x20*x48 - x23*x48 - x3*x_0_0 + x4*x79 - x5*x_0_0 - x78*x_3_3 - x80*x_2_2 - x82*x_2_2 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_2_2*x_3_4,
        2*x12*x86 - 2*x12*x88 - 2*x14*x86 + 2*x15*x86 - 2*x15*x88 + 2*x17*x85 + 2*x19*x36 + 2*x19*x42 + 2*x20*x27 + 2*x23*x27 - 2*x25*x89 + 2*x29*x_0_0 - 2*x38*x_0_1 + 2*x51*x_0_0 - 2*x59*x_0_3 - 2*x61*x_0_3 - 2*x70*x_0_4 + 2*x80*x_1_2 + 2*x82*x_1_2 + 2*x84*x_1_4 - 2*x87*x_4_4 - 2*x90*x_2_4 - 2*x91*x_2_3,
        -2*x13*x94 - 2*x15*x94 - 2*x16*x95 + 2*x19*x35 + 2*x19*x54 + 2*x20*x31 + 2*x20*x35 - 2*x21*x93 - 2*x22*x25 + 2*x22*x26 + 2*x23*x54 - 2*x32*x46 + 2*x33*x92 + 2*x34*x93 - 2*x39*x_0_1 - 2*x59*x_0_2 + 2*x65*x_0_0 + 2*x69*x_0_4 - 2*x71*x_0_4 + 2*x78*x_1_3 + 2*x91*x_2_2 - 2*x96*x_3_4 - 2*x97*x_1_2,
        -2*x100*x69 - 2*x101*x_1_3 - 2*x102*x_1_2 - 2*x12*x99 + 2*x12*x_0_2*x_0_3 - 2*x13*x99 + 2*x19*x32 + 2*x19*x68 + 2*x20*x68 - 2*x22*x27 - 2*x22*x36 + 2*x23*x32 + 2*x24*x98 - 2*x35*x89 - 2*x40*x_0_1 - 2*x70*x_0_2 + 2*x73*x_0_2 + 2*x74*x_0_0 + 2*x84*x_1_2 + 2*x90*x_2_2 + 2*x93*x_1_3*x_3_4 - 2*x93*x_1_4*x_3_3 + 2*x96*x_3_3,
        -x0*x103 + x0*x104 + x10*x79 - x100*x64 - x105*x_3_3 - 2*x106*x34 - x11*x_0_0 - 2*x27*x36 + x8*x81 - x80*x_1_1 - x82*x_1_1 - x9*x_0_0 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4,
        -2*x103*x33 + 2*x105*x_2_3 + 2*x107*x_2_4 + 2*x108*x46 - 2*x109*x12 - 2*x109*x13 - 2*x110*x19 - 2*x110*x20 - 2*x111*x_3_4 + 2*x12*x98 + 2*x13*x98 - 4*x15*x98 + 2*x19*x45 + 2*x20*x45 + 2*x21*x92 + 2*x25*x32 - 2*x26*x32 - 2*x52*x_0_2 - 2*x61*x_0_1 + 2*x64*x_0_2 + 2*x66*x_0_0 - 2*x91*x_1_2 + 2*x97*x_1_1,
        2*x102*x_1_1 - 2*x103*x30 + 2*x106*x13 + 2*x106*x15 - 2*x106*x16 + 2*x107*x_2_3 - 2*x108*x19 - 2*x108*x23 + 2*x111*x_3_3 - 2*x112*x13 - 2*x112*x15 - 2*x113*x31 - 2*x113*x35 - 2*x114*x_2_3 + 2*x19*x_0_1*x_1_3 + 2*x31*x_0_3*x_1_3 + 2*x32*x36 + 2*x43*x95 - 2*x53*x_0_2 + 2*x73*x_0_1 + 2*x75*x_0_0 + 2*x87*x_1_4 - 2*x90*x_1_2,
        x10*x77 - x10*x93 - x103*x4 + x104*x4 - x105*x_2_2 - x115*x31 - x115*x35 - x25*x63*x_0_2 - x57*x81 + x6*x81 - x7*x_0_0 - x78*x_1_1 + x_0_0*x_1_1*x_2_2*x_4_4 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_2*x_0_4*x_1_1*x_2_4,
        2*x101*x_1_1 + 2*x103*x28 - 2*x103*x37 - 2*x111*x_2_3 + 2*x114*x_2_2 + 2*x116*x20 + 2*x116*x23 + 2*x117*x35 - 2*x118*x20 - 2*x118*x23 + 2*x12*x85 - 2*x12*x92 - 2*x15*x92 - 2*x22*x45 + 2*x31*x32 - 2*x36*x55 + 2*x47*x93 - 4*x56*x_0_1 + 2*x62*x_0_4 - 2*x67*x_0_3 + 2*x69*x_0_1 + 2*x76*x_0_0 - 2*x96*x_1_3,
        -x103*x2 + x104*x2 - x104*x24 - x117*x119 - 2*x117*x32 - x119*x32 - x43*x77 - x57*x79 + x6*x79 - x6*x83 + x77*x8 - x8*x93 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3
    ])
    return gradient


