# -*- coding: utf-8 -*-
# Combined Value & Jacobian Functions for N = 5 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py using Newton's Sums
# Optimized for use with scipy.optimize.minimize(..., jac=True)
# DO NOT EDIT MANUALLY

import numpy as np
import numba
# The 'math' module is not needed as Numba recognizes standard functions


# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S1_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_1 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_1 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    # Common subexpressions for value and gradient


    # Final calculations
    result = x_0_0 + x_1_1 + x_2_2 + x_3_3 + x_4_4
    gradient = np.array([
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S2_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_2 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_2 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    # Common subexpressions for value and gradient
    x0 = x_2_2 + x_3_3 + x_4_4
    x1 = x_0_0 + x_1_1 + x_4_4

    # Final calculations
    result = x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 + x_0_0*x_4_4 - x_0_1**2 - x_0_2**2 - x_0_3**2 - x_0_4**2 + x_1_1*x_2_2 + x_1_1*x_3_3 + x_1_1*x_4_4 - x_1_2**2 - x_1_3**2 - x_1_4**2 + x_2_2*x_3_3 + x_2_2*x_4_4 - x_2_3**2 - x_2_4**2 + x_3_3*x_4_4 - x_3_4**2
    gradient = np.array([
        x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        -2*x_0_4,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        -2*x_1_4,
        x1 + x_3_3,
        -2*x_2_3,
        -2*x_2_4,
        x1 + x_2_2,
        -2*x_3_4,
        x_0_0 + x_1_1 + x_2_2 + x_3_3
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S3_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_3 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_3 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    # Common subexpressions for value and gradient
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_1_4**2
    x3 = x_2_3**2
    x4 = x_2_4**2
    x5 = x_3_4**2
    x6 = x_0_1**2
    x7 = x_0_2**2
    x8 = x_0_3**2
    x9 = x_0_4**2
    x10 = -x3
    x11 = -x4
    x12 = -x5
    x13 = x_2_2*x_3_3
    x14 = x_2_2*x_4_4
    x15 = x_3_3*x_4_4
    x16 = x10 + x11 + x12 + x13 + x14 + x15
    x17 = -x1
    x18 = -x2
    x19 = x_1_1*x_3_3
    x20 = x_1_1*x_4_4
    x21 = x17 + x18 + x19 + x20
    x22 = -x0 + x_1_1*x_2_2
    x23 = -x8
    x24 = -x9
    x25 = x_0_0*x_3_3
    x26 = x_0_0*x_4_4
    x27 = x23 + x24 + x25 + x26
    x28 = -x7 + x_0_0*x_2_2
    x29 = -x6 + x_0_0*x_1_1
    x30 = x22 + x28 + x29

    # Final calculations
    result = -x0*x_0_0 - x0*x_3_3 - x0*x_4_4 - x1*x_0_0 - x1*x_2_2 - x1*x_4_4 - x2*x_0_0 - x2*x_2_2 - x2*x_3_3 - x3*x_0_0 - x3*x_1_1 - x3*x_4_4 - x4*x_0_0 - x4*x_1_1 - x4*x_3_3 - x5*x_0_0 - x5*x_1_1 - x5*x_2_2 - x6*x_2_2 - x6*x_3_3 - x6*x_4_4 - x7*x_1_1 - x7*x_3_3 - x7*x_4_4 - x8*x_1_1 - x8*x_2_2 - x8*x_4_4 - x9*x_1_1 - x9*x_2_2 - x9*x_3_3 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_1_1*x_4_4 + x_0_0*x_2_2*x_3_3 + x_0_0*x_2_2*x_4_4 + x_0_0*x_3_3*x_4_4 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_1*x_0_4*x_1_4 + 2*x_0_2*x_0_3*x_2_3 + 2*x_0_2*x_0_4*x_2_4 + 2*x_0_3*x_0_4*x_3_4 + x_1_1*x_2_2*x_3_3 + x_1_1*x_2_2*x_4_4 + x_1_1*x_3_3*x_4_4 + 2*x_1_2*x_1_3*x_2_3 + 2*x_1_2*x_1_4*x_2_4 + 2*x_1_3*x_1_4*x_3_4 + x_2_2*x_3_3*x_4_4 + 2*x_2_3*x_2_4*x_3_4
    gradient = np.array([
        x16 + x21 + x22,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 - x_0_1*x_4_4 + x_0_2*x_1_2 + x_0_3*x_1_3 + x_0_4*x_1_4),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 - x_0_2*x_4_4 + x_0_3*x_2_3 + x_0_4*x_2_4),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2 - x_0_3*x_4_4 + x_0_4*x_3_4),
        2*(x_0_1*x_1_4 + x_0_2*x_2_4 + x_0_3*x_3_4 - x_0_4*x_1_1 - x_0_4*x_2_2 - x_0_4*x_3_3),
        x16 + x27 + x28,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 - x_1_2*x_4_4 + x_1_3*x_2_3 + x_1_4*x_2_4),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2 - x_1_3*x_4_4 + x_1_4*x_3_4),
        2*(-x_0_0*x_1_4 + x_0_1*x_0_4 + x_1_2*x_2_4 + x_1_3*x_3_4 - x_1_4*x_2_2 - x_1_4*x_3_3),
        x12 + x15 + x21 + x27 + x29,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3 - x_2_3*x_4_4 + x_2_4*x_3_4),
        2*(-x_0_0*x_2_4 + x_0_2*x_0_4 - x_1_1*x_2_4 + x_1_2*x_1_4 + x_2_3*x_3_4 - x_2_4*x_3_3),
        x11 + x14 + x18 + x20 + x24 + x26 + x30,
        2*(-x_0_0*x_3_4 + x_0_3*x_0_4 - x_1_1*x_3_4 + x_1_3*x_1_4 - x_2_2*x_3_4 + x_2_3*x_2_4),
        x10 + x13 + x17 + x19 + x23 + x25 + x30
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S4_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_4 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_4 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    # Common subexpressions for value and gradient
    x0 = x_2_3**2
    x1 = x0*x_1_1
    x2 = x_2_4**2
    x3 = x2*x_1_1
    x4 = x_3_4**2
    x5 = x4*x_1_1
    x6 = x_1_2**2
    x7 = x6*x_3_3
    x8 = x6*x_4_4
    x9 = x_1_3**2
    x10 = x9*x_2_2
    x11 = x9*x_4_4
    x12 = x_1_4**2
    x13 = x12*x_2_2
    x14 = x12*x_3_3
    x15 = x4*x_2_2
    x16 = x0*x_4_4
    x17 = x2*x_3_3
    x18 = x_0_1**2
    x19 = x18*x_3_3
    x20 = x18*x_4_4
    x21 = x_0_2**2
    x22 = x21*x_3_3
    x23 = x21*x_4_4
    x24 = x_0_3**2
    x25 = x24*x_2_2
    x26 = x24*x_4_4
    x27 = x_0_4**2
    x28 = x27*x_2_2
    x29 = x27*x_3_3
    x30 = x_1_3*x_2_3
    x31 = x30*x_0_2
    x32 = 2*x_0_1
    x33 = x_1_4*x_2_4
    x34 = x33*x_0_2
    x35 = x_0_3*x_2_3
    x36 = x35*x_1_2
    x37 = x_0_3*x_3_4
    x38 = x37*x_1_4
    x39 = x_0_4*x_2_4
    x40 = x39*x_1_2
    x41 = x_0_4*x_3_4
    x42 = x41*x_1_3
    x43 = x_0_3*x_1_3
    x44 = x_0_2*x_1_2
    x45 = 2*x44
    x46 = x37*x_2_4
    x47 = 2*x_0_2
    x48 = x_0_4*x_1_4
    x49 = x41*x_2_3
    x50 = x_2_4*x_3_4
    x51 = x50*x_1_3
    x52 = 2*x_1_2
    x53 = x_1_4*x_3_4
    x54 = x53*x_2_3
    x55 = x15 + x16 + x17 - x_2_2*x_3_3*x_4_4 - 2*x_2_3*x_2_4*x_3_4
    x56 = x11 + x14 + x5 - x_1_1*x_3_3*x_4_4 - 2*x_1_3*x_1_4*x_3_4
    x57 = x13 + x3 + x8 - x_1_1*x_2_2*x_4_4 - 2*x_1_2*x_1_4*x_2_4
    x58 = x1 + x10 + x7 - x_1_1*x_2_2*x_3_3 - 2*x_1_2*x_1_3*x_2_3
    x59 = x_0_1*x_2_2
    x60 = x_3_3*x_4_4
    x61 = x_0_1*x_1_2
    x62 = x_0_2*x_1_1
    x63 = x_0_1*x_1_4
    x64 = x_0_2*x_2_4
    x65 = x_1_1*x_2_2
    x66 = x_0_3*x_4_4
    x67 = x_0_1*x_1_3
    x68 = x_0_2*x_2_3
    x69 = x_0_4*x_3_3
    x70 = x26 + x29 + x4*x_0_0 - x_0_0*x_3_3*x_4_4 - 2*x_0_3*x_0_4*x_3_4
    x71 = x2*x_0_0 + x23 + x28 - x_0_0*x_2_2*x_4_4 - 2*x_0_2*x_0_4*x_2_4
    x72 = x0*x_0_0 + x22 + x25 - x_0_0*x_2_2*x_3_3 - 2*x_0_2*x_0_3*x_2_3
    x73 = x_0_0*x_1_2
    x74 = x_1_2*x_2_3
    x75 = x_0_0*x_2_2
    x76 = x_1_3*x_4_4
    x77 = x_1_3*x_3_4
    x78 = x_1_4*x_3_3
    x79 = x12*x_0_0 + x20 + x27*x_1_1 - x_0_0*x_1_1*x_4_4 - 2*x_0_1*x_0_4*x_1_4
    x80 = x19 + x24*x_1_1 + x9*x_0_0 - x_0_0*x_1_1*x_3_3 - 2*x_0_1*x_0_3*x_1_3
    x81 = x_0_0*x_1_1
    x82 = x_2_3*x_4_4
    x83 = x_2_4*x_3_3
    x84 = x18*x_2_2 + x21*x_1_1 + x6*x_0_0 - x_0_0*x_1_1*x_2_2 - 2*x_0_1*x_0_2*x_1_2

    # Final calculations
    result = x0*x12 + x0*x18 + x0*x27 - x1*x_0_0 - x1*x_4_4 - x10*x_0_0 - x10*x_4_4 - x11*x_0_0 + x12*x21 + x12*x24 - x13*x_0_0 - x13*x_3_3 - x14*x_0_0 - x15*x_0_0 - x16*x_0_0 - x17*x_0_0 + x18*x2 + x18*x4 - x19*x_2_2 - x19*x_4_4 + x2*x24 + x2*x9 - x20*x_2_2 + x21*x4 + x21*x9 - x22*x_1_1 - x22*x_4_4 - x23*x_1_1 + x24*x6 - x25*x_1_1 - x25*x_4_4 - x26*x_1_1 + x27*x6 + x27*x9 - x28*x_1_1 - x28*x_3_3 - x29*x_1_1 - x3*x_0_0 - x3*x_3_3 - 2*x30*x33 - x31*x32 - x32*x34 - x32*x36 - x32*x38 - x32*x40 - x32*x42 - 2*x35*x39 + x4*x6 - x43*x45 - 2*x43*x48 - x45*x48 - x46*x47 - x47*x49 - x5*x_0_0 - x5*x_2_2 - x51*x52 - x52*x54 - x7*x_0_0 - x7*x_4_4 - x8*x_0_0 + x_0_0*x_1_1*x_2_2*x_3_3 + x_0_0*x_1_1*x_2_2*x_4_4 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_2*x_0_3*x_1_1*x_2_3 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_1_1*x_2_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4 + 2*x_0_3*x_0_4*x_2_2*x_3_4 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4
    gradient = np.array([
        -x55 - x56 - x57 - x58,
        2*x0*x_0_1 + 2*x2*x_0_1 - 2*x31 - 2*x34 - 2*x36 - 2*x38 + 2*x4*x_0_1 - 2*x40 - 2*x42 - 2*x59*x_3_3 - 2*x59*x_4_4 - 2*x60*x_0_1 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_2*x_1_2*x_4_4 + 2*x_0_3*x_1_3*x_2_2 + 2*x_0_3*x_1_3*x_4_4 + 2*x_0_4*x_1_4*x_2_2 + 2*x_0_4*x_1_4*x_3_3,
        2*x12*x_0_2 - 2*x30*x_0_1 - 2*x33*x_0_1 + 2*x35*x_1_1 + 2*x35*x_4_4 + 2*x39*x_1_1 + 2*x39*x_3_3 + 2*x4*x_0_2 - 2*x43*x_1_2 - 2*x46 - 2*x48*x_1_2 - 2*x49 - 2*x60*x_0_2 + 2*x61*x_3_3 + 2*x61*x_4_4 - 2*x62*x_3_3 - 2*x62*x_4_4 + 2*x9*x_0_2,
        2*x12*x_0_3 + 2*x2*x_0_3 - 2*x39*x_2_3 - 2*x44*x_1_3 - 2*x48*x_1_3 + 2*x6*x_0_3 - 2*x61*x_2_3 - 2*x63*x_3_4 - 2*x64*x_3_4 - 2*x65*x_0_3 - 2*x66*x_1_1 - 2*x66*x_2_2 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_1*x_1_3*x_4_4 + 2*x_0_2*x_1_1*x_2_3 + 2*x_0_2*x_2_3*x_4_4 + 2*x_0_4*x_1_1*x_3_4 + 2*x_0_4*x_2_2*x_3_4,
        2*x0*x_0_4 - 2*x35*x_2_4 - 2*x43*x_1_4 - 2*x44*x_1_4 + 2*x6*x_0_4 - 2*x61*x_2_4 - 2*x65*x_0_4 - 2*x67*x_3_4 - 2*x68*x_3_4 - 2*x69*x_1_1 - 2*x69*x_2_2 + 2*x9*x_0_4 + 2*x_0_1*x_1_4*x_2_2 + 2*x_0_1*x_1_4*x_3_3 + 2*x_0_2*x_1_1*x_2_4 + 2*x_0_2*x_2_4*x_3_3 + 2*x_0_3*x_1_1*x_3_4 + 2*x_0_3*x_2_2*x_3_4,
        -x55 - x70 - x71 - x72,
        2*x24*x_1_2 + 2*x27*x_1_2 - 2*x35*x_0_1 - 2*x39*x_0_1 + 2*x4*x_1_2 - 2*x43*x_0_2 - 2*x48*x_0_2 - 2*x51 - 2*x54 - 2*x60*x_1_2 - 2*x73*x_3_3 - 2*x73*x_4_4 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_0*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_3_3 + 2*x_0_1*x_0_2*x_4_4 + 2*x_1_3*x_2_3*x_4_4 + 2*x_1_4*x_2_4*x_3_3,
        2*x2*x_1_3 + 2*x21*x_1_3 + 2*x27*x_1_3 - 2*x33*x_2_3 - 2*x41*x_0_1 - 2*x44*x_0_3 - 2*x48*x_0_3 - 2*x50*x_1_2 + 2*x53*x_0_0 + 2*x53*x_2_2 + 2*x59*x_0_3 + 2*x66*x_0_1 - 2*x68*x_0_1 + 2*x73*x_2_3 + 2*x74*x_4_4 - 2*x75*x_1_3 - 2*x76*x_0_0 - 2*x76*x_2_2,
        2*x0*x_1_4 + 2*x21*x_1_4 + 2*x24*x_1_4 - 2*x30*x_2_4 - 2*x37*x_0_1 - 2*x43*x_0_4 - 2*x44*x_0_4 + 2*x59*x_0_4 - 2*x64*x_0_1 + 2*x69*x_0_1 + 2*x73*x_2_4 - 2*x74*x_3_4 - 2*x75*x_1_4 + 2*x77*x_0_0 + 2*x77*x_2_2 - 2*x78*x_0_0 - 2*x78*x_2_2 + 2*x_1_2*x_2_4*x_3_3,
        -x56 - x70 - x79 - x80,
        2*x12*x_2_3 + 2*x18*x_2_3 + 2*x27*x_2_3 - 2*x33*x_1_3 - 2*x39*x_0_3 - 2*x41*x_0_2 - 2*x53*x_1_2 - 2*x61*x_0_3 - 2*x67*x_0_2 - 2*x81*x_2_3 - 2*x82*x_0_0 - 2*x82*x_1_1 + 2*x_0_0*x_1_2*x_1_3 + 2*x_0_0*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_1_1 + 2*x_0_2*x_0_3*x_4_4 + 2*x_1_1*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_4_4,
        2*x18*x_2_4 + 2*x24*x_2_4 - 2*x30*x_1_4 - 2*x35*x_0_4 - 2*x37*x_0_2 - 2*x61*x_0_4 - 2*x63*x_0_2 - 2*x77*x_1_2 - 2*x81*x_2_4 - 2*x83*x_0_0 - 2*x83*x_1_1 + 2*x9*x_2_4 + 2*x_0_0*x_1_2*x_1_4 + 2*x_0_0*x_2_3*x_3_4 + 2*x_0_2*x_0_4*x_1_1 + 2*x_0_2*x_0_4*x_3_3 + 2*x_1_1*x_2_3*x_3_4 + 2*x_1_2*x_1_4*x_3_3,
        -x57 - x71 - x79 - x84,
        2*x18*x_3_4 + 2*x21*x_3_4 + 2*x6*x_3_4 - 2*x63*x_0_3 - 2*x64*x_0_3 - 2*x65*x_3_4 - 2*x67*x_0_4 - 2*x68*x_0_4 - 2*x74*x_1_4 - 2*x75*x_3_4 - 2*x81*x_3_4 + 2*x_0_0*x_1_3*x_1_4 + 2*x_0_0*x_2_3*x_2_4 + 2*x_0_3*x_0_4*x_1_1 + 2*x_0_3*x_0_4*x_2_2 + 2*x_1_1*x_2_3*x_2_4 - 2*x_1_2*x_1_3*x_2_4 + 2*x_1_3*x_1_4*x_2_2,
        -x58 - x72 - x80 - x84
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S5_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_5 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 15
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_0_4, x_1_1, x_1_2,
           x_1_3, x_1_4, x_2_2, x_2_3, x_2_4, x_3_3, x_3_4, x_4_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_5 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_0_4 = x_vec[4]
    x_1_1 = x_vec[5]
    x_1_2 = x_vec[6]
    x_1_3 = x_vec[7]
    x_1_4 = x_vec[8]
    x_2_2 = x_vec[9]
    x_2_3 = x_vec[10]
    x_2_4 = x_vec[11]
    x_3_3 = x_vec[12]
    x_3_4 = x_vec[13]
    x_4_4 = x_vec[14]

    # Common subexpressions for value and gradient
    x0 = x_2_2*x_3_3
    x1 = x_0_0*x_1_1
    x2 = x1*x_3_4
    x3 = x2*x_2_4
    x4 = 2*x_2_3
    x5 = x_1_3*x_4_4
    x6 = x5*x_2_3
    x7 = x6*x_0_0
    x8 = 2*x_1_2
    x9 = x_1_3*x_2_4
    x10 = x_1_2*x_3_4
    x11 = 2*x10
    x12 = x11*x9
    x13 = x_1_4*x_2_3
    x14 = x11*x13
    x15 = x_0_0*x_3_3
    x16 = x15*x_2_4
    x17 = x16*x_1_4
    x18 = x_0_0*x_2_2
    x19 = x_1_4*x_3_4
    x20 = x18*x19
    x21 = 2*x_1_3
    x22 = 2*x9
    x23 = x13*x22
    x24 = x_3_3*x_4_4
    x25 = x24*x_1_2
    x26 = x25*x_0_2
    x27 = 2*x_0_1
    x28 = x6*x_0_2
    x29 = x_0_2*x_3_4
    x30 = x29*x9
    x31 = x13*x29
    x32 = x_2_4*x_3_3
    x33 = x_0_2*x_1_4
    x34 = x32*x33
    x35 = x_0_1*x_4_4
    x36 = x35*x_2_3
    x37 = x_0_3*x_1_2
    x38 = 2*x37
    x39 = x_0_3*x_2_4
    x40 = x10*x39
    x41 = x_0_3*x_2_2
    x42 = x41*x5
    x43 = x19*x41
    x44 = x13*x39
    x45 = x_0_4*x_2_3
    x46 = x10*x45
    x47 = x_0_4*x_1_2
    x48 = x32*x47
    x49 = x_0_4*x_1_3
    x50 = x_2_2*x_3_4
    x51 = x49*x50
    x52 = x45*x9
    x53 = x_0_4*x_1_4
    x54 = x0*x53
    x55 = x_2_3*x_4_4
    x56 = x55*x_1_1
    x57 = x56*x_0_3
    x58 = 2*x_0_2
    x59 = 2*x29
    x60 = x39*x59
    x61 = x37*x5
    x62 = x29*x37
    x63 = x33*x9
    x64 = 2*x_0_3
    x65 = x45*x59
    x66 = x_1_1*x_3_3
    x67 = x66*x_2_4
    x68 = x67*x_0_4
    x69 = x29*x47
    x70 = x_1_2*x_3_3
    x71 = x53*x70
    x72 = x13*x49
    x73 = x_1_1*x_2_2
    x74 = x73*x_3_4
    x75 = x74*x_0_4
    x76 = 2*x39*x45
    x77 = x37*x9
    x78 = 2*x_0_4
    x79 = x13*x37
    x80 = x53*x_1_3
    x81 = x_1_2**2
    x82 = x_3_4**2
    x83 = x_1_3**2
    x84 = x_2_4**2
    x85 = x_1_4**2
    x86 = x_2_3**2
    x87 = x_0_1**2
    x88 = x_0_2**2
    x89 = x_0_3**2
    x90 = x_0_4**2
    x91 = x82*x_2_2
    x92 = x91*x_1_1
    x93 = x86*x_4_4
    x94 = x93*x_1_1
    x95 = x84*x_3_3
    x96 = x95*x_1_1
    x97 = x81*x_4_4
    x98 = x97*x_3_3
    x99 = x83*x_4_4
    x100 = x99*x_2_2
    x101 = x85*x_3_3
    x102 = x101*x_2_2
    x103 = x82*x_0_2
    x104 = x103*x_1_2
    x105 = x84*x_0_3
    x106 = x105*x_1_3
    x107 = x86*x_0_4
    x108 = x107*x_1_4
    x109 = x87*x_4_4
    x110 = x109*x_3_3
    x111 = x87*x_2_4
    x112 = x111*x_3_4
    x113 = x85*x_0_3
    x114 = x113*x_2_3
    x115 = x83*x_0_4
    x116 = x115*x_2_4
    x117 = x88*x_4_4
    x118 = x117*x_3_3
    x119 = x88*x_1_4
    x120 = x119*x_3_4
    x121 = x81*x_0_4
    x122 = x121*x_3_4
    x123 = x89*x_4_4
    x124 = x123*x_2_2
    x125 = x89*x_1_4
    x126 = x125*x_2_4
    x127 = x90*x_3_3
    x128 = x127*x_2_2
    x129 = x90*x_1_3
    x130 = x129*x_2_3
    x131 = x_0_1*x_3_4
    x132 = x_2_3*x_2_4
    x133 = x_0_3*x_1_4
    x134 = x_0_1*x_1_4
    x135 = x_0_2*x_4_4
    x136 = x_1_3*x_1_4
    x137 = x_1_1*x_3_4
    x138 = x82*x_1_2
    x139 = x_0_1*x_2_4
    x140 = x_0_1*x_2_2
    x141 = x29*x_1_2
    x142 = x_1_1*x_2_4
    x143 = x5*x_0_2
    x144 = x73*x_0_3
    x145 = x84*x_1_3
    x146 = x85*x_2_3
    x147 = x_0_1*x_2_3
    x148 = x13*x_0_2
    x149 = x32*x_0_1
    x150 = x50*x_0_1
    x151 = x_1_1*x_2_3
    x152 = x45*x_1_3
    x153 = x86*x_1_4
    x154 = x83*x_2_4
    x155 = x81*x_3_4
    x156 = x_0_1*x_0_2
    x157 = x_0_3*x_0_4
    x158 = x15*x_1_2
    x159 = x_0_0*x_3_4
    x160 = x_0_2*x_3_3
    x161 = x_0_0*x_1_2
    x162 = x_0_0*x_2_4
    x163 = x_0_2*x_0_4
    x164 = x90*x_2_3
    x165 = x_0_1*x_0_4
    x166 = x_0_0*x_2_3
    x167 = x88*x_3_4
    x168 = x89*x_2_4
    x169 = x_0_1*x_0_3
    x170 = x_0_3*x_1_1
    x171 = x_0_0*x_1_4
    x172 = x_0_4*x_1_1
    x173 = x_0_0*x_1_3
    x174 = x_0_1*x_3_3
    x175 = x87*x_3_4
    x176 = 2*x139
    x177 = x_0_1*x_1_2
    x178 = x_0_2*x_1_3
    x179 = x_0_2*x_1_1
    x180 = 2*x147

    # Final calculations
    result = x0*x1*x_4_4 - x100*x_0_0 - x102*x_0_0 - x104*x27 - x106*x27 - x108*x27 - x110*x_2_2 - x112*x4 - x114*x58 - x116*x58 - x118*x_1_1 - x12*x_0_0 - x120*x21 - x122*x64 - x124*x_1_1 - x126*x8 - x128*x_1_1 - x130*x8 - x14*x_0_0 + x17*x8 + x20*x21 + x21*x69 - x23*x_0_0 + x26*x27 - x27*x28 + x27*x30 + x27*x31 - x27*x34 + x27*x40 + x27*x42 - x27*x43 + x27*x44 + x27*x46 - x27*x48 - x27*x51 + x27*x52 + x27*x54 + x3*x4 - x36*x38 - 2*x41*x80 + x57*x58 - x58*x61 + x58*x68 - x58*x71 + x58*x72 - x60*x_1_1 + 2*x62*x_1_4 + x63*x64 + x64*x75 - x65*x_1_1 + x7*x8 - x76*x_1_1 + x77*x78 + x78*x79 + x81*x82*x_0_0 + x81*x89*x_4_4 + x81*x90*x_3_3 + x82*x87*x_2_2 + x82*x88*x_1_1 + x83*x84*x_0_0 + x83*x88*x_4_4 + x83*x90*x_2_2 + x84*x87*x_3_3 + x84*x89*x_1_1 + x85*x86*x_0_0 + x85*x88*x_3_3 + x85*x89*x_2_2 + x86*x87*x_4_4 + x86*x90*x_1_1 - x92*x_0_0 - x94*x_0_0 - x96*x_0_0 - x98*x_0_0
    gradient = np.array([
        -x100 - x102 - x12 - x14 - x23 + x81*x82 + x83*x84 + x85*x86 - x92 - x94 - x96 - x98 + x_1_1*x_2_2*x_3_3*x_4_4 + 2*x_1_1*x_2_3*x_2_4*x_3_4 + 2*x_1_2*x_1_3*x_2_3*x_4_4 + 2*x_1_2*x_1_4*x_2_4*x_3_3 + 2*x_1_3*x_1_4*x_2_2*x_3_4,
        -2*x0*x35 - 2*x104 - 2*x106 - 2*x108 - 4*x131*x132 + 2*x26 - 2*x28 + 2*x30 + 2*x31 - 2*x34 - 2*x37*x55 + 2*x40 + 2*x42 - 2*x43 + 2*x44 + 2*x46 - 2*x48 - 2*x51 + 2*x52 + 2*x54 + 2*x91*x_0_1 + 2*x93*x_0_1 + 2*x95*x_0_1,
        2*x10*x133 + 2*x10*x49 + 2*x101*x_0_2 + 2*x103*x_1_1 - 2*x114 - 2*x116 + 2*x13*x131 + 2*x131*x9 + 2*x133*x9 - 2*x134*x32 - 2*x135*x66 - 2*x136*x59 - 2*x137*x39 - 2*x137*x45 - 2*x138*x_0_1 + 2*x25*x_0_1 + 2*x57 - 2*x6*x_0_1 - 2*x61 + 2*x68 - 2*x71 + 2*x72 + 2*x99*x_0_2,
        2*x10*x139 + 2*x105*x_1_1 + 2*x113*x_2_2 - 2*x122 + 2*x13*x139 + 2*x13*x47 - 2*x140*x19 + 2*x140*x5 + 2*x141*x_1_4 - 2*x142*x29 - 2*x142*x45 - 2*x143*x_1_2 - 2*x144*x_4_4 - 2*x145*x_0_1 - 2*x146*x_0_2 - 2*x36*x_1_2 - 2*x39*x8*x_1_4 + 2*x47*x9 + 2*x56*x_0_2 + 2*x63 + 2*x75 - 2*x80*x_2_2 + 2*x97*x_0_3,
        2*x0*x134 + 2*x10*x147 + 2*x107*x_1_1 + 2*x115*x_2_2 + 2*x121*x_3_3 - 2*x136*x41 + 2*x141*x_1_3 + 2*x147*x9 + 2*x148*x_1_3 - 2*x149*x_1_2 - 2*x150*x_1_3 - 2*x151*x29 - 2*x151*x39 - 2*x152*x8 - 2*x153*x_0_1 - 2*x154*x_0_2 - 2*x155*x_0_3 - 2*x33*x70 + 2*x67*x_0_2 - 2*x73*x_0_4*x_3_3 + 2*x74*x_0_3 + 2*x77 + 2*x79,
        -x118 - x124 - x128 - x60 - x65 - x76 + x82*x88 + x84*x89 + x86*x90 - x91*x_0_0 - x93*x_0_0 - x95*x_0_0 + x_0_0*x_2_2*x_3_3*x_4_4 + 2*x_0_0*x_2_3*x_2_4*x_3_4 + 2*x_0_2*x_0_3*x_2_3*x_4_4 + 2*x_0_2*x_0_4*x_2_4*x_3_3 + 2*x_0_3*x_0_4*x_2_2*x_3_4,
        -2*x103*x_0_1 - 2*x11*x157 + 2*x123*x_1_2 - 2*x126 + 2*x127*x_1_2 + 2*x13*x157 - 2*x13*x159 - 2*x130 + 2*x131*x39 + 2*x131*x45 + 2*x133*x29 + 2*x138*x_0_0 - 2*x143*x_0_3 - 2*x149*x_0_4 + 2*x156*x24 + 2*x157*x9 - 2*x158*x_4_4 - 2*x159*x9 - 2*x160*x53 + 2*x17 + 2*x29*x49 - 2*x36*x_0_3 + 2*x7,
        -2*x10*x162 - 2*x105*x_0_1 + 2*x117*x_1_3 - 2*x120 + 2*x129*x_2_2 - 2*x13*x162 - 2*x135*x37 + 2*x139*x29 + 2*x139*x45 + 2*x145*x_0_0 + 2*x148*x_0_4 - 2*x150*x_0_4 + 2*x161*x55 - 2*x163*x22 - 2*x164*x_1_2 - 2*x18*x5 + 2*x20 + 2*x33*x39 + 2*x35*x41 - 2*x36*x_0_2 + 2*x39*x47 - 2*x41*x53 + 2*x69,
        2*x0*x165 - 2*x10*x166 - 2*x107*x_0_1 + 2*x119*x_3_3 + 2*x125*x_2_2 - 2*x131*x41 + 2*x147*x29 + 2*x147*x39 - 2*x148*x64 - 2*x149*x_0_2 + 2*x152*x_0_2 + 2*x153*x_0_0 + 2*x16*x_1_2 - 2*x160*x47 - 2*x166*x9 - 2*x167*x_1_3 - 2*x168*x_1_2 + 2*x18*x_1_3*x_3_4 - 2*x18*x_1_4*x_3_3 + 2*x37*x45 - 2*x41*x49 + 2*x62 + 2*x9*x_0_2*x_0_3,
        -x1*x82 - x101*x_0_0 - x110 - x123*x_1_1 - x127*x_1_1 - 2*x131*x49 - 2*x169*x19 - x64*x80 + x82*x87 + x83*x90 + x85*x89 - x99*x_0_0 + x_0_0*x_1_1*x_3_3*x_4_4 + 2*x_0_0*x_1_3*x_1_4*x_3_4 + 2*x_0_1*x_0_3*x_1_3*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_3_3 + 2*x_0_3*x_0_4*x_1_1*x_3_4,
        -2*x1*x55 + 2*x10*x165 - 2*x10*x171 + 2*x109*x_2_3 - 2*x112 - 2*x113*x_0_2 - 2*x129*x_1_2 - 4*x13*x165 + 2*x134*x29 + 2*x134*x39 + 2*x135*x170 - 2*x143*x_0_1 + 2*x146*x_0_0 + 2*x161*x5 + 2*x164*x_1_1 + 2*x165*x9 - 2*x171*x9 - 2*x172*x29 - 2*x172*x39 + 2*x3 - 2*x35*x37 + 2*x37*x53 + 2*x80*x_0_2,
        -2*x1*x32 + 2*x10*x169 - 2*x10*x173 + 2*x111*x_3_3 - 2*x115*x_0_2 - 2*x125*x_1_2 + 2*x13*x169 - 2*x13*x173 + 2*x152*x_0_1 + 2*x154*x_0_0 + 2*x158*x_1_4 + 2*x163*x66 + 2*x168*x_1_1 - 2*x169*x22 - 2*x170*x29 - 2*x170*x45 - 2*x174*x33 - 2*x174*x47 - 2*x175*x_2_3 + 2*x2*x_2_3 + 2*x29*x_0_1*x_1_3 + 2*x33*x_0_3*x_1_3 + 2*x37*x49,
        -x1*x84 - x109*x_2_2 - x117*x_1_1 - x176*x33 - x176*x47 - x18*x85 - x53*x58*x_1_2 - x73*x90 + x81*x90 + x84*x87 + x85*x88 - x97*x_0_0 + x_0_0*x_1_1*x_2_2*x_4_4 + 2*x_0_0*x_1_2*x_1_4*x_2_4 + 2*x_0_1*x_0_2*x_1_2*x_4_4 + 2*x_0_1*x_0_4*x_1_4*x_2_2 + 2*x_0_2*x_0_4*x_1_1*x_2_4,
        2*x1*x132 - 2*x1*x50 - 2*x111*x_2_3 - 2*x119*x_1_3 - 2*x121*x_0_3 - 2*x13*x161 - 2*x134*x41 + 2*x136*x18 - 2*x140*x49 - 2*x141*x27 + 2*x144*x_0_4 + 2*x148*x_0_1 + 2*x155*x_0_0 + 2*x156*x9 - 2*x161*x9 + 2*x167*x_1_1 + 2*x175*x_2_2 + 2*x177*x39 + 2*x177*x45 + 2*x178*x47 - 2*x179*x39 - 2*x179*x45 + 2*x33*x37,
        -x0*x87 - x1*x86 - x15*x81 - x178*x180 - x178*x38 - x18*x83 - x180*x37 - x66*x88 - x73*x89 + x81*x89 + x83*x88 + x86*x87 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3
    ])
    
    return result, gradient


