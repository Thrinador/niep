# -*- coding: utf-8 -*-
# Separated Value, Jacobian, & Hessian Functions for N = 5 (matrix_type='sniep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import numpy as np
import numba

# --- Functions for S_1 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5(x_vec):
    """Calculates the value of S_1 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    return -2*x_0_1 - 2*x_0_2 - 2*x_0_3 - 2*x_0_4 - 2*x_1_2 - 2*x_1_3 - 2*x_1_4 - 2*x_2_3 - 2*x_2_4 - 2*x_3_4 + 5



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    return np.array([-2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_1 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 0
    hessian[0, 6] = 0
    hessian[0, 7] = 0
    hessian[0, 8] = 0
    hessian[0, 9] = 0
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = 0
    hessian[4, 9] = 0
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 0
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[7, 0] = 0
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 0
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = 0
    hessian[9, 0] = 0
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 0
    hessian[9, 5] = 0
    hessian[9, 6] = 0
    hessian[9, 7] = 0
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_2 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5(x_vec):
    """Calculates the value of S_2 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 3*x_0_1
    x1 = 4*x_0_1
    x2 = 3*x_0_2
    x3 = 4*x_0_2
    x4 = 3*x_0_3
    x5 = 4*x_0_3
    x6 = 4*x_0_4
    x7 = 3*x_0_4
    x8 = 3*x_1_2
    x9 = 3*x_1_3
    x10 = 3*x_1_4
    x11 = 3*x_2_3
    return x0*x_0_2 + x0*x_0_3 + x0*x_0_4 + x0*x_1_2 + x0*x_1_3 + x0*x_1_4 + x1*x_2_3 + x1*x_2_4 + x1*x_3_4 + x10*x_2_4 + x10*x_3_4 + x11*x_2_4 + x11*x_3_4 + x2*x_0_3 + x2*x_0_4 + x2*x_1_2 + x2*x_2_3 + x2*x_2_4 + x3*x_1_3 + x3*x_1_4 + x3*x_3_4 + x4*x_0_4 + x4*x_1_3 + x4*x_2_3 + x4*x_3_4 + x5*x_1_2 + x5*x_1_4 + x5*x_2_4 + x6*x_1_2 + x6*x_1_3 + x6*x_2_3 + x7*x_1_4 + x7*x_2_4 + x7*x_3_4 + x8*x_1_3 + x8*x_1_4 + x8*x_2_3 + x8*x_2_4 + x9*x_1_4 + x9*x_2_3 + x9*x_3_4 - 8*x_0_1 - 8*x_0_2 - 8*x_0_3 - 8*x_0_4 + 4*x_1_2*x_3_4 - 8*x_1_2 + 4*x_1_3*x_2_4 - 8*x_1_3 + 4*x_1_4*x_2_3 - 8*x_1_4 - 8*x_2_3 + 3*x_2_4*x_3_4 - 8*x_2_4 - 8*x_3_4 + 10



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 3*x_0_3
    x1 = 3*x_0_4
    x2 = 3*x_1_2
    x3 = 4*x_3_4
    x4 = x0 + x1 + x2 + x3 - 8
    x5 = 3*x_0_2
    x6 = 3*x_1_3
    x7 = 4*x_2_4
    x8 = x5 + x6 + x7
    x9 = 3*x_1_4
    x10 = 4*x_2_3
    x11 = x10 + x9
    x12 = 4*x_1_3
    x13 = 3*x_0_1
    x14 = 3*x_2_3
    x15 = x13 + x14
    x16 = 3*x_2_4
    x17 = 4*x_1_4
    x18 = x16 + x17
    x19 = x15 - 8
    x20 = 3*x_3_4
    x21 = 4*x_1_2
    x22 = x20 + x21
    x23 = x16 + x5
    x24 = x13 - 8
    x25 = 4*x_0_3
    x26 = x25 + x6
    x27 = 4*x_0_4
    x28 = x19 + x27 + x9
    x29 = x2 + x20
    x30 = 4*x_0_2
    x31 = x0 + x30
    x32 = x1 + x29
    x33 = 4*x_0_1
    x34 = x33 + x5 - 8
    x35 = x14 + x9
    return np.array([x11 + x4 + x8,
        x12 + x15 + x18 + x4,
        x1 + x17 + x19 + x22 + x8,
        x0 + x11 + x12 + x22 + x23 + x24,
        x23 + x26 + x28 + x3,
        x28 + x29 + x31 + x7,
        x10 + x16 + x24 + x26 + x30 + x32,
        x0 + x18 + x27 + x29 + x34 + x6,
        x12 + x25 + x32 + x34 + x35,
        x1 + x16 + x21 + x31 + x33 + x35 + x6 - 8])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_2 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 3
    hessian[0, 2] = 3
    hessian[0, 3] = 3
    hessian[0, 4] = 3
    hessian[0, 5] = 3
    hessian[0, 6] = 3
    hessian[0, 7] = 4
    hessian[0, 8] = 4
    hessian[0, 9] = 4
    hessian[1, 0] = 3
    hessian[1, 1] = 0
    hessian[1, 2] = 3
    hessian[1, 3] = 3
    hessian[1, 4] = 3
    hessian[1, 5] = 4
    hessian[1, 6] = 4
    hessian[1, 7] = 3
    hessian[1, 8] = 3
    hessian[1, 9] = 4
    hessian[2, 0] = 3
    hessian[2, 1] = 3
    hessian[2, 2] = 0
    hessian[2, 3] = 3
    hessian[2, 4] = 4
    hessian[2, 5] = 3
    hessian[2, 6] = 4
    hessian[2, 7] = 3
    hessian[2, 8] = 4
    hessian[2, 9] = 3
    hessian[3, 0] = 3
    hessian[3, 1] = 3
    hessian[3, 2] = 3
    hessian[3, 3] = 0
    hessian[3, 4] = 4
    hessian[3, 5] = 4
    hessian[3, 6] = 3
    hessian[3, 7] = 4
    hessian[3, 8] = 3
    hessian[3, 9] = 3
    hessian[4, 0] = 3
    hessian[4, 1] = 3
    hessian[4, 2] = 4
    hessian[4, 3] = 4
    hessian[4, 4] = 0
    hessian[4, 5] = 3
    hessian[4, 6] = 3
    hessian[4, 7] = 3
    hessian[4, 8] = 3
    hessian[4, 9] = 4
    hessian[5, 0] = 3
    hessian[5, 1] = 4
    hessian[5, 2] = 3
    hessian[5, 3] = 4
    hessian[5, 4] = 3
    hessian[5, 5] = 0
    hessian[5, 6] = 3
    hessian[5, 7] = 3
    hessian[5, 8] = 4
    hessian[5, 9] = 3
    hessian[6, 0] = 3
    hessian[6, 1] = 4
    hessian[6, 2] = 4
    hessian[6, 3] = 3
    hessian[6, 4] = 3
    hessian[6, 5] = 3
    hessian[6, 6] = 0
    hessian[6, 7] = 4
    hessian[6, 8] = 3
    hessian[6, 9] = 3
    hessian[7, 0] = 4
    hessian[7, 1] = 3
    hessian[7, 2] = 3
    hessian[7, 3] = 4
    hessian[7, 4] = 3
    hessian[7, 5] = 3
    hessian[7, 6] = 4
    hessian[7, 7] = 0
    hessian[7, 8] = 3
    hessian[7, 9] = 3
    hessian[8, 0] = 4
    hessian[8, 1] = 3
    hessian[8, 2] = 4
    hessian[8, 3] = 3
    hessian[8, 4] = 3
    hessian[8, 5] = 4
    hessian[8, 6] = 3
    hessian[8, 7] = 3
    hessian[8, 8] = 0
    hessian[8, 9] = 3
    hessian[9, 0] = 4
    hessian[9, 1] = 4
    hessian[9, 2] = 3
    hessian[9, 3] = 3
    hessian[9, 4] = 4
    hessian[9, 5] = 3
    hessian[9, 6] = 3
    hessian[9, 7] = 3
    hessian[9, 8] = 3
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_3 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5(x_vec):
    """Calculates the value of S_3 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 4*x_0_1
    x1 = x0*x_0_2
    x2 = 6*x_0_1
    x3 = x_0_2*x_3_4
    x4 = x_0_3*x_0_4
    x5 = x0*x_0_3
    x6 = x_0_3*x_1_4
    x7 = x2*x_2_4
    x8 = x0*x_0_4
    x9 = x2*x_2_3
    x10 = x0*x_1_2
    x11 = x_1_2*x_3_4
    x12 = x0*x_1_3
    x13 = x0*x_1_4
    x14 = x_2_4*x_3_4
    x15 = 4*x_0_2
    x16 = x15*x_0_3
    x17 = 6*x_0_2
    x18 = x_0_3*x_2_4
    x19 = 4*x3
    x20 = x15*x_0_4
    x21 = x17*x_1_3
    x22 = x15*x_1_2
    x23 = 6*x3
    x24 = x15*x_2_3
    x25 = x_1_4*x_2_3
    x26 = x_1_4*x_2_4
    x27 = 6*x_1_2
    x28 = 4*x4
    x29 = 4*x6
    x30 = 4*x_0_3
    x31 = x30*x_1_2
    x32 = 6*x11
    x33 = x30*x_1_3
    x34 = 6*x_1_3
    x35 = 6*x6
    x36 = 4*x_2_3
    x37 = x27*x_0_4
    x38 = 4*x_0_4
    x39 = x38*x_1_2
    x40 = x38*x_1_3
    x41 = x34*x_0_4
    x42 = x36*x_0_4
    x43 = 4*x_1_3
    x44 = x43*x_1_2
    x45 = 4*x_1_2
    x46 = 4*x_1_4
    x47 = x36*x_2_4
    x48 = 4*x25
    return -x0*x4 - x0*x6 - x1*x_0_3 - x1*x_0_4 - x1*x_1_3 - x1*x_1_4 - x1*x_2_3 - x1*x_2_4 - x10*x_1_3 - x10*x_1_4 - x10*x_2_3 - x10*x_2_4 - x11*x2 - x11*x36 - x11*x43 - x11*x46 - x12*x_1_4 - x12*x_2_3 - x12*x_3_4 - x13*x_2_4 - x13*x_3_4 - x14*x15 - x14*x2 - x14*x30 - x14*x38 - x14*x43 - x14*x45 - x14*x46 - x15*x18 - x15*x26 - x15*x4 - x16*x_1_2 - x16*x_1_3 - x17*x25 - x17*x6 - x18*x27 - x18*x34 - x18*x36 - x19*x_0_3 - x19*x_0_4 - x19*x_2_3 - x2*x3 - x20*x_1_2 - x20*x_1_4 - x20*x_2_3 - x21*x_0_4 - x21*x_1_4 - x21*x_2_4 - x22*x_1_3 - x22*x_1_4 - x22*x_2_3 - x22*x_2_4 - x23*x_1_2 - x23*x_1_3 - x23*x_1_4 - x24*x_1_3 - x24*x_2_4 - x25*x43 - x25*x45 - 6*x25*x_0_4 - x26*x38 - x26*x43 - x27*x4 - x27*x6 - x28*x_1_3 - x28*x_2_3 - x28*x_2_4 - x29*x_0_4 - x29*x_1_3 - x29*x_3_4 - x30*x_2_3*x_3_4 - x31*x_1_3 - x31*x_2_3 - x32*x_0_3 - x32*x_0_4 - x33*x_2_3 - x33*x_3_4 - x35*x_2_3 - x35*x_2_4 - x36*x_1_3*x_3_4 - x37*x_1_3 - x37*x_2_3 - x38*x_1_4*x_3_4 - x39*x_1_4 - x39*x_2_4 - x40*x_1_4 - x40*x_3_4 - x41*x_2_3 - x41*x_2_4 - x42*x_2_4 - x42*x_3_4 - x44*x_1_4 - x44*x_2_4 - x47*x_1_2 - x47*x_1_3 - x48*x_2_4 - x48*x_3_4 - x5*x_1_2 - x5*x_2_3 - x5*x_3_4 - x7*x_0_3 - x7*x_1_3 - x7*x_2_3 - x8*x_1_2 - x8*x_1_3 - x8*x_2_4 - x8*x_3_4 - x9*x_0_4 - x9*x_1_4 - x9*x_3_4 + 9*x_0_1*x_0_2 + 9*x_0_1*x_0_3 + 9*x_0_1*x_0_4 + 9*x_0_1*x_1_2 + 9*x_0_1*x_1_3 + 9*x_0_1*x_1_4 + 12*x_0_1*x_2_3 + 12*x_0_1*x_2_4 + 12*x_0_1*x_3_4 - 12*x_0_1 + 9*x_0_2*x_0_3 + 9*x_0_2*x_0_4 + 9*x_0_2*x_1_2 + 12*x_0_2*x_1_3 + 12*x_0_2*x_1_4 + 9*x_0_2*x_2_3 + 9*x_0_2*x_2_4 + 12*x_0_2*x_3_4 - 12*x_0_2 + 9*x_0_3*x_0_4 + 12*x_0_3*x_1_2 + 9*x_0_3*x_1_3 + 12*x_0_3*x_1_4 + 9*x_0_3*x_2_3 + 12*x_0_3*x_2_4 + 9*x_0_3*x_3_4 - 12*x_0_3 + 12*x_0_4*x_1_2 + 12*x_0_4*x_1_3 + 9*x_0_4*x_1_4 + 12*x_0_4*x_2_3 + 9*x_0_4*x_2_4 + 9*x_0_4*x_3_4 - 12*x_0_4 + 9*x_1_2*x_1_3 + 9*x_1_2*x_1_4 + 9*x_1_2*x_2_3 + 9*x_1_2*x_2_4 + 12*x_1_2*x_3_4 - 12*x_1_2 + 9*x_1_3*x_1_4 + 9*x_1_3*x_2_3 + 12*x_1_3*x_2_4 + 9*x_1_3*x_3_4 - 12*x_1_3 + 12*x_1_4*x_2_3 + 9*x_1_4*x_2_4 + 9*x_1_4*x_3_4 - 12*x_1_4 + 9*x_2_3*x_2_4 + 9*x_2_3*x_3_4 - 12*x_2_3 + 9*x_2_4*x_3_4 - 12*x_2_4 - 12*x_3_4 + 10



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 6*x_2_4
    x1 = 6*x_3_4
    x2 = -12*x_3_4
    x3 = -9*x_0_3
    x4 = -9*x_0_4
    x5 = -9*x_1_2
    x6 = 4*x_0_3
    x7 = x6*x_0_4
    x8 = x6*x_1_2
    x9 = x6*x_3_4
    x10 = 4*x_0_4
    x11 = x10*x_1_2
    x12 = x10*x_3_4
    x13 = 4*x_1_2
    x14 = x13*x_1_3
    x15 = x13*x_1_4
    x16 = x13*x_2_3
    x17 = x13*x_2_4
    x18 = 4*x_1_3
    x19 = x18*x_2_3
    x20 = 4*x_1_4
    x21 = x20*x_2_4
    x22 = x1*x_1_2
    x23 = x0*x_1_3
    x24 = 6*x_2_3
    x25 = x24*x_1_4
    x26 = x11 + x12 + x14 + x15 + x16 + x17 + x19 + x2 + x21 + x22 + x23 + x25 + x3 + x4 + x5 + x7 + x8 + x9 + 12
    x27 = -12*x_2_4
    x28 = -9*x_0_2
    x29 = -9*x_1_3
    x30 = 4*x_0_2
    x31 = x30*x_0_4
    x32 = x30*x_1_3
    x33 = x30*x_2_4
    x34 = x10*x_1_3
    x35 = x10*x_2_4
    x36 = x18*x_1_4
    x37 = x18*x_3_4
    x38 = x20*x_3_4
    x39 = x27 + x28 + x29 + x31 + x32 + x33 + x34 + x35 + x36 + x37 + x38
    x40 = -12*x_2_3
    x41 = -9*x_1_4
    x42 = x30*x_0_3
    x43 = x30*x_1_4
    x44 = x30*x_2_3
    x45 = x6*x_1_4
    x46 = x6*x_2_3
    x47 = x40 + x41 + x42 + x43 + x44 + x45 + x46
    x48 = x0*x_0_3 + x1*x_0_2 + x24*x_0_4
    x49 = 6*x_1_4
    x50 = -12*x_1_4
    x51 = x6*x_2_4
    x52 = x1*x_0_1
    x53 = x49*x_0_3
    x54 = 6*x_0_4
    x55 = x54*x_1_3
    x56 = x50 + x51 + x52 + x53 + x55
    x57 = -12*x_1_3
    x58 = x10*x_2_3
    x59 = x57 + x58
    x60 = -9*x_0_1
    x61 = -9*x_2_3
    x62 = x10*x_0_1
    x63 = x20*x_0_1
    x64 = 4*x_0_1
    x65 = x10*x_1_4
    x66 = 4*x_2_3
    x67 = x66*x_2_4
    x68 = x66*x_3_4
    x69 = 4*x_2_4*x_3_4
    x70 = x60 + x61 + x62 + x63 + x64*x_2_3 + x65 + x67 + x68 + x69
    x71 = -9*x_2_4
    x72 = x6*x_0_1
    x73 = x18*x_0_1
    x74 = x6*x_1_3
    x75 = x64*x_2_4 + x71 + x72 + x73 + x74
    x76 = x70 + x75
    x77 = -9*x_3_4
    x78 = x30*x_0_1
    x79 = x13*x_0_1
    x80 = x30*x_1_2
    x81 = x30*x_3_4
    x82 = x0*x_0_1
    x83 = x49*x_0_2
    x84 = x54*x_1_2
    x85 = x77 + x78 + x79 + x80 + x81 + x82 + x83 + x84 + 12
    x86 = x64*x_3_4
    x87 = x70 + x86
    x88 = -12*x_1_2
    x89 = x14 + x16 + x19 + x4
    x90 = x58 + x88 + x89
    x91 = x22 + x23 + x25
    x92 = 6*x_1_3
    x93 = x15 + x17 + x21 + x3
    x94 = x77 + x78 + x79 + x80 + x93
    x95 = x24*x_0_1
    x96 = x92*x_0_2
    x97 = 6*x_0_3
    x98 = x97*x_1_2
    x99 = x51 + x95 + x96 + x98
    x100 = x28 + x36 + x37 + x38 + 12
    x101 = x100 + x81
    x102 = x60 + x67 + x68 + x69 + x75 + x86
    x103 = -12*x_0_4
    x104 = x20*x_2_3
    x105 = x103 + x104 + x41 + x42 + x44 + x46 + x48
    x106 = -12*x_0_3
    x107 = x18*x_2_4
    x108 = x106 + x107 + x29 + x31 + x33 + x35
    x109 = x43 + x52 + x53 + x55
    x110 = x12 + x13*x_3_4 + x5 + x7 + x9
    x111 = x110 + x8
    x112 = -12*x_0_2
    x113 = x112 + x45 + x82 + x83 + x84 + 12
    x114 = x11 + x110 + x77 + x78 + x79 + x80 + x89 + x95 + x96 + x98
    x115 = -12*x_0_1
    x116 = x107 + x115 + x29 + x31 + x33 + x35 + x71 + x72 + x73 + x74 + x93
    x117 = x104 + x41 + x42 + x44 + x46 + x61 + x62 + x63 + x65
    x118 = 6*x_0_1
    return np.array([-x0*x_2_3 - x1*x_2_3 - x1*x_2_4 - x26 - x39 - x47 - x48,
        -x1*x_1_3 - x1*x_1_4 - x26 - x49*x_1_3 - x56 - x59 - x76,
        -x0*x_1_2 - x0*x_1_4 - x39 - x49*x_1_2 - x50 - x85 - x87 - x90 - x91,
        -x101 - x102 - x24*x_1_2 - x24*x_1_3 - x47 - x57 - x88 - x91 - x92*x_1_2 - x94 - x99,
        -x1*x_0_3 - x1*x_0_4 - x100 - x105 - x108 - x109 - x2 - x32 - x54*x_0_3 - x76,
        -x0*x_0_2 - x0*x_0_4 - x105 - x111 - x113 - x27 - x54*x_0_2 - x87 - x94,
        -x102 - x108 - x112 - x114 - x24*x_0_2 - x24*x_0_3 - x34 - x40 - x48 - x97*x_0_2 - 12,
        -x103 - x111 - x116 - x28 - x32 - x36 - x37 - x38 - x49*x_0_1 - x49*x_0_4 - x54*x_0_1 - x56 - x85,
        -x101 - x106 - x109 - x114 - x115 - x117 - x59 - x92*x_0_1 - x92*x_0_3 - x97*x_0_1,
        -x113 - x116 - x117 - x118*x_0_2 - x118*x_1_2 - x34 - x90 - x99 - 6*x_0_2*x_1_2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_3 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 4*x_0_4
    x1 = 4*x_1_4
    x2 = 4*x_2_3
    x3 = x0 + x1 + x2 - 9
    x4 = 4*x_0_3
    x5 = 4*x_1_3
    x6 = 4*x_2_4
    x7 = x4 + x5 + x6
    x8 = -x3 - x7 - 6*x_3_4
    x9 = 4*x_0_2
    x10 = 4*x_1_2
    x11 = 4*x_3_4
    x12 = x10 + x11
    x13 = x12 + x9
    x14 = -x13 - x3 - 6*x_2_4
    x15 = -x13 - x7 - 6*x_2_3 + 9
    x16 = 2*x_1_3
    x17 = 3*x_2_4
    x18 = x16 + x17
    x19 = 2*x_0_2
    x20 = 2*x_1_2
    x21 = 3*x_3_4
    x22 = x20 + x21 - 6
    x23 = x19 + x22
    x24 = 3*x_0_4
    x25 = 2*x_0_3
    x26 = 3*x_1_4
    x27 = x25 + x26
    x28 = x24 + x27
    x29 = -2*x18 - 2*x23 - 2*x28
    x30 = 2*x_1_4
    x31 = 3*x_2_3
    x32 = x30 + x31
    x33 = 3*x_0_3
    x34 = 2*x_0_4
    x35 = 3*x_1_3
    x36 = x34 + x35
    x37 = x33 + x36
    x38 = -2*x23 - 2*x32 - 2*x37
    x39 = 3*x_0_2
    x40 = 3*x_1_2 - 6
    x41 = x18 + x34 + x39 + x40
    x42 = x25 + x32
    x43 = -2*x41 - 2*x42
    x44 = 4*x_0_1
    x45 = x12 + x44 - 9
    x46 = x0 + x5
    x47 = -x45 - x46 - x6 - 6*x_1_4
    x48 = x1 + x2
    x49 = -x4 - x45 - x48 - 6*x_1_3
    x50 = 2*x_2_3
    x51 = 2*x_0_1
    x52 = x22 + x51
    x53 = -2*x17 - 2*x28 - 2*x50 - 2*x52
    x54 = 2*x_2_4
    x55 = -2*x31 - 2*x37 - 2*x52 - 2*x54
    x56 = 3*x_0_1
    x57 = x50 + x56
    x58 = x54 + x57
    x59 = x36 + x40
    x60 = -2*x27 - 2*x58 - 2*x59
    x61 = x9 - 9
    x62 = x44 + x61
    x63 = x6 + x62
    x64 = -x48 - x5 - x63 - 6*x_1_2
    x65 = x19 + x26
    x66 = x24 - 6
    x67 = x21 + x51
    x68 = -2*x18 - 2*x50 - 2*x65 - 2*x66 - 2*x67
    x69 = 2*x_3_4
    x70 = x51 + x69
    x71 = -2*x31 - 2*x41 - 2*x70
    x72 = x57 + x69
    x73 = -2*x59 - 2*x65 - 2*x72
    x74 = x33 + x54
    x75 = x19 + x35
    x76 = -2*x32 - 2*x67 - 2*x74 - 2*x75 + 12
    x77 = -2*x17 - 2*x39 - 2*x40 - 2*x42 - 2*x70
    x78 = x56 + x69
    x79 = -2*x27 - 2*x40 - 2*x54 - 2*x75 - 2*x78
    x80 = x1 + x4
    x81 = -x11 - x63 - x80 - 6*x_0_4
    x82 = -x11 - x2 - x46 - x62 - 6*x_0_3
    x83 = x16 + x39 + x66
    x84 = x30 + x33
    x85 = -2*x58 - 2*x83 - 2*x84
    x86 = -x0 - x10 - x2 - x4 - x44 - x6 - 6*x_0_2 + 9
    x87 = -2*x20 - 2*x39 - 2*x66 - 2*x72 - 2*x84
    x88 = -2*x20 - 2*x74 - 2*x78 - 2*x83
    x89 = -x10 - x46 - x61 - x80 - 6*x_0_1
    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = x8
    hessian[0, 2] = x14
    hessian[0, 3] = x15
    hessian[0, 4] = x8
    hessian[0, 5] = x14
    hessian[0, 6] = x15
    hessian[0, 7] = x29
    hessian[0, 8] = x38
    hessian[0, 9] = x43
    hessian[1, 0] = x8
    hessian[1, 1] = 0
    hessian[1, 2] = x47
    hessian[1, 3] = x49
    hessian[1, 4] = x8
    hessian[1, 5] = x53
    hessian[1, 6] = x55
    hessian[1, 7] = x47
    hessian[1, 8] = x49
    hessian[1, 9] = x60
    hessian[2, 0] = x14
    hessian[2, 1] = x47
    hessian[2, 2] = 0
    hessian[2, 3] = x64
    hessian[2, 4] = x68
    hessian[2, 5] = x14
    hessian[2, 6] = x71
    hessian[2, 7] = x47
    hessian[2, 8] = x73
    hessian[2, 9] = x64
    hessian[3, 0] = x15
    hessian[3, 1] = x49
    hessian[3, 2] = x64
    hessian[3, 3] = 0
    hessian[3, 4] = x76
    hessian[3, 5] = x77
    hessian[3, 6] = x15
    hessian[3, 7] = x79
    hessian[3, 8] = x49
    hessian[3, 9] = x64
    hessian[4, 0] = x8
    hessian[4, 1] = x8
    hessian[4, 2] = x68
    hessian[4, 3] = x76
    hessian[4, 4] = 0
    hessian[4, 5] = x81
    hessian[4, 6] = x82
    hessian[4, 7] = x81
    hessian[4, 8] = x82
    hessian[4, 9] = x85
    hessian[5, 0] = x14
    hessian[5, 1] = x53
    hessian[5, 2] = x14
    hessian[5, 3] = x77
    hessian[5, 4] = x81
    hessian[5, 5] = 0
    hessian[5, 6] = x86
    hessian[5, 7] = x81
    hessian[5, 8] = x87
    hessian[5, 9] = x86
    hessian[6, 0] = x15
    hessian[6, 1] = x55
    hessian[6, 2] = x71
    hessian[6, 3] = x15
    hessian[6, 4] = x82
    hessian[6, 5] = x86
    hessian[6, 6] = 0
    hessian[6, 7] = x88
    hessian[6, 8] = x82
    hessian[6, 9] = x86
    hessian[7, 0] = x29
    hessian[7, 1] = x47
    hessian[7, 2] = x47
    hessian[7, 3] = x79
    hessian[7, 4] = x81
    hessian[7, 5] = x81
    hessian[7, 6] = x88
    hessian[7, 7] = 0
    hessian[7, 8] = x89
    hessian[7, 9] = x89
    hessian[8, 0] = x38
    hessian[8, 1] = x49
    hessian[8, 2] = x73
    hessian[8, 3] = x49
    hessian[8, 4] = x82
    hessian[8, 5] = x87
    hessian[8, 6] = x82
    hessian[8, 7] = x89
    hessian[8, 8] = 0
    hessian[8, 9] = x89
    hessian[9, 0] = x43
    hessian[9, 1] = x60
    hessian[9, 2] = x64
    hessian[9, 3] = x64
    hessian[9, 4] = x85
    hessian[9, 5] = x86
    hessian[9, 6] = x86
    hessian[9, 7] = x89
    hessian[9, 8] = x89
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_4 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5(x_vec):
    """Calculates the value of S_4 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 8*x_0_1
    x1 = 8*x_0_2
    x2 = 8*x_0_3
    x3 = 8*x_0_4
    x4 = 8*x_1_2
    x5 = 8*x_1_3
    x6 = 8*x_1_4
    x7 = 9*x_0_1
    x8 = 12*x_0_1
    x9 = x8*x_2_3
    x10 = x8*x_2_4
    x11 = x8*x_3_4
    x12 = 9*x_0_2
    x13 = 12*x_0_2
    x14 = x13*x_1_3
    x15 = x13*x_1_4
    x16 = x13*x_3_4
    x17 = 9*x_0_3
    x18 = 12*x_0_3
    x19 = x18*x_1_2
    x20 = x18*x_1_4
    x21 = x18*x_2_4
    x22 = 12*x_0_4
    x23 = x22*x_1_2
    x24 = x22*x_1_3
    x25 = 9*x_0_4
    x26 = x22*x_2_3
    x27 = 9*x_1_2
    x28 = x_1_2*x_3_4
    x29 = 9*x_1_3
    x30 = x_1_3*x_2_4
    x31 = x_1_4*x_2_3
    x32 = 9*x_1_4
    x33 = 9*x_2_3
    x34 = x_2_4*x_3_4
    x35 = x0*x_0_2
    x36 = x0*x_0_3
    x37 = x0*x_0_4
    x38 = x0*x_1_2
    x39 = x0*x_1_3
    x40 = x0*x_1_4
    x41 = x1*x_0_3
    x42 = x1*x_0_4
    x43 = x1*x_1_2
    x44 = x1*x_2_3
    x45 = x_1_4*x_2_4
    x46 = x2*x_0_4
    x47 = x2*x_1_2
    x48 = x2*x_1_3
    x49 = x2*x_3_4
    x50 = x_2_3*x_2_4
    x51 = x3*x_1_2
    x52 = x3*x_1_3
    x53 = x3*x_3_4
    x54 = x4*x_1_3
    x55 = x4*x_3_4
    x56 = x_2_3*x_3_4
    x57 = 5*x_0_1
    x58 = x57*x_0_2
    x59 = x_0_3*x_0_4
    x60 = x58*x_0_3
    x61 = x58*x_0_4
    x62 = x58*x_1_3
    x63 = x_1_4*x_3_4
    x64 = x57*x59
    x65 = x57*x_0_3
    x66 = x_1_2*x_1_4
    x67 = x_1_2*x_2_4
    x68 = x57*x_0_4
    x69 = x_1_2*x_1_3
    x70 = x68*x_2_3
    x71 = x57*x_1_3
    x72 = x57*x_1_2
    x73 = x28*x57
    x74 = x30*x57
    x75 = x31*x57
    x76 = x34*x_1_4
    x77 = 5*x_0_2
    x78 = x59*x77
    x79 = x77*x_0_3
    x80 = x79*x_1_3
    x81 = x77*x_0_4
    x82 = x81*x_2_3
    x83 = x81*x_1_3
    x84 = x77*x_1_3
    x85 = x77*x_1_2
    x86 = x28*x77
    x87 = x30*x77
    x88 = x31*x77
    x89 = 5*x59
    x90 = x89*x_2_3
    x91 = 5*x_0_3
    x92 = x91*x_1_3
    x93 = x91*x_1_2
    x94 = x28*x91
    x95 = x30*x91
    x96 = x31*x91
    x97 = 5*x_0_4
    x98 = x97*x_1_3
    x99 = x97*x_1_2
    x100 = x28*x97
    x101 = x30*x97
    x102 = x31*x97
    return -x0 - x1*x34 - x1*x45 - x1 - x10*x_0_3 - x10*x_1_3 + x10 + x100*x_1_4 + x100*x_2_3 + x101*x_1_4 + x101*x_2_3 + x102*x_2_4 + x102*x_3_4 - x11*x_0_2 - x11*x_1_2 + x11 + x12*x_0_3 + x12*x_0_4 + x12*x_1_2 + x12*x_2_3 + x12*x_2_4 - x14*x_0_4 - x14*x_1_4 - x14*x_2_4 - x14*x_3_4 + x14 - x15*x_0_3 - x15*x_2_3 - x15*x_3_4 + x15 - x16*x_1_2 + x16 + x17*x_0_4 + x17*x_1_3 + x17*x_2_3 + x17*x_3_4 - x19*x_0_4 - x19*x_1_4 - x19*x_2_4 - x19*x_3_4 + x19 - x2*x34 - x2*x50 - x2 - x20*x_2_3 - x20*x_2_4 + x20 - x21*x_1_3 + x21 - x23*x_1_3 - x23*x_2_3 - x23*x_3_4 + x23 - x24*x_2_3 - x24*x_2_4 + x24 + x25*x_1_4 + x25*x_2_4 + x25*x_3_4 - x26*x_1_4 + x26 + x27*x_1_3 + x27*x_1_4 + x27*x_2_3 + x27*x_2_4 + x28*x65 + x28*x68 + x28*x71 + x28*x79 + x28*x81 + x28*x84 + x28*x92 + x28*x98 + 12*x28 + x29*x_1_4 + x29*x_2_3 + x29*x_3_4 - x3*x34 - x3*x45 - x3*x50 - x3 - x30*x4 + x30*x58 + x30*x68 + x30*x72 + x30*x79 + x30*x85 + x30*x89 + x30*x93 + x30*x99 + 12*x30 - x31*x4 - x31*x5 + x31*x58 + x31*x65 + x31*x71 + x31*x72 + x31*x81 + x31*x84 + x31*x85 + x31*x89 + x31*x92 + x31*x93 + x31*x98 + x31*x99 + 12*x31 + x32*x_2_4 + x32*x_3_4 + x33*x_2_4 + x33*x_3_4 - x34*x4 - x34*x5 + x34*x58 - x34*x6 + x34*x65 + x34*x68 + x34*x71 + x34*x72 - x34*x8 + x34*x84 + x34*x85 + x34*x92 + x34*x93 + x34*x98 + x34*x99 + 9*x34 - x35*x_0_3 - x35*x_0_4 - x35*x_1_3 - x35*x_1_4 - x35*x_2_3 - x35*x_2_4 - x36*x_0_4 - x36*x_1_2 - x36*x_1_4 - x36*x_2_3 - x36*x_3_4 - x37*x_1_2 - x37*x_1_3 - x37*x_2_4 - x37*x_3_4 - x38*x_1_3 - x38*x_1_4 - x38*x_2_3 - x38*x_2_4 - x39*x_1_4 - x39*x_2_3 - x39*x_3_4 - x4*x50 - x4 - x40*x_2_4 - x40*x_3_4 - x41*x_0_4 - x41*x_1_2 - x41*x_1_3 - x41*x_2_4 - x41*x_3_4 - x42*x_1_2 - x42*x_1_4 - x42*x_2_3 - x42*x_3_4 - x43*x_1_3 - x43*x_1_4 - x43*x_2_3 - x43*x_2_4 - x44*x_1_3 - x44*x_2_4 - x44*x_3_4 - x45*x5 + x45*x65 + x45*x79 + x45*x89 - x46*x_1_3 - x46*x_1_4 - x46*x_2_3 - x46*x_2_4 - x47*x_1_3 - x47*x_2_3 - x48*x_1_4 - x48*x_2_3 - x48*x_3_4 - x49*x_1_4 - x49*x_2_3 - x5*x50 - x5*x56 - x5 + x50*x58 - x50*x6 + x50*x65 + x50*x68 + x50*x72 + x50*x85 + x50*x93 + x50*x99 - x51*x_1_4 - x51*x_2_4 - x52*x_1_4 - x52*x_3_4 - x53*x_1_4 - x53*x_2_3 - x54*x_1_4 - x54*x_3_4 - x55*x_1_4 - x55*x_2_3 + x56*x58 - x56*x6 + x56*x65 + x56*x68 + x56*x71 + x56*x84 + x56*x92 + x56*x98 + x57*x76 + x58*x59 + x58*x63 - x6 + x60*x_1_4 + x60*x_2_4 + x60*x_3_4 + x61*x_1_3 + x61*x_2_3 + x61*x_3_4 + x62*x_1_4 + x62*x_3_4 + x63*x79 + x63*x81 + x64*x_1_2 + x64*x_2_3 + x64*x_2_4 + x65*x66 + x65*x67 + x66*x71 + x66*x79 + x66*x84 + x66*x89 + x66*x92 + x66*x98 + x67*x79 + x67*x89 + x68*x69 + x69*x81 + x69*x89 + x7*x_0_2 + x7*x_0_3 + x7*x_0_4 + x7*x_1_2 + x7*x_1_3 + x7*x_1_4 + x70*x_1_2 + x70*x_1_3 + x73*x_1_4 + x73*x_2_3 + x74*x_1_4 + x74*x_2_3 + x75*x_2_4 + x75*x_3_4 + x76*x77 + x76*x91 + x76*x97 + x78*x_1_2 + x78*x_1_3 + x78*x_1_4 + x80*x_1_4 + x80*x_3_4 + x82*x_1_2 + x82*x_1_3 + x83*x_1_4 + x83*x_3_4 + x86*x_1_4 + x86*x_2_3 + x87*x_1_4 + x87*x_2_3 + x88*x_2_4 + x88*x_3_4 - x9*x_0_4 - x9*x_1_4 - x9*x_2_4 - x9*x_3_4 + x9 + x90*x_1_2 + x90*x_1_3 + x94*x_1_4 + x94*x_2_3 + x95*x_1_4 + x95*x_2_3 + x96*x_2_4 + x96*x_3_4 - 8*x_2_3 - 8*x_2_4 - 8*x_3_4 + 5



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 12*x_2_3
    x1 = 12*x_2_4
    x2 = 9*x_0_2
    x3 = 9*x_0_3
    x4 = 9*x_1_2
    x5 = 9*x_1_3
    x6 = 8*x_0_2
    x7 = -x6*x_0_4
    x8 = -x6*x_1_3
    x9 = -x6*x_2_4
    x10 = 8*x_0_3
    x11 = -x10*x_0_4
    x12 = -x10*x_1_2
    x13 = -x10*x_3_4
    x14 = 8*x_0_4
    x15 = -x14*x_2_4
    x16 = -x14*x_3_4
    x17 = 8*x_1_2
    x18 = -x17*x_1_4
    x19 = -x17*x_2_4
    x20 = 8*x_1_3
    x21 = -x20*x_1_4
    x22 = -x20*x_3_4
    x23 = 8*x_1_4
    x24 = -x23*x_2_4
    x25 = -x23*x_3_4
    x26 = 5*x_0_2
    x27 = x26*x_0_4
    x28 = x27*x_1_3
    x29 = x26*x_1_3
    x30 = x29*x_1_4
    x31 = x29*x_2_4
    x32 = x29*x_3_4
    x33 = x26*x_1_4
    x34 = x33*x_3_4
    x35 = 5*x_0_3
    x36 = x35*x_0_4
    x37 = x36*x_1_2
    x38 = x35*x_1_2
    x39 = x38*x_1_4
    x40 = x38*x_2_4
    x41 = x38*x_3_4
    x42 = x35*x_1_4
    x43 = x42*x_2_4
    x44 = 5*x_0_4
    x45 = x44*x_1_2
    x46 = x45*x_3_4
    x47 = x44*x_1_3
    x48 = x47*x_2_4
    x49 = x11 + x12 + x13 + x15 + x16 + x18 + x19 + x2 + x21 + x22 + x24 + x25 + x28 + x3 + x30 + x31 + x32 + x34 + x37 + x39 + x4 + x40 + x41 + x43 + x46 + x48 + x5 + x7 + x8 + x9 - 8
    x50 = 9*x_0_4
    x51 = 9*x_1_4
    x52 = -x6*x_0_3
    x53 = -x6*x_1_4
    x54 = -x6*x_2_3
    x55 = -x10*x_2_3
    x56 = -x14*x_1_2
    x57 = -x17*x_1_3
    x58 = -x17*x_2_3
    x59 = -x20*x_2_3
    x60 = x26*x_0_3
    x61 = x60*x_1_4
    x62 = x33*x_2_3
    x63 = x42*x_2_3
    x64 = x45*x_1_3
    x65 = x45*x_2_3
    x66 = x47*x_2_3
    x67 = x50 + x51 + x52 + x53 + x54 + x55 + x56 + x57 + x58 + x59 + x61 + x62 + x63 + x64 + x65 + x66
    x68 = -x10*x_1_4
    x69 = -x14*x_1_3
    x70 = x68 + x69
    x71 = 12*x_3_4
    x72 = -x71*x_1_2
    x73 = -x1*x_1_3
    x74 = -x0*x_1_4
    x75 = 5*x_1_2
    x76 = x75*x_1_3
    x77 = x76*x_1_4
    x78 = x76*x_2_4
    x79 = x76*x_3_4
    x80 = x75*x_1_4
    x81 = x80*x_2_3
    x82 = x80*x_3_4
    x83 = x75*x_2_3
    x84 = x83*x_2_4
    x85 = x83*x_3_4
    x86 = x_2_4*x_3_4
    x87 = x75*x86
    x88 = 5*x_1_3
    x89 = x88*x_1_4
    x90 = x89*x_2_3
    x91 = x89*x_2_4
    x92 = x88*x_2_3
    x93 = x92*x_2_4
    x94 = x92*x_3_4
    x95 = x86*x88
    x96 = 5*x_1_4
    x97 = x96*x_2_3
    x98 = x97*x_2_4
    x99 = x97*x_3_4
    x100 = x86*x96
    x101 = x100 + x71 + x72 + x73 + x74 + x77 + x78 + x79 + x81 + x82 + x84 + x85 + x87 + x90 + x91 + x93 + x94 + x95 + x98 + x99
    x102 = x26*x_2_3
    x103 = x35*x_2_3
    x104 = x44*x_2_3
    x105 = -x0*x_0_4 - x1*x_0_3 + x102*x_2_4 + x102*x_3_4 + x103*x_2_4 + x103*x_3_4 + x104*x_2_4 + x104*x_3_4 + x26*x86 + x27*x_2_3 + x27*x_3_4 + x35*x86 + x36*x_2_3 + x36*x_2_4 + x44*x86 + x60*x_0_4 + x60*x_2_4 + x60*x_3_4 - x71*x_0_2
    x106 = x1 + x105
    x107 = 12*x_1_3
    x108 = 9*x_0_1
    x109 = 9*x_2_3
    x110 = 12*x_1_4
    x111 = -x14*x_0_1
    x112 = -x23*x_0_1
    x113 = 8*x_0_1
    x114 = -x113*x_2_3
    x115 = -x14*x_1_4
    x116 = -x14*x_2_3
    x117 = 8*x_2_3
    x118 = -x117*x_2_4
    x119 = -x117*x_3_4
    x120 = -8*x86
    x121 = x104*x_0_1
    x122 = x97*x_0_1
    x123 = x_0_1*x_2_4
    x124 = 5*x_2_3
    x125 = x123*x124
    x126 = x_0_1*x_3_4
    x127 = x124*x126
    x128 = 5*x86*x_0_1
    x129 = x104*x_1_4
    x130 = x108 + x109 + x110 + x111 + x112 + x114 + x115 + x116 + x118 + x119 + x120 + x121 + x122 + x125 + x127 + x128 + x129 + x50 + x57 + x58 + x59 + x64 + x65 + x66 - 8
    x131 = 9*x_2_4
    x132 = -x10*x_0_1
    x133 = -x20*x_0_1
    x134 = -x113*x_2_4
    x135 = -x10*x_1_3
    x136 = -x10*x_2_4
    x137 = x35*x_0_1
    x138 = x137*x_2_4
    x139 = x123*x88
    x140 = x35*x_1_3
    x141 = x140*x_2_4
    x142 = x107 + x131 + x132 + x133 + x134 + x135 + x136 + x138 + x139 + x141 + x18 + x19 + x24 + x3 + x39 + x40 + x43
    x143 = x44*x_1_4
    x144 = -x107*x_0_4 - x110*x_0_3 + x126*x44 + x126*x88 + x126*x96 + x137*x_3_4 + x140*x_3_4 + x143*x_3_4 + x36*x_0_1 + x36*x_1_3 + x36*x_1_4 + x42*x_0_1 + x42*x_1_3 + x42*x_3_4 + x47*x_0_1 + x47*x_1_4 + x47*x_3_4 - x71*x_0_1 + x89*x_0_1
    x145 = x11 + x12 + x13 + x16 + x37 + x4 + x41 + x46
    x146 = x15 + x2 + x21 + x22 + x25 + x28 + x30 + x31 + x32 + x34 + x48 + x5 + x7 + x8 + x9
    x147 = -x113*x_3_4
    x148 = x147 + x69
    x149 = 9*x_3_4
    x150 = -x6*x_0_1
    x151 = -x17*x_0_1
    x152 = -x6*x_1_2
    x153 = x126*x26
    x154 = x126*x75
    x155 = x26*x_1_2
    x156 = x155*x_3_4
    x157 = x149 + x150 + x151 + x152 + x153 + x154 + x156 - x6*x_3_4
    x158 = 12*x_1_2
    x159 = -x1*x_0_1 - x110*x_0_2 + x123*x26 + x123*x44 + x123*x75 + x123*x96 + x143*x_2_4 + x155*x_2_4 - x158*x_0_4 + x27*x_0_1 + x27*x_1_2 + x27*x_1_4 + x33*x_0_1 + x33*x_1_2 + x33*x_2_4 + x45*x_0_1 + x45*x_1_4 + x45*x_2_4 + x80*x_0_1
    x160 = x157 + x159
    x161 = x100 + x158 + x72 + x73 + x74 + x77 + x78 + x79 + x81 + x82 + x84 + x85 + x87 + x90 + x91 + x93 + x94 + x95 + x98 + x99
    x162 = x108 + x118 + x119 + x120 + x125 + x127 + x128 + x51 + x52 + x53 + x54 + x55 + x61 + x62 + x63 - 8
    x163 = x147 + x68
    x164 = -x0*x_0_1 + x102*x_0_1 + x102*x_1_2 + x103*x_0_1 + x103*x_1_3 - x107*x_0_2 - x158*x_0_3 + x29*x_0_1 + x29*x_1_2 + x29*x_2_3 + x38*x_0_1 + x38*x_1_3 + x38*x_2_3 + x60*x_0_1 + x60*x_1_2 + x60*x_1_3 + x76*x_0_1 + x83*x_0_1 + x92*x_0_1
    x165 = x0 + x164
    x166 = x157 + x2 + x21 + x22 + x25 + x30 + x32 + x34
    x167 = 12*x_0_3
    x168 = 12*x_0_4
    x169 = -x23*x_2_3
    x170 = x109 + x111 + x112 + x114 + x115 + x121 + x122 + x129 + x168 + x169
    x171 = -x20*x_2_4
    x172 = x131 + x132 + x133 + x135 + x138 + x139 + x141 + x144 + x171
    x173 = x105 + x134 + x167
    x174 = 12*x_0_2
    x175 = -x17*x_3_4
    x176 = x175 - 8
    x177 = x108 + x118 + x119 + x120 + x125 + x127 + x128 + x149 + x150 + x151 + x152 + x153 + x154 + x156 + x174 + x176
    x178 = x159 + x18 + x19 + x24 + x3 + x39 + x40 + x43 + x51 + x52 + x54 + x55 + x61 + x62 + x63
    x179 = x11 + x13 + x16 + x37 + x4 + x41 + x46
    x180 = x131 + x132 + x133 + x135 + x138 + x139 + x141 + x15 + x171 + x28 + x31 + x48 + x5 + x50 + x57 + x58 + x59 + x64 + x65 + x66 + x7 + x9
    x181 = 12*x_0_1
    x182 = x136 + x181
    x183 = x109 + x111 + x112 + x115 + x116 + x121 + x122 + x129 + x164 + x169
    return np.array([-x0*x_2_4 - x0*x_3_4 + x0 - x1*x_3_4 + x101 + x106 + x49 + x67 + x70,
        x101 - x107*x_1_4 + x130 + x142 + x144 + x145 + x56 - x71*x_1_3 - x71*x_1_4,
        -x1*x_1_2 - x1*x_1_4 + x1 - x110*x_1_2 + x130 + x146 + x148 + x160 + x161,
        -x0*x_1_2 - x0*x_1_3 - x107*x_1_2 + x142 + x161 + x162 + x163 + x165 + x166,
        x146 + x162 - x167*x_0_4 + x170 + x172 + x173 - x71*x_0_3 - x71*x_0_4 + x71,
        -x1*x_0_2 - x1*x_0_4 + x106 + x145 + x163 - x168*x_0_2 + x170 + x177 + x178,
        -x0*x_0_2 - x0*x_0_3 + x148 + x165 - x167*x_0_2 + x173 + x177 + x179 + x180 + x56,
        -x110*x_0_1 - x110*x_0_4 + x110 + x160 - x168*x_0_1 + x168 + x172 + x175 + x182 + x49,
        -x107*x_0_1 - x107*x_0_3 + x107 + x144 + x166 - x167*x_0_1 + x167 + x176 + x179 + x181 + x183 + x67,
        -x158*x_0_1 - x158*x_0_2 + x158 - x174*x_0_1 + x174 + x178 + x180 + x182 + x183 + x70 - 8])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_4 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = -8*x_1_3
    x1 = -8*x_1_4
    x2 = -8*x_2_3
    x3 = -8*x_2_4
    x4 = 5*x_1_3
    x5 = x4*x_2_4
    x6 = 5*x_1_4
    x7 = x6*x_2_3
    x8 = x0 + x1 + x2 + x3 + x5 + x7 + 9
    x9 = -8*x_0_3
    x10 = -8*x_0_4
    x11 = 5*x_0_3
    x12 = x11*x_2_4
    x13 = 5*x_0_4
    x14 = x13*x_2_3
    x15 = x10 + x12 + x14 + x9
    x16 = 5*x_2_3
    x17 = 5*x_2_4
    x18 = x16*x_2_4 + x16*x_3_4 + x17*x_3_4
    x19 = -12*x_3_4
    x20 = x11*x_1_4
    x21 = x13*x_1_3
    x22 = x20 + x21
    x23 = x4*x_1_4 + x4*x_3_4 + x6*x_3_4
    x24 = x11*x_0_4 + x11*x_3_4 + x13*x_3_4
    x25 = x19 + x22 + x23 + x24
    x26 = x15 + x18 + x25 + x8
    x27 = -8*x_1_2
    x28 = 5*x_3_4
    x29 = x28*x_1_2
    x30 = x10 + x14 + x18 + x27 + x29
    x31 = x28*x_0_2
    x32 = x1 + x31 + x7
    x33 = -8*x_3_4
    x34 = x33 + 9
    x35 = x2 + x34
    x36 = -8*x_0_2
    x37 = x6*x_0_2
    x38 = x6*x_1_2
    x39 = x17*x_1_2
    x40 = x6*x_2_4
    x41 = x36 + x37 + x38 + x39 + x40
    x42 = -12*x_2_4
    x43 = x13*x_0_2
    x44 = x17*x_0_2
    x45 = x13*x_1_2
    x46 = x13*x_2_4
    x47 = x43 + x44 + x45 + x46
    x48 = x42 + x47
    x49 = x41 + x48
    x50 = x30 + x32 + x35 + x49
    x51 = x12 + x18 + x27 + x29 + x9
    x52 = x0 + x31 + x36 + x5
    x53 = x3 + x34
    x54 = x4*x_0_2
    x55 = x4*x_1_2
    x56 = x16*x_1_2
    x57 = x4*x_2_3
    x58 = x54 + x55 + x56 + x57
    x59 = -12*x_2_3
    x60 = x11*x_0_2
    x61 = x16*x_0_2
    x62 = x11*x_1_2
    x63 = x11*x_2_3
    x64 = x60 + x61 + x62 + x63
    x65 = x59 + x64
    x66 = x58 + x65
    x67 = x51 + x52 + x53 + x66
    x68 = -12*x_1_4
    x69 = x0 + x68
    x70 = x29 + x9
    x71 = x25 + 12
    x72 = x12 + x5
    x73 = -12*x_0_4
    x74 = x31 + x73
    x75 = x27 + x74
    x76 = x49 + x69 + x70 + x71 + x72 + x75
    x77 = -12*x_0_3
    x78 = -12*x_1_3
    x79 = x27 + x78
    x80 = x10 + x29
    x81 = x14 + x80
    x82 = x32 + x36 + x66 + x71 + x77 + x79 + x81
    x83 = -12*x_1_2
    x84 = x1 + x7
    x85 = -12*x_0_2
    x86 = x15 + x85
    x87 = x38 + x39 + x40
    x88 = x87 + 12
    x89 = x5 + x88
    x90 = x0 + x37
    x91 = x48 + x66 + x83 + x84 + x86 + x89 + x90
    x92 = -8*x_0_1
    x93 = x17*x_0_1
    x94 = x92 + x93
    x95 = x27 + x94
    x96 = x28*x_0_1
    x97 = x21 + x5 + x96
    x98 = x13*x_0_1 + x13*x_1_4 + x6*x_0_1
    x99 = x45 + x98
    x100 = x23 + x80 + x99
    x101 = x100 + x53 + x69 + x87 + x95 + x97
    x102 = x16*x_0_1
    x103 = x102 + x70
    x104 = x35 + x92
    x105 = x20 + x96
    x106 = x105 + x23
    x107 = x11*x_0_1 + x11*x_1_3 + x4*x_0_1
    x108 = x107 + x62
    x109 = x108 + x55 + x56 + x57
    x110 = x103 + x104 + x106 + x109 + x79 + x84
    x111 = x105 + x94
    x112 = x14 + x24
    x113 = x42 + x88
    x114 = x2 + x99
    x115 = x68 + x7
    x116 = x115 + x19 + x73
    x117 = x111 + x112 + x113 + x114 + x116 + x51
    x118 = x12 + x24
    x119 = x109 + x78
    x120 = x102 + x77
    x121 = x59 + 12
    x122 = x120 + x121 + x19 + x3 + x92
    x123 = x118 + x119 + x122 + x30 + x97
    x124 = x102 + x83
    x125 = x22 + x99
    x126 = -12*x_0_1
    x127 = x115 + x126
    x128 = x2 + x3
    x129 = x128 + x93
    x130 = x10 + x119 + x124 + x125 + x127 + x129 + x89 + x9
    x131 = 5*x_0_1
    x132 = x131*x_0_2 + x131*x_1_2 + 5*x_0_2*x_1_2
    x133 = x132 + x94
    x134 = x124 + x58
    x135 = x133 + x134
    x136 = x135 + x41 + x8
    x137 = x18 + x37
    x138 = x21 + x96
    x139 = x138 + 12
    x140 = x139 + x2
    x141 = x43 + x44 + x46 + x98
    x142 = x14 + x141
    x143 = x116 + x137 + x140 + x142 + x23 + x42 + x52 + x94
    x144 = x33 + x85
    x145 = x0 + x144
    x146 = x121 + x135 + x145 + x18 + x31 + x48 + x5 + x81
    x147 = x36 + x37
    x148 = x132 + x33 + x78
    x149 = x100 + x127 + x134 + x140 + x147 + x148
    x150 = x107 + x36 + x60 + x61 + x63
    x151 = x106 + x54
    x152 = x122 + x150 + x151 + x18 + x32 + x72 + x78
    x153 = x103 + x113 + x12 + x133 + x137 + x144 + x32 + x65 + x83
    x154 = x108 + x126
    x155 = x3 + x93
    x156 = x148 + x151 + x154 + x155 + x41 + x5 + x68 + x70 + x83 + 12
    x157 = x1 + x147 + x9
    x158 = x118 + x74
    x159 = x111 + x141 + x157 + x158 + x53
    x160 = x0 + x10 + x54
    x161 = x112 + x120
    x162 = x104 + x138 + x150 + x160 + x161 + x31
    x163 = x1 + x126 + 12
    x164 = x107 + x12 + x120 + x129 + x142 + x163 + x22 + x54 + x60 + x61 + x63 + x73 + x85 + x90
    x165 = x132 + 9
    x166 = x102 + x128 + x165 + x47 + x64 + x86 + x95
    x167 = x105 + x114 + x132 + x144 + x161 + x163 + x37 + x64 + x75
    x168 = x154 + x27
    x169 = x132 + x139 + x145 + x155 + x158 + x168 + x47 + x54 + x77
    x170 = x125 + x157 + x160 + x165 + x168
    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = x26
    hessian[0, 2] = x50
    hessian[0, 3] = x67
    hessian[0, 4] = x26
    hessian[0, 5] = x50
    hessian[0, 6] = x67
    hessian[0, 7] = x76
    hessian[0, 8] = x82
    hessian[0, 9] = x91
    hessian[1, 0] = x26
    hessian[1, 1] = 0
    hessian[1, 2] = x101
    hessian[1, 3] = x110
    hessian[1, 4] = x26
    hessian[1, 5] = x117
    hessian[1, 6] = x123
    hessian[1, 7] = x101
    hessian[1, 8] = x110
    hessian[1, 9] = x130
    hessian[2, 0] = x50
    hessian[2, 1] = x101
    hessian[2, 2] = 0
    hessian[2, 3] = x136
    hessian[2, 4] = x143
    hessian[2, 5] = x50
    hessian[2, 6] = x146
    hessian[2, 7] = x101
    hessian[2, 8] = x149
    hessian[2, 9] = x136
    hessian[3, 0] = x67
    hessian[3, 1] = x110
    hessian[3, 2] = x136
    hessian[3, 3] = 0
    hessian[3, 4] = x152
    hessian[3, 5] = x153
    hessian[3, 6] = x67
    hessian[3, 7] = x156
    hessian[3, 8] = x110
    hessian[3, 9] = x136
    hessian[4, 0] = x26
    hessian[4, 1] = x26
    hessian[4, 2] = x143
    hessian[4, 3] = x152
    hessian[4, 4] = 0
    hessian[4, 5] = x159
    hessian[4, 6] = x162
    hessian[4, 7] = x159
    hessian[4, 8] = x162
    hessian[4, 9] = x164
    hessian[5, 0] = x50
    hessian[5, 1] = x117
    hessian[5, 2] = x50
    hessian[5, 3] = x153
    hessian[5, 4] = x159
    hessian[5, 5] = 0
    hessian[5, 6] = x166
    hessian[5, 7] = x159
    hessian[5, 8] = x167
    hessian[5, 9] = x166
    hessian[6, 0] = x67
    hessian[6, 1] = x123
    hessian[6, 2] = x146
    hessian[6, 3] = x67
    hessian[6, 4] = x162
    hessian[6, 5] = x166
    hessian[6, 6] = 0
    hessian[6, 7] = x169
    hessian[6, 8] = x162
    hessian[6, 9] = x166
    hessian[7, 0] = x76
    hessian[7, 1] = x101
    hessian[7, 2] = x101
    hessian[7, 3] = x156
    hessian[7, 4] = x159
    hessian[7, 5] = x159
    hessian[7, 6] = x169
    hessian[7, 7] = 0
    hessian[7, 8] = x170
    hessian[7, 9] = x170
    hessian[8, 0] = x82
    hessian[8, 1] = x110
    hessian[8, 2] = x149
    hessian[8, 3] = x110
    hessian[8, 4] = x162
    hessian[8, 5] = x167
    hessian[8, 6] = x162
    hessian[8, 7] = x170
    hessian[8, 8] = 0
    hessian[8, 9] = x170
    hessian[9, 0] = x91
    hessian[9, 1] = x130
    hessian[9, 2] = x136
    hessian[9, 3] = x136
    hessian[9, 4] = x164
    hessian[9, 5] = x166
    hessian[9, 6] = x166
    hessian[9, 7] = x170
    hessian[9, 8] = x170
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_5 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5(x_vec):
    """Calculates the value of S_5 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 3*x_0_1
    x1 = 4*x_0_1
    x2 = x1*x_2_3
    x3 = x1*x_2_4
    x4 = x1*x_3_4
    x5 = 3*x_0_2
    x6 = 4*x_0_2
    x7 = x6*x_1_3
    x8 = x6*x_1_4
    x9 = x6*x_3_4
    x10 = 3*x_0_3
    x11 = 4*x_0_3
    x12 = x11*x_1_2
    x13 = x11*x_1_4
    x14 = x11*x_2_4
    x15 = 4*x_0_4
    x16 = x15*x_1_2
    x17 = x15*x_1_3
    x18 = 3*x_0_4
    x19 = x15*x_2_3
    x20 = 3*x_1_2
    x21 = x_1_2*x_3_4
    x22 = 4*x21
    x23 = 3*x_1_3
    x24 = x_1_3*x_2_4
    x25 = 4*x24
    x26 = x_1_4*x_2_3
    x27 = 4*x26
    x28 = 3*x_1_4
    x29 = 3*x_2_3
    x30 = x_2_4*x_3_4
    x31 = x1*x_0_2
    x32 = 6*x_0_1
    x33 = x_0_2*x_3_4
    x34 = x_0_3*x_0_4
    x35 = x1*x_1_2
    x36 = x_0_3*x_1_4
    x37 = x32*x_2_4
    x38 = x1*x_1_3
    x39 = x32*x_2_3
    x40 = x6*x_1_2
    x41 = 6*x_0_2
    x42 = x_0_3*x_2_4
    x43 = x41*x_1_3
    x44 = x6*x_2_3
    x45 = 6*x33
    x46 = 6*x_1_2
    x47 = x11*x_0_4
    x48 = 6*x_0_3
    x49 = x_1_3*x_2_3
    x50 = x11*x_3_4
    x51 = x36*x_2_4
    x52 = x46*x_0_4
    x53 = 6*x_0_4
    x54 = x15*x_1_4
    x55 = 4*x_1_2
    x56 = x_1_3*x_1_4
    x57 = x_2_3*x_2_4
    x58 = x49*x_3_4
    x59 = 4*x30
    x60 = 5*x_0_1
    x61 = x60*x_0_2
    x62 = x33*x60
    x63 = x61*x_0_4
    x64 = x34*x60
    x65 = x60*x_1_2
    x66 = x60*x_0_3
    x67 = x60*x_2_3
    x68 = x65*x_0_4
    x69 = x60*x_0_4
    x70 = x_0_4*x_3_4
    x71 = x21*x60
    x72 = x60*x_1_3
    x73 = x60*x_1_4
    x74 = x26*x60
    x75 = 5*x_0_2
    x76 = x34*x75
    x77 = x36*x75
    x78 = x75*x_1_2
    x79 = x75*x_0_3
    x80 = 5*x33
    x81 = x80*x_1_3
    x82 = x78*x_0_4
    x83 = x75*x_0_4
    x84 = x_0_4*x_1_4
    x85 = x21*x75
    x86 = x75*x_1_3
    x87 = x24*x75
    x88 = x26*x_2_4
    x89 = 5*x_1_2
    x90 = x34*x89
    x91 = x36*x89
    x92 = 5*x34
    x93 = 5*x_0_4
    x94 = x89*x_0_3
    x95 = 5*x21
    x96 = x95*x_0_3
    x97 = 5*x_0_3
    x98 = x26*x_1_3
    x99 = 5*x36
    x100 = x24*x_2_3
    x101 = x30*x_1_3
    x102 = 5*x26
    x103 = x89*x_0_4
    x104 = x21*x93
    x105 = 5*x84
    return x0*x_0_2 + x0*x_0_3 + x0*x_0_4 + x0*x_1_2 + x0*x_1_3 + x0*x_1_4 - x1*x34 - x1*x36 + x10*x_0_4 + x10*x_1_3 + x10*x_2_3 + x10*x_3_4 + x100*x93 + x100*x97 + x101*x93 + x101*x97 + x102*x42 + x102*x70 + x103*x24 + x103*x26 + x103*x30 + x103*x56 + x103*x57 + x104*x_1_3 + x104*x_2_3 + x105*x24 + x105*x30 - x11*x30 - x11*x49 - x12*x_1_3 - x12*x_2_3 + x12 - x13*x_0_4 - x13*x_1_3 - x13*x_3_4 + x13 - x14*x_0_4 - x14*x_2_3 + x14 - x15*x30 - x16*x_1_4 - x16*x_2_4 + x16 - x17*x_1_4 - x17*x_3_4 + x17 + x18*x_1_4 + x18*x_2_4 + x18*x_3_4 - x19*x_2_4 - x19*x_3_4 + x19 - x2*x_0_2 - x2*x_0_3 - x2*x_1_2 - x2*x_1_3 + x2 + x20*x_1_3 + x20*x_1_4 + x20*x_2_3 + x20*x_2_4 - x21*x32 - x21*x41 - x21*x48 - x21*x53 + x21*x66 + x21*x67 + x21*x69 + x21*x79 + x21*x83 - x22*x_1_3 - x22*x_1_4 - x22*x_2_3 + x22 + x23*x_1_4 + x23*x_2_3 + x23*x_3_4 - x24*x32 - x24*x41 - x24*x48 - x24*x53 + x24*x61 + x24*x65 + x24*x67 + x24*x69 + x24*x73 + x24*x78 + x24*x79 + x24*x92 + x24*x94 + x24*x99 - x25*x_1_2 - x25*x_1_4 - x25*x_2_3 + x25 - x26*x32 - x26*x41 - x26*x48 - x26*x53 + x26*x61 + x26*x65 + x26*x66 + x26*x72 + x26*x78 + x26*x80 + x26*x83 + x26*x86 + x26*x92 + x26*x94 + x26*x97*x_3_4 - x27*x_1_2 - x27*x_1_3 - x27*x_2_4 - x27*x_3_4 + x27 + x28*x_2_4 + x28*x_3_4 + x29*x_2_4 + x29*x_3_4 - x3*x_0_2 - x3*x_0_4 - x3*x_1_2 - x3*x_1_4 + x3 - x30*x32 - x30*x55 - x30*x6 + x30*x61 + x30*x65 + x30*x66 + x30*x69 + x30*x72 + x30*x73 + x30*x75*x_1_4 + x30*x78 + x30*x86 + x30*x94 + x30*x99 + 3*x30 - x31*x_0_3 - x31*x_0_4 - x31*x_1_3 - x31*x_1_4 - x32*x33 - x34*x46 - x34*x6 + x34*x61 - x35*x_0_3 - x35*x_0_4 - x35*x_1_3 - x35*x_1_4 - x36*x41 - x36*x46 + x36*x61 + x36*x65 + x36*x80 + x36*x95 - x37*x_0_3 - x37*x_2_3 - x38*x_0_4 - x38*x_1_4 - x39*x_0_4 - x39*x_3_4 - x4*x_0_3 - x4*x_0_4 - x4*x_1_3 - x4*x_1_4 + x4 - x40*x_0_3 - x40*x_0_4 - x40*x_2_3 - x40*x_2_4 - x42*x46 - x42*x6 + x42*x61 + x42*x65 + x42*x67 + x42*x78 + x42*x89*x_2_3 - x43*x_0_4 - x43*x_1_4 - x44*x_0_4 - x44*x_2_4 - x45*x_1_3 - x45*x_1_4 - x47*x_1_3 - x47*x_2_3 - x49*x53 + x49*x69 + x49*x80 + x49*x83 + x49*x92 + x5*x_0_3 + x5*x_0_4 + x5*x_1_2 + x5*x_2_3 + x5*x_2_4 - x50*x_1_3 - x50*x_2_3 + x51*x60 + x51*x75 + x51*x93 - 6*x51 - x52*x_1_3 - x52*x_2_3 - x54*x_2_4 - x54*x_3_4 - x55*x56 - x55*x57 + x56*x61 + x56*x65 + x56*x78 + x56*x83 + x57*x61 + x57*x65 + x57*x69 + x57*x78 + x58*x60 + x58*x93 + x58*x97 - 4*x58 - x59*x_1_3 - x59*x_1_4 + x62*x_0_3 + x62*x_0_4 + x62*x_1_3 + x62*x_1_4 + x62*x_2_3 + x63*x_1_3 + x63*x_2_3 + x64*x_1_2 + x64*x_2_3 + x64*x_2_4 + x66*x_2_3*x_3_4 + x67*x70 + x68*x_1_3 + x68*x_2_3 - x7*x_0_3 - x7*x_1_2 - x7*x_2_3 + x7 + x71*x_1_3 + x71*x_1_4 + x74*x_2_4 + x74*x_3_4 + x75*x88 + x76*x_1_2 + x76*x_1_3 + x77*x_0_4 + x77*x_1_2 + x77*x_1_3 - x8*x_0_4 - x8*x_1_2 - x8*x_2_4 + x8 + x80*x84 + x81*x_0_3 + x81*x_0_4 + x82*x_1_3 + x82*x_2_3 + x84*x95 + x85*x_1_3 + x85*x_1_4 + x85*x_2_3 + x87*x_1_4 + x87*x_2_3 + x88*x93 - x9*x_0_3 - x9*x_0_4 - x9*x_2_3 + x9 + x90*x_1_3 + x90*x_2_3 + x90*x_2_4 + x91*x_0_4 + x91*x_1_3 + x93*x98 + x96*x_1_3 + x96*x_2_3 + x97*x98 - 2*x_0_1 - 2*x_0_2 - 2*x_0_3 - 2*x_0_4 - 2*x_1_2 - 2*x_1_3 - 2*x_1_4 - 2*x_2_3 - 2*x_2_4 - 2*x_3_4 + 1



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_jacobian(x_vec):
    """Calculates the Jacobian of S_5 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = 4*x_2_3
    x1 = 6*x_2_4
    x2 = 6*x_3_4
    x3 = 3*x_0_2
    x4 = 3*x_0_3
    x5 = 3*x_1_2
    x6 = 3*x_1_3
    x7 = 4*x_0_4
    x8 = -x7*x_0_2
    x9 = 4*x_1_3
    x10 = -x9*x_0_2
    x11 = 4*x_2_4
    x12 = -x11*x_0_2
    x13 = 4*x_0_3
    x14 = -x13*x_0_4
    x15 = 4*x_1_2
    x16 = -x15*x_0_3
    x17 = 4*x_3_4
    x18 = -x17*x_0_3
    x19 = -x11*x_0_4
    x20 = -x17*x_0_4
    x21 = 4*x_1_4
    x22 = -x21*x_1_2
    x23 = -x11*x_1_2
    x24 = -x9*x_1_4
    x25 = -x17*x_1_3
    x26 = -x11*x_1_4
    x27 = -x17*x_1_4
    x28 = 5*x_0_2
    x29 = x28*x_0_4
    x30 = x29*x_1_3
    x31 = x28*x_1_3
    x32 = x31*x_1_4
    x33 = x31*x_2_4
    x34 = x31*x_3_4
    x35 = x28*x_1_4
    x36 = x35*x_3_4
    x37 = 5*x_0_3
    x38 = x37*x_0_4
    x39 = x38*x_1_2
    x40 = x37*x_1_2
    x41 = x40*x_1_4
    x42 = x40*x_2_4
    x43 = x40*x_3_4
    x44 = x37*x_1_4
    x45 = x44*x_2_4
    x46 = 5*x_0_4
    x47 = x46*x_1_2
    x48 = x47*x_3_4
    x49 = x46*x_1_3
    x50 = x49*x_2_4
    x51 = x10 + x12 + x14 + x16 + x18 + x19 + x20 + x22 + x23 + x24 + x25 + x26 + x27 + x3 + x30 + x32 + x33 + x34 + x36 + x39 + x4 + x41 + x42 + x43 + x45 + x48 + x5 + x50 + x6 + x8 - 2
    x52 = 3*x_0_4
    x53 = 3*x_1_4
    x54 = -x13*x_0_2
    x55 = -x21*x_0_2
    x56 = -x0*x_0_2
    x57 = -x0*x_0_3
    x58 = -x15*x_0_4
    x59 = -x9*x_1_2
    x60 = -x0*x_1_2
    x61 = -x0*x_1_3
    x62 = x28*x_0_3
    x63 = x62*x_1_4
    x64 = x35*x_2_3
    x65 = x44*x_2_3
    x66 = x47*x_1_3
    x67 = x47*x_2_3
    x68 = x49*x_2_3
    x69 = x52 + x53 + x54 + x55 + x56 + x57 + x58 + x59 + x60 + x61 + x63 + x64 + x65 + x66 + x67 + x68
    x70 = -x21*x_0_3
    x71 = -x9*x_0_4
    x72 = x70 + x71
    x73 = -x2*x_1_2
    x74 = -x1*x_1_3
    x75 = 6*x_2_3
    x76 = -x75*x_1_4
    x77 = 5*x_1_2
    x78 = x77*x_1_3
    x79 = x78*x_1_4
    x80 = x78*x_2_4
    x81 = x78*x_3_4
    x82 = x77*x_1_4
    x83 = x82*x_2_3
    x84 = x82*x_3_4
    x85 = x77*x_2_3
    x86 = x85*x_2_4
    x87 = x85*x_3_4
    x88 = x_2_4*x_3_4
    x89 = x77*x88
    x90 = 5*x_1_3
    x91 = x90*x_1_4
    x92 = x91*x_2_3
    x93 = x91*x_2_4
    x94 = x90*x_2_3
    x95 = x94*x_2_4
    x96 = x94*x_3_4
    x97 = x88*x90
    x98 = 5*x_1_4
    x99 = x98*x_2_3
    x100 = x99*x_2_4
    x101 = x99*x_3_4
    x102 = x88*x98
    x103 = x100 + x101 + x102 + x17 + x73 + x74 + x76 + x79 + x80 + x81 + x83 + x84 + x86 + x87 + x89 + x92 + x93 + x95 + x96 + x97
    x104 = x28*x_2_3
    x105 = x37*x_2_3
    x106 = x46*x_2_3
    x107 = -x1*x_0_3 + x104*x_2_4 + x104*x_3_4 + x105*x_2_4 + x105*x_3_4 + x106*x_2_4 + x106*x_3_4 - x2*x_0_2 + x28*x88 + x29*x_2_3 + x29*x_3_4 + x37*x88 + x38*x_2_3 + x38*x_2_4 + x46*x88 + x62*x_0_4 + x62*x_2_4 + x62*x_3_4 - x75*x_0_4
    x108 = x107 + x11
    x109 = 6*x_1_4
    x110 = 3*x_0_1
    x111 = 3*x_2_3
    x112 = -x7*x_0_1
    x113 = -x21*x_0_1
    x114 = -x0*x_0_1
    x115 = -x21*x_0_4
    x116 = -x0*x_0_4
    x117 = -x0*x_2_4
    x118 = -x0*x_3_4
    x119 = -x11*x_3_4
    x120 = x106*x_0_1
    x121 = x99*x_0_1
    x122 = x_0_1*x_2_4
    x123 = 5*x_2_3
    x124 = x122*x123
    x125 = x_0_1*x_3_4
    x126 = x123*x125
    x127 = 5*x88*x_0_1
    x128 = x106*x_1_4
    x129 = x110 + x111 + x112 + x113 + x114 + x115 + x116 + x117 + x118 + x119 + x120 + x121 + x124 + x126 + x127 + x128 + x21 + x52 + x59 + x60 + x61 + x66 + x67 + x68 - 2
    x130 = 3*x_2_4
    x131 = -x13*x_0_1
    x132 = -x9*x_0_1
    x133 = -x11*x_0_1
    x134 = -x9*x_0_3
    x135 = -x11*x_0_3
    x136 = x37*x_0_1
    x137 = x136*x_2_4
    x138 = x122*x90
    x139 = x37*x_1_3
    x140 = x139*x_2_4
    x141 = x130 + x131 + x132 + x133 + x134 + x135 + x137 + x138 + x140 + x22 + x23 + x26 + x4 + x41 + x42 + x45 + x9
    x142 = 6*x_0_4
    x143 = x46*x_1_4
    x144 = -x109*x_0_3 + x125*x46 + x125*x90 + x125*x98 + x136*x_3_4 + x139*x_3_4 - x142*x_1_3 + x143*x_3_4 - x2*x_0_1 + x38*x_0_1 + x38*x_1_3 + x38*x_1_4 + x44*x_0_1 + x44*x_1_3 + x44*x_3_4 + x49*x_0_1 + x49*x_1_4 + x49*x_3_4 + x91*x_0_1
    x145 = x14 + x16 + x18 + x20 + x39 + x43 + x48 + x5
    x146 = x10 + x12 + x19 + x24 + x25 + x27 + x3 + x30 + x32 + x33 + x34 + x36 + x50 + x6 + x8
    x147 = -x17*x_0_1
    x148 = x147 + x71
    x149 = 3*x_3_4
    x150 = 4*x_0_2
    x151 = -x150*x_0_1
    x152 = -x15*x_0_1
    x153 = -x15*x_0_2
    x154 = x125*x28
    x155 = x125*x77
    x156 = x_0_2*x_1_2
    x157 = 5*x156
    x158 = x157*x_3_4
    x159 = x149 + x151 + x152 + x153 + x154 + x155 + x158 - x17*x_0_2
    x160 = -x1*x_0_1 - x109*x_0_2 + x122*x28 + x122*x46 + x122*x77 + x122*x98 - x142*x_1_2 + x143*x_2_4 + x156*x46 + x156*x98 + x157*x_2_4 + x29*x_0_1 + x29*x_1_4 + x35*x_0_1 + x35*x_2_4 + x47*x_0_1 + x47*x_1_4 + x47*x_2_4 + x82*x_0_1
    x161 = x159 + x160
    x162 = x100 + x101 + x102 + x15 + x73 + x74 + x76 + x79 + x80 + x81 + x83 + x84 + x86 + x87 + x89 + x92 + x93 + x95 + x96 + x97
    x163 = 6*x_1_3
    x164 = x110 + x117 + x118 + x119 + x124 + x126 + x127 + x53 + x54 + x55 + x56 + x57 + x63 + x64 + x65 - 2
    x165 = x147 + x70
    x166 = 6*x_0_3
    x167 = x104*x_0_1 + x105*x_0_1 + x105*x_1_3 + x123*x156 + x156*x37 + x156*x90 - x163*x_0_2 - x166*x_1_2 + x31*x_0_1 + x31*x_2_3 + x40*x_0_1 + x40*x_1_3 + x40*x_2_3 + x62*x_0_1 + x62*x_1_3 - x75*x_0_1 + x78*x_0_1 + x85*x_0_1 + x94*x_0_1
    x168 = x0 + x167
    x169 = x159 + x24 + x25 + x27 + x3 + x32 + x34 + x36
    x170 = -x0*x_1_4
    x171 = x111 + x112 + x113 + x114 + x115 + x120 + x121 + x128 + x170 + x7
    x172 = -x11*x_1_3
    x173 = x130 + x131 + x132 + x134 + x137 + x138 + x140 + x144 + x172
    x174 = x107 + x13 + x133
    x175 = -x17*x_1_2
    x176 = x175 - 2
    x177 = x110 + x117 + x118 + x119 + x124 + x126 + x127 + x149 + x150 + x151 + x152 + x153 + x154 + x155 + x158 + x176
    x178 = x160 + x22 + x23 + x26 + x4 + x41 + x42 + x45 + x53 + x54 + x56 + x57 + x63 + x64 + x65
    x179 = x14 + x18 + x20 + x39 + x43 + x48 + x5
    x180 = x12 + x130 + x131 + x132 + x134 + x137 + x138 + x140 + x172 + x19 + x30 + x33 + x50 + x52 + x59 + x6 + x60 + x61 + x66 + x67 + x68 + x8
    x181 = 4*x_0_1
    x182 = x135 + x181
    x183 = x111 + x112 + x113 + x115 + x116 + x120 + x121 + x128 + x167 + x170
    x184 = 6*x_0_1
    return np.array([x0 - x1*x_2_3 + x103 + x108 - x2*x_2_3 - x2*x_2_4 + x51 + x69 + x72,
        x103 - x109*x_1_3 + x129 + x141 + x144 + x145 - x2*x_1_3 - x2*x_1_4 + x58,
        -x1*x_1_2 - x1*x_1_4 - x109*x_1_2 + x11 + x129 + x146 + x148 + x161 + x162,
        x141 + x162 - x163*x_1_2 + x164 + x165 + x168 + x169 - x75*x_1_2 - x75*x_1_3,
        -x142*x_0_3 + x146 + x164 + x17 + x171 + x173 + x174 - x2*x_0_3 - x2*x_0_4,
        -x1*x_0_2 - x1*x_0_4 + x108 - x142*x_0_2 + x145 + x165 + x171 + x177 + x178,
        x148 - x166*x_0_2 + x168 + x174 + x177 + x179 + x180 + x58 - x75*x_0_2 - x75*x_0_3,
        -x109*x_0_1 - x109*x_0_4 - x142*x_0_1 + x161 + x173 + x175 + x182 + x21 + x51 + x7,
        x13 + x144 - x163*x_0_1 - x163*x_0_3 - x166*x_0_1 + x169 + x176 + x179 + x181 + x183 + x69 + x9,
        x15 + x150 - 6*x156 + x178 + x180 + x182 + x183 - x184*x_0_2 - x184*x_1_2 + x72 - 2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_hessian(x_vec):
    """Calculates the Hessian matrix of S_5 for n=5."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]
    x0 = -4*x_1_3
    x1 = -4*x_1_4
    x2 = -4*x_2_3
    x3 = -4*x_2_4
    x4 = 5*x_1_3
    x5 = x4*x_2_4
    x6 = 5*x_1_4
    x7 = x6*x_2_3
    x8 = x0 + x1 + x2 + x3 + x5 + x7 + 3
    x9 = -4*x_0_3
    x10 = -4*x_0_4
    x11 = 5*x_0_3
    x12 = x11*x_2_4
    x13 = 5*x_0_4
    x14 = x13*x_2_3
    x15 = x10 + x12 + x14 + x9
    x16 = 5*x_2_3
    x17 = 5*x_2_4
    x18 = x16*x_2_4 + x16*x_3_4 + x17*x_3_4
    x19 = -6*x_3_4
    x20 = x11*x_1_4
    x21 = x13*x_1_3
    x22 = x20 + x21
    x23 = x4*x_1_4 + x4*x_3_4 + x6*x_3_4
    x24 = x11*x_0_4 + x11*x_3_4 + x13*x_3_4
    x25 = x19 + x22 + x23 + x24
    x26 = x15 + x18 + x25 + x8
    x27 = -4*x_1_2
    x28 = 5*x_3_4
    x29 = x28*x_1_2
    x30 = x10 + x14 + x18 + x27 + x29
    x31 = x28*x_0_2
    x32 = x1 + x31 + x7
    x33 = -4*x_3_4
    x34 = x33 + 3
    x35 = x2 + x34
    x36 = -4*x_0_2
    x37 = x6*x_0_2
    x38 = x6*x_1_2
    x39 = x17*x_1_2
    x40 = x6*x_2_4
    x41 = x36 + x37 + x38 + x39 + x40
    x42 = -6*x_2_4
    x43 = x13*x_0_2
    x44 = x17*x_0_2
    x45 = x13*x_1_2
    x46 = x13*x_2_4
    x47 = x43 + x44 + x45 + x46
    x48 = x42 + x47
    x49 = x41 + x48
    x50 = x30 + x32 + x35 + x49
    x51 = x12 + x18 + x27 + x29 + x9
    x52 = x0 + x31 + x36 + x5
    x53 = x3 + x34
    x54 = x4*x_0_2
    x55 = x4*x_1_2
    x56 = x16*x_1_2
    x57 = x4*x_2_3
    x58 = x54 + x55 + x56 + x57
    x59 = -6*x_2_3
    x60 = x11*x_0_2
    x61 = x16*x_0_2
    x62 = x11*x_1_2
    x63 = x11*x_2_3
    x64 = x60 + x61 + x62 + x63
    x65 = x59 + x64
    x66 = x58 + x65
    x67 = x51 + x52 + x53 + x66
    x68 = -6*x_1_4
    x69 = x0 + x68
    x70 = x29 + x9
    x71 = x25 + 4
    x72 = x12 + x5
    x73 = -6*x_0_4
    x74 = x31 + x73
    x75 = x27 + x74
    x76 = x49 + x69 + x70 + x71 + x72 + x75
    x77 = -6*x_0_3
    x78 = -6*x_1_3
    x79 = x27 + x78
    x80 = x10 + x29
    x81 = x14 + x80
    x82 = x32 + x36 + x66 + x71 + x77 + x79 + x81
    x83 = -6*x_1_2
    x84 = x1 + x7
    x85 = -6*x_0_2
    x86 = x15 + x85
    x87 = x38 + x39 + x40
    x88 = x87 + 4
    x89 = x5 + x88
    x90 = x0 + x37
    x91 = x48 + x66 + x83 + x84 + x86 + x89 + x90
    x92 = -4*x_0_1
    x93 = x17*x_0_1
    x94 = x92 + x93
    x95 = x27 + x94
    x96 = x28*x_0_1
    x97 = x21 + x5 + x96
    x98 = x13*x_0_1 + x13*x_1_4 + x6*x_0_1
    x99 = x45 + x98
    x100 = x23 + x80 + x99
    x101 = x100 + x53 + x69 + x87 + x95 + x97
    x102 = x16*x_0_1
    x103 = x102 + x70
    x104 = x35 + x92
    x105 = x20 + x96
    x106 = x105 + x23
    x107 = x11*x_0_1 + x11*x_1_3 + x4*x_0_1
    x108 = x107 + x62
    x109 = x108 + x55 + x56 + x57
    x110 = x103 + x104 + x106 + x109 + x79 + x84
    x111 = x105 + x94
    x112 = x14 + x24
    x113 = x42 + x88
    x114 = x2 + x99
    x115 = x68 + x7
    x116 = x115 + x19 + x73
    x117 = x111 + x112 + x113 + x114 + x116 + x51
    x118 = x12 + x24
    x119 = x109 + x78
    x120 = x102 + x77
    x121 = x59 + 4
    x122 = x120 + x121 + x19 + x3 + x92
    x123 = x118 + x119 + x122 + x30 + x97
    x124 = x102 + x83
    x125 = x22 + x99
    x126 = -6*x_0_1
    x127 = x115 + x126
    x128 = x2 + x3
    x129 = x128 + x93
    x130 = x10 + x119 + x124 + x125 + x127 + x129 + x89 + x9
    x131 = 5*x_0_1
    x132 = x131*x_0_2 + x131*x_1_2 + 5*x_0_2*x_1_2
    x133 = x132 + x94
    x134 = x124 + x58
    x135 = x133 + x134
    x136 = x135 + x41 + x8
    x137 = x18 + x37
    x138 = x21 + x96
    x139 = x138 + 4
    x140 = x139 + x2
    x141 = x43 + x44 + x46 + x98
    x142 = x14 + x141
    x143 = x116 + x137 + x140 + x142 + x23 + x42 + x52 + x94
    x144 = x33 + x85
    x145 = x0 + x144
    x146 = x121 + x135 + x145 + x18 + x31 + x48 + x5 + x81
    x147 = x36 + x37
    x148 = x132 + x33 + x78
    x149 = x100 + x127 + x134 + x140 + x147 + x148
    x150 = x107 + x36 + x60 + x61 + x63
    x151 = x106 + x54
    x152 = x122 + x150 + x151 + x18 + x32 + x72 + x78
    x153 = x103 + x113 + x12 + x133 + x137 + x144 + x32 + x65 + x83
    x154 = x108 + x126
    x155 = x3 + x93
    x156 = x148 + x151 + x154 + x155 + x41 + x5 + x68 + x70 + x83 + 4
    x157 = x1 + x147 + x9
    x158 = x118 + x74
    x159 = x111 + x141 + x157 + x158 + x53
    x160 = x0 + x10 + x54
    x161 = x112 + x120
    x162 = x104 + x138 + x150 + x160 + x161 + x31
    x163 = x1 + x126 + 4
    x164 = x107 + x12 + x120 + x129 + x142 + x163 + x22 + x54 + x60 + x61 + x63 + x73 + x85 + x90
    x165 = x132 + 3
    x166 = x102 + x128 + x165 + x47 + x64 + x86 + x95
    x167 = x105 + x114 + x132 + x144 + x161 + x163 + x37 + x64 + x75
    x168 = x154 + x27
    x169 = x132 + x139 + x145 + x155 + x158 + x168 + x47 + x54 + x77
    x170 = x125 + x157 + x160 + x165 + x168
    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = x26
    hessian[0, 2] = x50
    hessian[0, 3] = x67
    hessian[0, 4] = x26
    hessian[0, 5] = x50
    hessian[0, 6] = x67
    hessian[0, 7] = x76
    hessian[0, 8] = x82
    hessian[0, 9] = x91
    hessian[1, 0] = x26
    hessian[1, 1] = 0
    hessian[1, 2] = x101
    hessian[1, 3] = x110
    hessian[1, 4] = x26
    hessian[1, 5] = x117
    hessian[1, 6] = x123
    hessian[1, 7] = x101
    hessian[1, 8] = x110
    hessian[1, 9] = x130
    hessian[2, 0] = x50
    hessian[2, 1] = x101
    hessian[2, 2] = 0
    hessian[2, 3] = x136
    hessian[2, 4] = x143
    hessian[2, 5] = x50
    hessian[2, 6] = x146
    hessian[2, 7] = x101
    hessian[2, 8] = x149
    hessian[2, 9] = x136
    hessian[3, 0] = x67
    hessian[3, 1] = x110
    hessian[3, 2] = x136
    hessian[3, 3] = 0
    hessian[3, 4] = x152
    hessian[3, 5] = x153
    hessian[3, 6] = x67
    hessian[3, 7] = x156
    hessian[3, 8] = x110
    hessian[3, 9] = x136
    hessian[4, 0] = x26
    hessian[4, 1] = x26
    hessian[4, 2] = x143
    hessian[4, 3] = x152
    hessian[4, 4] = 0
    hessian[4, 5] = x159
    hessian[4, 6] = x162
    hessian[4, 7] = x159
    hessian[4, 8] = x162
    hessian[4, 9] = x164
    hessian[5, 0] = x50
    hessian[5, 1] = x117
    hessian[5, 2] = x50
    hessian[5, 3] = x153
    hessian[5, 4] = x159
    hessian[5, 5] = 0
    hessian[5, 6] = x166
    hessian[5, 7] = x159
    hessian[5, 8] = x167
    hessian[5, 9] = x166
    hessian[6, 0] = x67
    hessian[6, 1] = x123
    hessian[6, 2] = x146
    hessian[6, 3] = x67
    hessian[6, 4] = x162
    hessian[6, 5] = x166
    hessian[6, 6] = 0
    hessian[6, 7] = x169
    hessian[6, 8] = x162
    hessian[6, 9] = x166
    hessian[7, 0] = x76
    hessian[7, 1] = x101
    hessian[7, 2] = x101
    hessian[7, 3] = x156
    hessian[7, 4] = x159
    hessian[7, 5] = x159
    hessian[7, 6] = x169
    hessian[7, 7] = 0
    hessian[7, 8] = x170
    hessian[7, 9] = x170
    hessian[8, 0] = x82
    hessian[8, 1] = x110
    hessian[8, 2] = x149
    hessian[8, 3] = x110
    hessian[8, 4] = x162
    hessian[8, 5] = x167
    hessian[8, 6] = x162
    hessian[8, 7] = x170
    hessian[8, 8] = 0
    hessian[8, 9] = x170
    hessian[9, 0] = x91
    hessian[9, 1] = x130
    hessian[9, 2] = x136
    hessian[9, 3] = x136
    hessian[9, 4] = x164
    hessian[9, 5] = x166
    hessian[9, 6] = x166
    hessian[9, 7] = x170
    hessian[9, 8] = x170
    hessian[9, 9] = 0
    return hessian


