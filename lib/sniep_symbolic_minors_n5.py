# -*- coding: utf-8 -*-
# Combined Value & Jacobian Functions for N = 5 (matrix_type='sniep')
# Generated by symbolic_minors_generator.py using Newton's Sums
# Optimized for use with scipy.optimize.minimize(..., jac=True)
# DO NOT EDIT MANUALLY

import numpy as np
import numba
# The 'math' module is not needed as Numba recognizes standard functions


# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S1_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_1 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_0_4, x_1_2, x_1_3, x_1_4,
           x_2_3, x_2_4, x_3_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_1 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    # Common subexpressions for value and gradient


    # Final calculations
    result = -2*x_0_1 - 2*x_0_2 - 2*x_0_3 - 2*x_0_4 - 2*x_1_2 - 2*x_1_3 - 2*x_1_4 - 2*x_2_3 - 2*x_2_4 - 2*x_3_4 + 5
    gradient = np.array([
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2,
        -2
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S2_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_2 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_0_4, x_1_2, x_1_3, x_1_4,
           x_2_3, x_2_4, x_3_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_2 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = 3*x_0_2
    x1 = 3*x_0_3
    x2 = 3*x_0_4
    x3 = 3*x_1_2
    x4 = 3*x_1_3
    x5 = 3*x_1_4
    x6 = 4*x_2_3
    x7 = 4*x_2_4
    x8 = 4*x_3_4
    x9 = 4*x_1_3
    x10 = 4*x_1_4
    x11 = 4*x_1_2
    x12 = 3*x_2_3
    x13 = 3*x_2_4
    x14 = x1 + x2 + x3 + x8 - 8
    x15 = x0 + x4 + x7
    x16 = x5 + x6
    x17 = 3*x_0_1
    x18 = x12 + x17
    x19 = x10 + x13
    x20 = x18 - 8
    x21 = 3*x_3_4
    x22 = x11 + x21
    x23 = x0 + x13
    x24 = x17 - 8
    x25 = 4*x_0_3
    x26 = x25 + x4
    x27 = 4*x_0_4
    x28 = x20 + x27 + x5
    x29 = x21 + x3
    x30 = 4*x_0_2
    x31 = x1 + x30
    x32 = x2 + x29
    x33 = 4*x_0_1
    x34 = x0 + x33 - 8
    x35 = x12 + x5

    # Final calculations
    result = x0*x_0_1 + x0*x_0_3 + x0*x_0_4 + x0*x_1_2 + x0*x_2_3 + x0*x_2_4 + x1*x_0_1 + x1*x_0_4 + x1*x_1_3 + x1*x_2_3 + x1*x_3_4 + x10*x_0_2 + x10*x_0_3 + x11*x_0_3 + x11*x_0_4 + x12*x_2_4 + x12*x_3_4 + x13*x_3_4 + x2*x_0_1 + x2*x_1_4 + x2*x_2_4 + x2*x_3_4 + x3*x_0_1 + x3*x_1_3 + x3*x_1_4 + x3*x_2_3 + x3*x_2_4 + x4*x_0_1 + x4*x_1_4 + x4*x_2_3 + x4*x_3_4 + x5*x_0_1 + x5*x_2_4 + x5*x_3_4 + x6*x_0_1 + x6*x_0_4 + x6*x_1_4 + x7*x_0_1 + x7*x_0_3 + x7*x_1_3 + x8*x_0_1 + x8*x_0_2 + x8*x_1_2 + x9*x_0_2 + x9*x_0_4 - 8*x_0_1 - 8*x_0_2 - 8*x_0_3 - 8*x_0_4 - 8*x_1_2 - 8*x_1_3 - 8*x_1_4 - 8*x_2_3 - 8*x_2_4 - 8*x_3_4 + 10
    gradient = np.array([
        x14 + x15 + x16,
        x14 + x18 + x19 + x9,
        x10 + x15 + x2 + x20 + x22,
        x1 + x16 + x22 + x23 + x24 + x9,
        x23 + x26 + x28 + x8,
        x28 + x29 + x31 + x7,
        x13 + x24 + x26 + x30 + x32 + x6,
        x1 + x19 + x27 + x29 + x34 + x4,
        x25 + x32 + x34 + x35 + x9,
        x11 + x13 + x2 + x31 + x33 + x35 + x4 - 8
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S3_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_3 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_0_4, x_1_2, x_1_3, x_1_4,
           x_2_3, x_2_4, x_3_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_3 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = 12*x_0_1
    x1 = 12*x_0_2
    x2 = 12*x_0_3
    x3 = 12*x_0_4
    x4 = 12*x_1_2
    x5 = 12*x_1_3
    x6 = 12*x_1_4
    x7 = 12*x_2_3
    x8 = 12*x_2_4
    x9 = 12*x_3_4
    x10 = 4*x_0_2
    x11 = x10*x_0_3
    x12 = x10*x_0_4
    x13 = x10*x_1_3
    x14 = x10*x_1_4
    x15 = x10*x_2_3
    x16 = x10*x_2_4
    x17 = 6*x_3_4
    x18 = x17*x_0_2
    x19 = 4*x_0_3
    x20 = x19*x_0_4
    x21 = x19*x_1_2
    x22 = x19*x_1_4
    x23 = x19*x_2_3
    x24 = 6*x_2_4
    x25 = x24*x_0_3
    x26 = x19*x_3_4
    x27 = 4*x_0_4
    x28 = x27*x_1_2
    x29 = x27*x_1_3
    x30 = 6*x_2_3
    x31 = x30*x_0_4
    x32 = x27*x_2_4
    x33 = x27*x_3_4
    x34 = 4*x_1_2
    x35 = x34*x_1_3
    x36 = x34*x_1_4
    x37 = x34*x_2_3
    x38 = x34*x_2_4
    x39 = x17*x_1_2
    x40 = 4*x_1_3
    x41 = x40*x_1_4
    x42 = x40*x_2_3
    x43 = x24*x_1_3
    x44 = x40*x_3_4
    x45 = x30*x_1_4
    x46 = 4*x_1_4
    x47 = x46*x_2_4
    x48 = x46*x_3_4
    x49 = x24*x_2_3
    x50 = x17*x_2_3
    x51 = x17*x_2_4
    x52 = 6*x_1_4
    x53 = x52*x_0_3
    x54 = 6*x_0_4
    x55 = x54*x_1_3
    x56 = x52*x_1_3
    x57 = x54*x_1_2
    x58 = -x9
    x59 = -9*x_0_3
    x60 = -9*x_0_4
    x61 = -9*x_1_2
    x62 = x20 + x21 + x26 + x28 + x33 + x35 + x36 + x37 + x38 + x39 + x42 + x43 + x45 + x47 + x58 + x59 + x60 + x61 + 12
    x63 = -x8
    x64 = -9*x_0_2
    x65 = -9*x_1_3
    x66 = x12 + x13 + x16 + x29 + x32 + x41 + x44 + x48 + x63 + x64 + x65
    x67 = -x7
    x68 = -9*x_1_4
    x69 = x11 + x14 + x15 + x22 + x23 + x67 + x68
    x70 = x18 + x25 + x31
    x71 = -x6
    x72 = x19*x_2_4
    x73 = x17*x_0_1
    x74 = x53 + x55 + x71 + x72 + x73
    x75 = -x5
    x76 = x27*x_2_3
    x77 = x75 + x76
    x78 = -9*x_0_1
    x79 = -9*x_2_3
    x80 = x27*x_0_1
    x81 = x46*x_0_1
    x82 = 4*x_0_1
    x83 = x27*x_1_4
    x84 = 4*x_2_3
    x85 = x84*x_2_4
    x86 = x84*x_3_4
    x87 = 4*x_2_4*x_3_4
    x88 = x78 + x79 + x80 + x81 + x82*x_2_3 + x83 + x85 + x86 + x87
    x89 = -9*x_2_4
    x90 = x19*x_0_1
    x91 = x40*x_0_1
    x92 = x19*x_1_3
    x93 = x82*x_2_4 + x89 + x90 + x91 + x92
    x94 = x88 + x93
    x95 = -9*x_3_4
    x96 = x10*x_0_1
    x97 = x34*x_0_1
    x98 = x10*x_1_2
    x99 = x10*x_3_4
    x100 = x24*x_0_1
    x101 = x52*x_0_2
    x102 = x100 + x101 + x57 + x95 + x96 + x97 + x98 + x99 + 12
    x103 = x82*x_3_4
    x104 = x103 + x88
    x105 = -x4
    x106 = x35 + x37 + x42 + x60
    x107 = x105 + x106 + x76
    x108 = x39 + x43 + x45
    x109 = 6*x_1_3
    x110 = x36 + x38 + x47 + x59
    x111 = x110 + x95 + x96 + x97 + x98
    x112 = x30*x_0_1
    x113 = x109*x_0_2
    x114 = 6*x_0_3
    x115 = x114*x_1_2
    x116 = x112 + x113 + x115 + x72
    x117 = x41 + x44 + x48 + x64 + 12
    x118 = x117 + x99
    x119 = x103 + x78 + x85 + x86 + x87 + x93
    x120 = -x3
    x121 = x46*x_2_3
    x122 = x11 + x120 + x121 + x15 + x23 + x68 + x70
    x123 = -x2
    x124 = x40*x_2_4
    x125 = x12 + x123 + x124 + x16 + x32 + x65
    x126 = x14 + x53 + x55 + x73
    x127 = x20 + x26 + x33 + x34*x_3_4 + x61
    x128 = x127 + x21
    x129 = -x1
    x130 = x100 + x101 + x129 + x22 + x57 + 12
    x131 = x106 + x112 + x113 + x115 + x127 + x28 + x95 + x96 + x97 + x98
    x132 = -x0
    x133 = x110 + x12 + x124 + x132 + x16 + x32 + x65 + x89 + x90 + x91 + x92
    x134 = x11 + x121 + x15 + x23 + x68 + x79 + x80 + x81 + x83
    x135 = 6*x_0_1

    # Final calculations
    result = -x0 - x1 - x11*x_0_1 - x11*x_0_4 - x11*x_1_2 - x11*x_1_3 - x11*x_2_4 - x11*x_3_4 - x12*x_0_1 - x12*x_1_2 - x12*x_1_4 - x12*x_2_3 - x12*x_3_4 - x13*x_0_1 - x13*x_1_2 - x13*x_2_3 - x14*x_0_1 - x14*x_1_2 - x14*x_2_4 - x15*x_0_1 - x15*x_1_2 - x15*x_2_4 - x15*x_3_4 - x16*x_0_1 - x16*x_1_2 - x16*x_3_4 - x18*x_0_1 - x18*x_1_2 - x18*x_1_3 - x18*x_1_4 - x2 - x20*x_0_1 - x20*x_1_3 - x20*x_1_4 - x20*x_2_3 - x20*x_2_4 - x21*x_0_1 - x21*x_1_3 - x21*x_2_3 - x22*x_0_1 - x22*x_1_3 - x22*x_3_4 - x23*x_0_1 - x23*x_1_3 - x23*x_2_4 - x23*x_3_4 - x25*x_0_1 - x25*x_1_2 - x25*x_1_3 - x25*x_1_4 - x26*x_0_1 - x26*x_1_3 - x26*x_2_4 - x28*x_0_1 - x28*x_1_4 - x28*x_2_4 - x29*x_0_1 - x29*x_1_4 - x29*x_3_4 - x3 - x31*x_0_1 - x31*x_1_2 - x31*x_1_3 - x31*x_1_4 - x32*x_0_1 - x32*x_1_4 - x32*x_2_3 - x32*x_3_4 - x33*x_0_1 - x33*x_1_4 - x33*x_2_3 - x35*x_0_1 - x35*x_1_4 - x35*x_2_4 - x35*x_3_4 - x36*x_0_1 - x36*x_2_3 - x36*x_3_4 - x37*x_0_1 - x37*x_2_4 - x37*x_3_4 - x38*x_0_1 - x38*x_3_4 - x39*x_0_1 - x39*x_0_3 - x39*x_0_4 - x4 - x41*x_0_1 - x41*x_2_3 - x41*x_2_4 - x42*x_0_1 - x42*x_2_4 - x42*x_3_4 - x43*x_0_1 - x43*x_0_2 - x43*x_0_4 - x44*x_0_1 - x44*x_2_4 - x45*x_0_1 - x45*x_0_2 - x45*x_0_3 - x47*x_0_1 - x47*x_2_3 - x47*x_3_4 - x48*x_0_1 - x48*x_2_3 - x49*x_0_1 - x5 - x50*x_0_1 - x51*x_0_1 - x53*x_0_2 - x53*x_1_2 - x55*x_0_2 - x55*x_1_2 - x56*x_0_2 - x57*x_0_3 - x6 - x7 - x8 - x9 + 9*x_0_1*x_0_2 + 9*x_0_1*x_0_3 + 9*x_0_1*x_0_4 + 9*x_0_1*x_1_2 + 9*x_0_1*x_1_3 + 9*x_0_1*x_1_4 + 12*x_0_1*x_2_3 + 12*x_0_1*x_2_4 + 12*x_0_1*x_3_4 + 9*x_0_2*x_0_3 + 9*x_0_2*x_0_4 + 9*x_0_2*x_1_2 + 12*x_0_2*x_1_3 + 12*x_0_2*x_1_4 + 9*x_0_2*x_2_3 + 9*x_0_2*x_2_4 + 12*x_0_2*x_3_4 + 9*x_0_3*x_0_4 + 12*x_0_3*x_1_2 + 9*x_0_3*x_1_3 + 12*x_0_3*x_1_4 + 9*x_0_3*x_2_3 + 12*x_0_3*x_2_4 + 9*x_0_3*x_3_4 + 12*x_0_4*x_1_2 + 12*x_0_4*x_1_3 + 9*x_0_4*x_1_4 + 12*x_0_4*x_2_3 + 9*x_0_4*x_2_4 + 9*x_0_4*x_3_4 + 9*x_1_2*x_1_3 + 9*x_1_2*x_1_4 + 9*x_1_2*x_2_3 + 9*x_1_2*x_2_4 + 12*x_1_2*x_3_4 + 9*x_1_3*x_1_4 + 9*x_1_3*x_2_3 + 12*x_1_3*x_2_4 + 9*x_1_3*x_3_4 + 12*x_1_4*x_2_3 + 9*x_1_4*x_2_4 + 9*x_1_4*x_3_4 + 9*x_2_3*x_2_4 + 9*x_2_3*x_3_4 + 9*x_2_4*x_3_4 + 10
    gradient = np.array([
        -x49 - x50 - x51 - x62 - x66 - x69 - x70,
        -x17*x_1_3 - x17*x_1_4 - x56 - x62 - x74 - x77 - x94,
        -x102 - x104 - x107 - x108 - x24*x_1_2 - x24*x_1_4 - x52*x_1_2 - x66 - x71,
        -x105 - x108 - x109*x_1_2 - x111 - x116 - x118 - x119 - x30*x_1_2 - x30*x_1_3 - x69 - x75,
        -x117 - x122 - x125 - x126 - x13 - x17*x_0_3 - x17*x_0_4 - x54*x_0_3 - x58 - x94,
        -x104 - x111 - x122 - x128 - x130 - x24*x_0_2 - x24*x_0_4 - x54*x_0_2 - x63,
        -x114*x_0_2 - x119 - x125 - x129 - x131 - x29 - x30*x_0_2 - x30*x_0_3 - x67 - x70 - 12,
        -x102 - x120 - x128 - x13 - x133 - x41 - x44 - x48 - x52*x_0_1 - x52*x_0_4 - x54*x_0_1 - x64 - x74,
        -x109*x_0_1 - x109*x_0_3 - x114*x_0_1 - x118 - x123 - x126 - x131 - x132 - x134 - x77,
        -x107 - x116 - x130 - x133 - x134 - x135*x_0_2 - x135*x_1_2 - x29 - 6*x_0_2*x_1_2
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S4_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_4 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_0_4, x_1_2, x_1_3, x_1_4,
           x_2_3, x_2_4, x_3_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_4 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = 8*x_0_1
    x1 = 8*x_0_2
    x2 = 8*x_0_3
    x3 = 8*x_0_4
    x4 = 8*x_1_2
    x5 = 8*x_1_3
    x6 = 8*x_1_4
    x7 = 8*x_2_3
    x8 = 8*x_2_4
    x9 = 9*x_0_2
    x10 = 9*x_0_3
    x11 = 9*x_0_4
    x12 = 9*x_1_2
    x13 = 9*x_1_3
    x14 = 9*x_1_4
    x15 = 12*x_2_3
    x16 = x15*x_0_1
    x17 = 12*x_2_4
    x18 = x17*x_0_1
    x19 = 12*x_3_4
    x20 = x19*x_0_1
    x21 = 12*x_1_3
    x22 = x21*x_0_2
    x23 = 12*x_1_4
    x24 = x23*x_0_2
    x25 = x19*x_0_2
    x26 = 12*x_1_2
    x27 = x26*x_0_3
    x28 = x23*x_0_3
    x29 = x17*x_0_3
    x30 = x26*x_0_4
    x31 = x21*x_0_4
    x32 = x15*x_0_4
    x33 = x19*x_1_2
    x34 = x17*x_1_3
    x35 = x15*x_1_4
    x36 = 9*x_2_3
    x37 = 9*x_2_4
    x38 = x0*x_0_3
    x39 = x0*x_0_4
    x40 = x0*x_1_3
    x41 = x0*x_1_4
    x42 = x0*x_2_3
    x43 = x0*x_2_4
    x44 = x1*x_0_3
    x45 = x1*x_0_4
    x46 = x1*x_1_3
    x47 = x1*x_1_4
    x48 = x1*x_2_3
    x49 = x1*x_2_4
    x50 = x2*x_0_4
    x51 = x2*x_1_2
    x52 = x2*x_1_4
    x53 = x2*x_2_3
    x54 = x2*x_3_4
    x55 = x3*x_1_2
    x56 = x3*x_1_3
    x57 = x3*x_2_4
    x58 = x3*x_3_4
    x59 = x4*x_1_3
    x60 = x4*x_1_4
    x61 = x4*x_2_3
    x62 = x4*x_2_4
    x63 = x5*x_1_4
    x64 = x5*x_2_3
    x65 = x5*x_3_4
    x66 = x6*x_2_4
    x67 = x6*x_3_4
    x68 = 5*x_0_2
    x69 = x68*x_0_3
    x70 = x69*x_0_4
    x71 = x69*x_1_4
    x72 = x69*x_2_4
    x73 = x69*x_3_4
    x74 = x68*x_0_4
    x75 = x74*x_1_3
    x76 = x74*x_2_3
    x77 = x74*x_3_4
    x78 = x68*x_1_3
    x79 = x78*x_1_4
    x80 = x78*x_2_4
    x81 = x78*x_3_4
    x82 = x68*x_1_4
    x83 = x82*x_2_3
    x84 = x82*x_3_4
    x85 = x68*x_2_3
    x86 = x85*x_2_4
    x87 = x85*x_3_4
    x88 = x_2_4*x_3_4
    x89 = x68*x88
    x90 = 5*x_0_3
    x91 = x90*x_0_4
    x92 = x91*x_1_2
    x93 = x91*x_2_3
    x94 = x91*x_2_4
    x95 = x90*x_1_2
    x96 = x95*x_1_4
    x97 = x95*x_2_4
    x98 = x95*x_3_4
    x99 = x90*x_1_4
    x100 = x99*x_2_3
    x101 = x99*x_2_4
    x102 = x90*x_2_3
    x103 = x102*x_2_4
    x104 = x102*x_3_4
    x105 = x88*x90
    x106 = 5*x_0_4
    x107 = x106*x_1_2
    x108 = x107*x_1_3
    x109 = x107*x_2_3
    x110 = x107*x_3_4
    x111 = x106*x_1_3
    x112 = x111*x_2_3
    x113 = x111*x_2_4
    x114 = x106*x_2_3
    x115 = x114*x_2_4
    x116 = x114*x_3_4
    x117 = x106*x88
    x118 = 5*x_1_2
    x119 = x118*x_1_3
    x120 = x119*x_1_4
    x121 = x119*x_2_4
    x122 = x119*x_3_4
    x123 = x118*x_1_4
    x124 = x123*x_2_3
    x125 = x123*x_3_4
    x126 = x118*x_2_3
    x127 = x126*x_2_4
    x128 = x126*x_3_4
    x129 = x118*x88
    x130 = 5*x_1_3
    x131 = x130*x_1_4
    x132 = x131*x_2_3
    x133 = x131*x_2_4
    x134 = x130*x_2_3
    x135 = x134*x_2_4
    x136 = x134*x_3_4
    x137 = x130*x88
    x138 = 5*x_1_4
    x139 = x138*x_2_3
    x140 = x139*x_2_4
    x141 = x139*x_3_4
    x142 = x138*x88
    x143 = -x45
    x144 = -x46
    x145 = -x49
    x146 = -x50
    x147 = -x51
    x148 = -x54
    x149 = -x57
    x150 = -x58
    x151 = -x60
    x152 = -x62
    x153 = -x63
    x154 = -x65
    x155 = -x66
    x156 = -x67
    x157 = x10 + x101 + x110 + x113 + x12 + x13 + x143 + x144 + x145 + x146 + x147 + x148 + x149 + x150 + x151 + x152 + x153 + x154 + x155 + x156 + x75 + x79 + x80 + x81 + x84 + x9 + x92 + x96 + x97 + x98 - 8
    x158 = -x44
    x159 = -x47
    x160 = -x48
    x161 = -x53
    x162 = -x55
    x163 = -x59
    x164 = -x61
    x165 = -x64
    x166 = x100 + x108 + x109 + x11 + x112 + x14 + x158 + x159 + x160 + x161 + x162 + x163 + x164 + x165 + x71 + x83
    x167 = -x52
    x168 = -x56
    x169 = x167 + x168
    x170 = -x33
    x171 = -x34
    x172 = -x35
    x173 = x120 + x121 + x122 + x124 + x125 + x127 + x128 + x129 + x132 + x133 + x135 + x136 + x137 + x140 + x141 + x142 + x170 + x171 + x172 + x19
    x174 = x103 + x104 + x105 + x115 + x116 + x117 - x25 - x29 - x32 + x70 + x72 + x73 + x76 + x77 + x86 + x87 + x89 + x93 + x94
    x175 = x17 + x174
    x176 = 9*x_0_1
    x177 = -x39
    x178 = -x41
    x179 = -x42
    x180 = -x3*x_1_4
    x181 = -x3*x_2_3
    x182 = -x7*x_2_4
    x183 = -x7*x_3_4
    x184 = -x8*x_3_4
    x185 = x114*x_0_1
    x186 = x139*x_0_1
    x187 = x_0_1*x_2_4
    x188 = 5*x_2_3
    x189 = x187*x188
    x190 = x_0_1*x_3_4
    x191 = x188*x190
    x192 = 5*x88*x_0_1
    x193 = x114*x_1_4
    x194 = x108 + x109 + x11 + x112 + x163 + x164 + x165 + x176 + x177 + x178 + x179 + x180 + x181 + x182 + x183 + x184 + x185 + x186 + x189 + x191 + x192 + x193 + x23 + x36 - 8
    x195 = -x38
    x196 = -x40
    x197 = -x43
    x198 = -x2*x_1_3
    x199 = -x2*x_2_4
    x200 = x90*x_0_1
    x201 = x200*x_2_4
    x202 = x130*x187
    x203 = x90*x_1_3
    x204 = x203*x_2_4
    x205 = x10 + x101 + x151 + x152 + x155 + x195 + x196 + x197 + x198 + x199 + x201 + x202 + x204 + x21 + x37 + x96 + x97
    x206 = x106*x_1_4
    x207 = x106*x190 + x111*x_0_1 + x111*x_1_4 + x111*x_3_4 + x130*x190 + x131*x_0_1 + x138*x190 - x20 + x200*x_3_4 + x203*x_3_4 + x206*x_3_4 - x28 - x31 + x91*x_0_1 + x91*x_1_3 + x91*x_1_4 + x99*x_0_1 + x99*x_1_3 + x99*x_3_4
    x208 = x110 + x12 + x146 + x147 + x148 + x150 + x92 + x98
    x209 = x113 + x13 + x143 + x144 + x145 + x149 + x153 + x154 + x156 + x75 + x79 + x80 + x81 + x84 + x9
    x210 = -x0*x_3_4
    x211 = x168 + x210
    x212 = 9*x_3_4
    x213 = -x0*x_0_2
    x214 = -x0*x_1_2
    x215 = -x1*x_1_2
    x216 = x190*x68
    x217 = x118*x190
    x218 = x68*x_1_2
    x219 = x218*x_3_4
    x220 = -x1*x_3_4 + x212 + x213 + x214 + x215 + x216 + x217 + x219
    x221 = x106*x187 + x107*x_0_1 + x107*x_1_4 + x107*x_2_4 + x118*x187 + x123*x_0_1 + x138*x187 - x18 + x187*x68 + x206*x_2_4 + x218*x_2_4 - x24 - x30 + x74*x_0_1 + x74*x_1_2 + x74*x_1_4 + x82*x_0_1 + x82*x_1_2 + x82*x_2_4
    x222 = x220 + x221
    x223 = x120 + x121 + x122 + x124 + x125 + x127 + x128 + x129 + x132 + x133 + x135 + x136 + x137 + x140 + x141 + x142 + x170 + x171 + x172 + x26
    x224 = x100 + x14 + x158 + x159 + x160 + x161 + x176 + x182 + x183 + x184 + x189 + x191 + x192 + x71 + x83 - 8
    x225 = x167 + x210
    x226 = x102*x_0_1 + x102*x_1_3 + x119*x_0_1 + x126*x_0_1 + x134*x_0_1 - x16 - x22 - x27 + x69*x_0_1 + x69*x_1_2 + x69*x_1_3 + x78*x_0_1 + x78*x_1_2 + x78*x_2_3 + x85*x_0_1 + x85*x_1_2 + x95*x_0_1 + x95*x_1_3 + x95*x_2_3
    x227 = x15 + x226
    x228 = x153 + x154 + x156 + x220 + x79 + x81 + x84 + x9
    x229 = 12*x_0_3
    x230 = 12*x_0_4
    x231 = -x6*x_2_3
    x232 = x177 + x178 + x179 + x180 + x185 + x186 + x193 + x230 + x231 + x36
    x233 = -x5*x_2_4
    x234 = x195 + x196 + x198 + x201 + x202 + x204 + x207 + x233 + x37
    x235 = x174 + x197 + x229
    x236 = 12*x_0_2
    x237 = -x4*x_3_4
    x238 = x237 - 8
    x239 = x176 + x182 + x183 + x184 + x189 + x191 + x192 + x212 + x213 + x214 + x215 + x216 + x217 + x219 + x236 + x238
    x240 = x10 + x100 + x101 + x14 + x151 + x152 + x155 + x158 + x160 + x161 + x221 + x71 + x83 + x96 + x97
    x241 = x110 + x12 + x146 + x148 + x150 + x92 + x98
    x242 = x108 + x109 + x11 + x112 + x113 + x13 + x143 + x145 + x149 + x163 + x164 + x165 + x195 + x196 + x198 + x201 + x202 + x204 + x233 + x37 + x75 + x80
    x243 = 12*x_0_1
    x244 = x199 + x243
    x245 = x177 + x178 + x180 + x181 + x185 + x186 + x193 + x226 + x231 + x36

    # Final calculations
    result = -x0 - x1 + x10*x_0_1 + x10*x_0_4 + x10*x_1_3 + x10*x_2_3 + x10*x_3_4 + x100*x_0_1 + x100*x_1_3 + x100*x_2_4 + x100*x_3_4 + x101*x_0_1 + x101*x_1_3 + x103*x_0_1 + x103*x_1_3 + x104*x_0_1 + x104*x_1_3 + x105*x_0_1 + x105*x_1_3 + x107*x88 + x108*x_0_1 + x108*x_1_4 + x108*x_2_4 + x108*x_3_4 + x109*x_0_1 + x109*x_1_4 + x109*x_2_4 + x109*x_3_4 + x11*x_0_1 + x11*x_1_4 + x11*x_2_4 + x11*x_3_4 + x110*x_0_1 + x110*x_1_4 + x111*x88 + x112*x_0_1 + x112*x_1_4 + x112*x_2_4 + x112*x_3_4 + x113*x_0_1 + x113*x_1_4 + x115*x_0_1 + x115*x_1_4 + x116*x_0_1 + x116*x_1_4 + x117*x_0_1 + x117*x_1_4 + x12*x_0_1 + x12*x_1_3 + x12*x_1_4 + x12*x_2_3 + x12*x_2_4 + x120*x_0_1 + x121*x_0_1 + x122*x_0_1 + x124*x_0_1 + x125*x_0_1 + x127*x_0_1 + x128*x_0_1 + x129*x_0_1 + x13*x_0_1 + x13*x_1_4 + x13*x_2_3 + x13*x_3_4 + x132*x_0_1 + x133*x_0_1 + x135*x_0_1 + x136*x_0_1 + x137*x_0_1 + x14*x_0_1 + x14*x_2_4 + x14*x_3_4 + x140*x_0_1 + x141*x_0_1 + x142*x_0_1 - x16*x_0_4 - x16*x_1_4 - x16*x_2_4 - x16*x_3_4 + x16 - x18*x_0_3 - x18*x_1_3 - x18*x_3_4 + x18 - x2 - x20*x_0_2 - x20*x_1_2 + x20 - x22*x_0_4 - x22*x_1_4 + x22 - x24*x_0_3 + x24 - x25*x_1_2 - x25*x_1_3 - x25*x_1_4 + x25 - x27*x_0_4 + x27 - x28*x_1_2 + x28 - x29*x_1_2 - x29*x_1_3 - x29*x_1_4 + x29 - x3 + x30 - x31*x_1_2 + x31 - x32*x_1_2 - x32*x_1_3 - x32*x_1_4 + x32 - x33*x_0_3 - x33*x_0_4 + x33 - x34*x_0_2 - x34*x_0_4 + x34 - x35*x_0_2 - x35*x_0_3 + x35 + x36*x_2_4 + x36*x_3_4 + x37*x_3_4 - x38*x_0_2 - x38*x_0_4 - x38*x_1_2 - x38*x_1_4 - x38*x_2_3 - x38*x_3_4 - x39*x_0_2 - x39*x_1_2 - x39*x_1_3 - x39*x_2_4 - x39*x_3_4 - x4 - x40*x_0_2 - x40*x_1_2 - x40*x_1_4 - x40*x_2_3 - x40*x_3_4 - x41*x_0_2 - x41*x_1_2 - x41*x_2_4 - x41*x_3_4 - x42*x_0_2 - x42*x_1_2 - x43*x_0_2 - x43*x_1_2 - x44*x_0_4 - x44*x_1_2 - x44*x_1_3 - x44*x_2_4 - x44*x_3_4 - x45*x_1_2 - x45*x_1_4 - x45*x_2_3 - x45*x_3_4 - x46*x_1_2 - x46*x_2_3 - x47*x_1_2 - x47*x_2_4 - x48*x_1_2 - x48*x_2_4 - x48*x_3_4 - x49*x_1_2 - x49*x_3_4 - x5 - x50*x_1_3 - x50*x_1_4 - x50*x_2_3 - x50*x_2_4 - x51*x_1_3 - x51*x_2_3 - x52*x_1_3 - x52*x_3_4 - x53*x_1_3 - x53*x_2_4 - x53*x_3_4 - x54*x_1_3 - x54*x_2_4 - x55*x_1_4 - x55*x_2_4 - x56*x_1_4 - x56*x_3_4 - x57*x_1_4 - x57*x_2_3 - x57*x_3_4 - x58*x_1_4 - x58*x_2_3 - x59*x_1_4 - x59*x_2_4 - x59*x_3_4 - x6 - x60*x_2_3 - x60*x_3_4 - x61*x_2_4 - x61*x_3_4 - x62*x_3_4 - x63*x_2_3 - x63*x_2_4 - x64*x_2_4 - x64*x_3_4 - x65*x_2_4 - x66*x_2_3 - x66*x_3_4 - x67*x_2_3 - x7 + x70*x_0_1 + x70*x_1_2 + x70*x_1_3 + x70*x_1_4 + x71*x_0_1 + x71*x_1_2 + x71*x_1_3 + x71*x_2_4 + x71*x_3_4 + x72*x_0_1 + x72*x_1_2 + x72*x_1_3 + x73*x_0_1 + x73*x_1_2 + x73*x_1_3 + x75*x_0_1 + x75*x_1_2 + x75*x_1_4 + x75*x_2_3 + x75*x_3_4 + x76*x_0_1 + x76*x_1_2 + x76*x_1_4 + x77*x_0_1 + x77*x_1_2 + x77*x_1_4 + x79*x_0_1 + x79*x_1_2 + x79*x_2_3 + x79*x_2_4 - x8 + x80*x_0_1 + x80*x_1_2 + x80*x_2_3 + x80*x_3_4 + x81*x_0_1 + x81*x_1_2 + x81*x_2_3 + x83*x_0_1 + x83*x_1_2 + x83*x_2_4 + x83*x_3_4 + x84*x_0_1 + x84*x_1_2 + x84*x_2_4 + x86*x_0_1 + x86*x_1_2 + x87*x_0_1 + x87*x_1_2 + x88*x95 + x88*x99 + x89*x_0_1 + x89*x_1_2 + x9*x_0_1 + x9*x_0_3 + x9*x_0_4 + x9*x_1_2 + x9*x_2_3 + x9*x_2_4 + x92*x_0_1 + x92*x_1_3 + x92*x_1_4 + x92*x_2_3 + x92*x_2_4 + x93*x_0_1 + x93*x_1_3 + x93*x_1_4 + x94*x_0_1 + x94*x_1_3 + x94*x_1_4 + x96*x_0_1 + x96*x_1_3 + x96*x_2_3 + x96*x_3_4 + x97*x_0_1 + x97*x_1_3 + x97*x_2_3 + x98*x_0_1 + x98*x_1_3 + x98*x_2_3 - 8*x_3_4 + 5
    gradient = np.array([
        -x15*x_2_4 - x15*x_3_4 + x15 + x157 + x166 + x169 - x17*x_3_4 + x173 + x175,
        x162 + x173 - x19*x_1_3 - x19*x_1_4 + x194 + x205 + x207 + x208 - x21*x_1_4,
        -x17*x_1_2 - x17*x_1_4 + x17 + x194 + x209 + x211 + x222 + x223 - x23*x_1_2,
        -x15*x_1_2 - x15*x_1_3 + x205 - x21*x_1_2 + x223 + x224 + x225 + x227 + x228,
        -x19*x_0_3 - x19*x_0_4 + x19 + x209 + x224 - x229*x_0_4 + x232 + x234 + x235,
        -x17*x_0_2 - x17*x_0_4 + x175 + x208 + x225 - x230*x_0_2 + x232 + x239 + x240,
        -x15*x_0_2 - x15*x_0_3 + x162 + x211 + x227 - x229*x_0_2 + x235 + x239 + x241 + x242,
        x157 + x222 - x23*x_0_1 - x23*x_0_4 + x23 - x230*x_0_1 + x230 + x234 + x237 + x244,
        x166 + x207 - x21*x_0_1 - x21*x_0_3 + x21 + x228 - x229*x_0_1 + x229 + x238 + x241 + x243 + x245,
        x169 - x236*x_0_1 + x236 + x240 + x242 + x244 + x245 - x26*x_0_1 - x26*x_0_2 + x26 - 8
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S5_n5)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S5_n5_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_5 for n=5.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_0_4, x_1_2, x_1_3, x_1_4,
           x_2_3, x_2_4, x_3_4

    Returns:
        (float, numpy.ndarray): A tuple containing the S_5 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_0_4 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_1_4 = x_vec[6]
    x_2_3 = x_vec[7]
    x_2_4 = x_vec[8]
    x_3_4 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = 3*x_0_2
    x1 = 3*x_0_3
    x2 = 3*x_0_4
    x3 = 3*x_1_2
    x4 = 3*x_1_3
    x5 = 3*x_1_4
    x6 = 4*x_2_3
    x7 = x6*x_0_1
    x8 = 4*x_2_4
    x9 = x8*x_0_1
    x10 = 4*x_3_4
    x11 = x10*x_0_1
    x12 = 4*x_1_3
    x13 = x12*x_0_2
    x14 = 4*x_1_4
    x15 = x14*x_0_2
    x16 = x10*x_0_2
    x17 = 4*x_1_2
    x18 = x17*x_0_3
    x19 = x14*x_0_3
    x20 = x8*x_0_3
    x21 = x17*x_0_4
    x22 = x12*x_0_4
    x23 = x6*x_0_4
    x24 = x10*x_1_2
    x25 = x8*x_1_3
    x26 = x6*x_1_4
    x27 = 3*x_2_3
    x28 = 3*x_2_4
    x29 = 4*x_0_3
    x30 = x29*x_0_2
    x31 = 4*x_0_4
    x32 = x31*x_0_2
    x33 = 6*x_3_4
    x34 = x33*x_0_2
    x35 = x29*x_0_4
    x36 = 6*x_2_4
    x37 = x36*x_0_3
    x38 = 6*x_2_3
    x39 = x38*x_0_4
    x40 = x12*x_1_2
    x41 = x14*x_1_2
    x42 = x33*x_1_2
    x43 = x12*x_1_4
    x44 = x36*x_1_3
    x45 = x38*x_1_4
    x46 = x36*x_2_3
    x47 = x33*x_2_3
    x48 = x33*x_2_4
    x49 = 6*x_1_4
    x50 = x49*x_0_3
    x51 = 6*x_0_4
    x52 = x51*x_1_3
    x53 = x6*x_0_2
    x54 = x8*x_0_2
    x55 = x49*x_1_3
    x56 = x51*x_1_2
    x57 = x6*x_0_3
    x58 = x10*x_0_3
    x59 = x8*x_0_4
    x60 = x10*x_0_4
    x61 = x6*x_1_2
    x62 = x8*x_1_2
    x63 = x6*x_1_3
    x64 = x8*x_1_4
    x65 = 5*x_0_2
    x66 = x65*x_0_3
    x67 = x66*x_0_4
    x68 = x66*x_1_4
    x69 = x66*x_2_4
    x70 = x66*x_3_4
    x71 = x65*x_0_4
    x72 = x71*x_1_3
    x73 = x71*x_2_3
    x74 = x71*x_3_4
    x75 = x65*x_1_3
    x76 = x75*x_1_4
    x77 = x75*x_2_4
    x78 = x75*x_3_4
    x79 = x65*x_1_4
    x80 = x79*x_2_3
    x81 = x79*x_3_4
    x82 = x65*x_2_3
    x83 = x82*x_2_4
    x84 = x82*x_3_4
    x85 = x_2_4*x_3_4
    x86 = x65*x85
    x87 = 5*x_0_3
    x88 = x87*x_0_4
    x89 = x88*x_1_2
    x90 = x88*x_2_3
    x91 = x88*x_2_4
    x92 = x87*x_1_2
    x93 = x92*x_1_4
    x94 = x92*x_2_4
    x95 = x92*x_3_4
    x96 = x87*x_1_4
    x97 = x96*x_2_3
    x98 = x96*x_2_4
    x99 = x87*x_2_3
    x100 = x99*x_2_4
    x101 = x99*x_3_4
    x102 = x85*x87
    x103 = 5*x_0_4
    x104 = x103*x_1_2
    x105 = x104*x_1_3
    x106 = x104*x_2_3
    x107 = x104*x_3_4
    x108 = x103*x_1_3
    x109 = x108*x_2_3
    x110 = x108*x_2_4
    x111 = x103*x_2_3
    x112 = x111*x_2_4
    x113 = x111*x_3_4
    x114 = x103*x85
    x115 = 5*x_1_2
    x116 = x115*x_1_3
    x117 = x116*x_1_4
    x118 = x116*x_2_4
    x119 = x116*x_3_4
    x120 = x115*x_1_4
    x121 = x120*x_2_3
    x122 = x120*x_3_4
    x123 = x115*x_2_3
    x124 = x123*x_2_4
    x125 = x123*x_3_4
    x126 = x115*x85
    x127 = 5*x_1_3
    x128 = x127*x_1_4
    x129 = x128*x_2_3
    x130 = x128*x_2_4
    x131 = x127*x_2_3
    x132 = x131*x_2_4
    x133 = x131*x_3_4
    x134 = x127*x85
    x135 = 5*x_1_4
    x136 = x135*x_2_3
    x137 = x136*x_2_4
    x138 = x136*x_3_4
    x139 = x135*x85
    x140 = x_0_2*x_1_2
    x141 = x140*x87
    x142 = x103*x140
    x143 = x127*x140
    x144 = x135*x140
    x145 = 5*x_2_3
    x146 = x140*x145
    x147 = 5*x85
    x148 = -x32
    x149 = -x13
    x150 = -x54
    x151 = -x35
    x152 = -x18
    x153 = -x58
    x154 = -x59
    x155 = -x60
    x156 = -x41
    x157 = -x62
    x158 = -x43
    x159 = -x10*x_1_3
    x160 = -x64
    x161 = -x10*x_1_4
    x162 = x0 + x1 + x107 + x110 + x148 + x149 + x150 + x151 + x152 + x153 + x154 + x155 + x156 + x157 + x158 + x159 + x160 + x161 + x3 + x4 + x72 + x76 + x77 + x78 + x81 + x89 + x93 + x94 + x95 + x98 - 2
    x163 = -x30
    x164 = -x15
    x165 = -x53
    x166 = -x57
    x167 = -x21
    x168 = -x40
    x169 = -x61
    x170 = -x63
    x171 = x105 + x106 + x109 + x163 + x164 + x165 + x166 + x167 + x168 + x169 + x170 + x2 + x5 + x68 + x80 + x97
    x172 = -x19
    x173 = -x22
    x174 = x172 + x173
    x175 = -x42
    x176 = -x44
    x177 = -x45
    x178 = x10 + x117 + x118 + x119 + x121 + x122 + x124 + x125 + x126 + x129 + x130 + x132 + x133 + x134 + x137 + x138 + x139 + x175 + x176 + x177
    x179 = x100 + x101 + x102 + x112 + x113 + x114 - x34 - x37 - x39 + x67 + x69 + x70 + x73 + x74 + x83 + x84 + x86 + x90 + x91
    x180 = x179 + x8
    x181 = 3*x_0_1
    x182 = -x31*x_0_1
    x183 = -x14*x_0_1
    x184 = -x7
    x185 = -x14*x_0_4
    x186 = -x23
    x187 = -x6*x_2_4
    x188 = -x6*x_3_4
    x189 = -x8*x_3_4
    x190 = x111*x_0_1
    x191 = x136*x_0_1
    x192 = x_0_1*x_2_4
    x193 = x145*x192
    x194 = x_0_1*x_3_4
    x195 = x145*x194
    x196 = x147*x_0_1
    x197 = x111*x_1_4
    x198 = x105 + x106 + x109 + x14 + x168 + x169 + x170 + x181 + x182 + x183 + x184 + x185 + x186 + x187 + x188 + x189 + x190 + x191 + x193 + x195 + x196 + x197 + x2 + x27 - 2
    x199 = -x29*x_0_1
    x200 = -x12*x_0_1
    x201 = -x9
    x202 = -x12*x_0_3
    x203 = -x20
    x204 = x87*x_0_1
    x205 = x204*x_2_4
    x206 = x127*x192
    x207 = x87*x_1_3
    x208 = x207*x_2_4
    x209 = x1 + x12 + x156 + x157 + x160 + x199 + x200 + x201 + x202 + x203 + x205 + x206 + x208 + x28 + x93 + x94 + x98
    x210 = x103*x_1_4
    x211 = x103*x194 + x108*x_0_1 + x108*x_1_4 + x108*x_3_4 + x127*x194 + x128*x_0_1 + x135*x194 + x204*x_3_4 + x207*x_3_4 + x210*x_3_4 - x33*x_0_1 - x50 - x52 + x88*x_0_1 + x88*x_1_3 + x88*x_1_4 + x96*x_0_1 + x96*x_1_3 + x96*x_3_4
    x212 = x107 + x151 + x152 + x153 + x155 + x3 + x89 + x95
    x213 = x0 + x110 + x148 + x149 + x150 + x154 + x158 + x159 + x161 + x4 + x72 + x76 + x77 + x78 + x81
    x214 = -x11
    x215 = x173 + x214
    x216 = 3*x_3_4
    x217 = 4*x_0_2
    x218 = -x217*x_0_1
    x219 = -x17*x_0_1
    x220 = -x17*x_0_2
    x221 = x194*x65
    x222 = x115*x194
    x223 = 5*x140
    x224 = x223*x_3_4
    x225 = -x16 + x216 + x218 + x219 + x220 + x221 + x222 + x224
    x226 = x103*x192 + x104*x_0_1 + x104*x_1_4 + x104*x_2_4 + x115*x192 + x120*x_0_1 + x135*x192 + x142 + x144 + x192*x65 + x210*x_2_4 + x223*x_2_4 - x36*x_0_1 - x49*x_0_2 - x56 + x71*x_0_1 + x71*x_1_4 + x79*x_0_1 + x79*x_2_4
    x227 = x225 + x226
    x228 = x117 + x118 + x119 + x121 + x122 + x124 + x125 + x126 + x129 + x130 + x132 + x133 + x134 + x137 + x138 + x139 + x17 + x175 + x176 + x177
    x229 = 6*x_1_3
    x230 = x163 + x164 + x165 + x166 + x181 + x187 + x188 + x189 + x193 + x195 + x196 + x5 + x68 + x80 + x97 - 2
    x231 = x172 + x214
    x232 = 6*x_0_3
    x233 = x116*x_0_1 + x123*x_0_1 + x131*x_0_1 + x141 + x143 + x146 - x229*x_0_2 - x232*x_1_2 - x38*x_0_1 + x66*x_0_1 + x66*x_1_3 + x75*x_0_1 + x75*x_2_3 + x82*x_0_1 + x92*x_0_1 + x92*x_1_3 + x92*x_2_3 + x99*x_0_1 + x99*x_1_3
    x234 = x233 + x6
    x235 = x0 + x158 + x159 + x161 + x225 + x76 + x78 + x81
    x236 = -x26
    x237 = x182 + x183 + x184 + x185 + x190 + x191 + x197 + x236 + x27 + x31
    x238 = -x25
    x239 = x199 + x200 + x202 + x205 + x206 + x208 + x211 + x238 + x28
    x240 = x179 + x201 + x29
    x241 = -x24
    x242 = x241 - 2
    x243 = x181 + x187 + x188 + x189 + x193 + x195 + x196 + x216 + x217 + x218 + x219 + x220 + x221 + x222 + x224 + x242
    x244 = x1 + x156 + x157 + x160 + x163 + x165 + x166 + x226 + x5 + x68 + x80 + x93 + x94 + x97 + x98
    x245 = x107 + x151 + x153 + x155 + x3 + x89 + x95
    x246 = x105 + x106 + x109 + x110 + x148 + x150 + x154 + x168 + x169 + x170 + x199 + x2 + x200 + x202 + x205 + x206 + x208 + x238 + x28 + x4 + x72 + x77
    x247 = 4*x_0_1
    x248 = x203 + x247
    x249 = x182 + x183 + x185 + x186 + x190 + x191 + x197 + x233 + x236 + x27
    x250 = 6*x_0_1

    # Final calculations
    result = x0*x_0_1 + x0*x_0_3 + x0*x_0_4 + x0*x_1_2 + x0*x_2_3 + x0*x_2_4 + x1*x_0_1 + x1*x_0_4 + x1*x_1_3 + x1*x_2_3 + x1*x_3_4 + x100*x_0_1 + x100*x_1_3 + x101*x_0_1 + x101*x_1_3 + x102*x_0_1 + x102*x_1_3 + x104*x85 + x105*x_0_1 + x105*x_1_4 + x105*x_2_4 + x105*x_3_4 + x106*x_0_1 + x106*x_1_4 + x106*x_2_4 + x106*x_3_4 + x107*x_0_1 + x107*x_1_4 + x108*x140 + x108*x85 + x109*x_0_1 + x109*x_1_4 + x109*x_2_4 + x109*x_3_4 - x11*x_0_3 - x11*x_0_4 - x11*x_1_3 - x11*x_1_4 + x11 + x110*x_0_1 + x110*x_1_4 + x111*x140 + x112*x_0_1 + x112*x_1_4 + x113*x_0_1 + x113*x_1_4 + x114*x_0_1 + x114*x_1_4 + x117*x_0_1 + x118*x_0_1 + x119*x_0_1 + x121*x_0_1 + x122*x_0_1 + x124*x_0_1 + x125*x_0_1 + x126*x_0_1 + x128*x140 + x129*x_0_1 - x13*x_0_1 - x13*x_0_3 - x13*x_1_2 + x13 + x130*x_0_1 + x132*x_0_1 + x133*x_0_1 + x134*x_0_1 + x136*x140 + x137*x_0_1 + x138*x_0_1 + x139*x_0_1 + x140*x147 + x140*x88 + x140*x96 + x141*x_2_4 + x141*x_3_4 + x142*x_3_4 + x143*x_2_4 + x143*x_3_4 + x144*x_3_4 + x146*x_2_4 + x146*x_3_4 - x15*x_0_1 - x15*x_0_4 - x15*x_1_2 + x15 - x16*x_0_3 - x16*x_0_4 + x16 - x18*x_0_1 - x18*x_0_2 + x18 - x19*x_0_1 - x19*x_0_4 + x19 + x2*x_0_1 + x2*x_1_4 + x2*x_2_4 + x2*x_3_4 - x20*x_0_2 - x20*x_0_4 - x20*x_3_4 + x20 - x21*x_0_1 - x21*x_0_2 + x21 - x22*x_0_1 - x22*x_0_3 - x22*x_1_4 + x22 - x23*x_0_2 - x23*x_0_3 - x23*x_2_4 - x23*x_3_4 + x23 - x24*x_1_3 - x24*x_1_4 + x24 - x25*x_1_2 - x25*x_1_4 - x25*x_3_4 + x25 - x26*x_1_2 - x26*x_1_3 - x26*x_2_4 - x26*x_3_4 + x26 + x27*x_2_4 + x27*x_3_4 + x28*x_3_4 + x3*x_0_1 + x3*x_1_3 + x3*x_1_4 + x3*x_2_3 + x3*x_2_4 - x30*x_0_1 - x30*x_0_4 - x32*x_0_1 - x34*x_0_1 - x34*x_1_2 - x34*x_1_3 - x34*x_1_4 - x35*x_0_1 - x37*x_0_1 - x37*x_1_2 - x37*x_1_3 - x37*x_1_4 - x39*x_0_1 - x39*x_1_2 - x39*x_1_3 - x39*x_1_4 + x4*x_0_1 + x4*x_1_4 + x4*x_2_3 + x4*x_3_4 - x40*x_0_1 - x40*x_0_3 - x40*x_1_4 - x41*x_0_1 - x41*x_0_4 - x42*x_0_1 - x42*x_0_3 - x42*x_0_4 - x43*x_0_1 - x43*x_0_3 - x44*x_0_1 - x44*x_0_2 - x44*x_0_4 - x45*x_0_1 - x45*x_0_2 - x45*x_0_3 - x46*x_0_1 - x47*x_0_1 - x48*x_0_1 + x5*x_0_1 + x5*x_2_4 + x5*x_3_4 - x50*x_0_2 - x50*x_1_2 - x52*x_0_2 - x52*x_1_2 - x53*x_1_2 - x53*x_1_3 - x53*x_2_4 - x53*x_3_4 - x54*x_1_2 - x54*x_1_4 - x54*x_3_4 - x55*x_0_2 - x56*x_0_3 - x57*x_1_2 - x57*x_1_3 - x57*x_2_4 - x57*x_3_4 - x58*x_1_3 - x58*x_1_4 - x59*x_1_2 - x59*x_1_4 - x59*x_3_4 - x60*x_1_3 - x60*x_1_4 - x61*x_2_4 - x61*x_3_4 - x62*x_3_4 - x63*x_2_4 - x63*x_3_4 - x64*x_3_4 + x67*x_0_1 + x67*x_1_3 + x67*x_1_4 + x68*x_0_1 + x68*x_1_3 + x68*x_2_4 + x68*x_3_4 + x69*x_0_1 + x69*x_1_3 - x7*x_0_2 - x7*x_0_3 - x7*x_1_2 - x7*x_1_3 + x7 + x70*x_0_1 + x70*x_1_3 + x72*x_0_1 + x72*x_1_4 + x72*x_2_3 + x72*x_3_4 + x73*x_0_1 + x73*x_1_4 + x74*x_0_1 + x74*x_1_4 + x76*x_0_1 + x76*x_2_3 + x76*x_2_4 + x77*x_0_1 + x77*x_2_3 + x77*x_3_4 + x78*x_0_1 + x78*x_2_3 + x80*x_0_1 + x80*x_2_4 + x80*x_3_4 + x81*x_0_1 + x81*x_2_4 + x83*x_0_1 + x84*x_0_1 + x85*x92 + x85*x96 + x86*x_0_1 + x89*x_0_1 + x89*x_1_3 + x89*x_1_4 + x89*x_2_3 + x89*x_2_4 - x9*x_0_2 - x9*x_0_4 - x9*x_1_2 - x9*x_1_4 + x9 + x90*x_0_1 + x90*x_1_3 + x90*x_1_4 + x91*x_0_1 + x91*x_1_3 + x91*x_1_4 + x93*x_0_1 + x93*x_1_3 + x93*x_2_3 + x93*x_3_4 + x94*x_0_1 + x94*x_1_3 + x94*x_2_3 + x95*x_0_1 + x95*x_1_3 + x95*x_2_3 + x97*x_0_1 + x97*x_1_3 + x97*x_2_4 + x97*x_3_4 + x98*x_0_1 + x98*x_1_3 - 2*x_0_1 - 2*x_0_2 - 2*x_0_3 - 2*x_0_4 - 2*x_1_2 - 2*x_1_3 - 2*x_1_4 - 2*x_2_3 - 2*x_2_4 - 2*x_3_4 + 1
    gradient = np.array([
        x162 + x171 + x174 + x178 + x180 - x46 - x47 - x48 + x6,
        x167 + x178 + x198 + x209 + x211 + x212 - x33*x_1_3 - x33*x_1_4 - x55,
        x198 + x213 + x215 + x227 + x228 - x36*x_1_2 - x36*x_1_4 - x49*x_1_2 + x8,
        x209 + x228 - x229*x_1_2 + x230 + x231 + x234 + x235 - x38*x_1_2 - x38*x_1_3,
        x10 + x213 + x230 + x237 + x239 + x240 - x33*x_0_3 - x33*x_0_4 - x51*x_0_3,
        x180 + x212 + x231 + x237 + x243 + x244 - x36*x_0_2 - x36*x_0_4 - x51*x_0_2,
        x167 + x215 - x232*x_0_2 + x234 + x240 + x243 + x245 + x246 - x38*x_0_2 - x38*x_0_3,
        x14 + x162 + x227 + x239 + x241 + x248 + x31 - x49*x_0_1 - x49*x_0_4 - x51*x_0_1,
        x12 + x171 + x211 - x229*x_0_1 - x229*x_0_3 - x232*x_0_1 + x235 + x242 + x245 + x247 + x249 + x29,
        -6*x140 + x17 + x174 + x217 + x244 + x246 + x248 + x249 - x250*x_0_2 - x250*x_1_2 - 2
    ])
    
    return result, gradient


