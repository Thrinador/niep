# -*- coding: utf-8 -*-
# Symbolic Functions for N = 4 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py using Newton's Sums
# DO NOT EDIT MANUALLY

import math
import numpy as np
import numba


# --------------------------------------------------------------------------
# Value Function (S1_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4(x_vec):
    """Calculates S_1 for n=4 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        float: The value of S_1.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # S_k CSE Defs

    # Final S_k Calculation
    result = x_0_0 + x_1_1 + x_2_2 + x_3_3
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S1_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S1_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=4.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        numpy.ndarray: The gradient vector of S_1.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # Jacobian CSE Defs

    # Final Gradient Calculation
    gradient = np.array([
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S2_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4(x_vec):
    """Calculates S_2 for n=4 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        float: The value of S_2.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # S_k CSE Defs

    # Final S_k Calculation
    result = x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 - x_0_1**2 - x_0_2**2 - x_0_3**2 + x_1_1*x_2_2 + x_1_1*x_3_3 - x_1_2**2 - x_1_3**2 + x_2_2*x_3_3 - x_2_3**2
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S2_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S2_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=4.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        numpy.ndarray: The gradient vector of S_2.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # Jacobian CSE Defs
    x0 = x_2_2 + x_3_3
    x1 = x_0_0 + x_1_1
    # Final Gradient Calculation
    gradient = np.array([
        x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        x1 + x_3_3,
        -2*x_2_3,
        x1 + x_2_2
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S3_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4(x_vec):
    """Calculates S_3 for n=4 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        float: The value of S_3.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # S_k CSE Defs
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_2_3**2
    x3 = x_0_1**2
    x4 = x_0_2**2
    x5 = x_0_3**2
    # Final S_k Calculation
    result = -x0*x_0_0 - x0*x_3_3 - x1*x_0_0 - x1*x_2_2 - x2*x_0_0 - x2*x_1_1 - x3*x_2_2 - x3*x_3_3 - x4*x_1_1 - x4*x_3_3 - x5*x_1_1 - x5*x_2_2 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_2_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_2*x_0_3*x_2_3 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S3_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S3_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=4.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        numpy.ndarray: The gradient vector of S_3.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # Jacobian CSE Defs
    x0 = x_2_2*x_3_3 - x_2_3**2
    x1 = x_1_1*x_3_3 - x_1_3**2
    x2 = x_1_1*x_2_2 - x_1_2**2
    x3 = x_0_0*x_3_3 - x_0_3**2
    x4 = x_0_0*x_2_2 - x_0_2**2
    x5 = x_0_0*x_1_1 - x_0_1**2
    # Final Gradient Calculation
    gradient = np.array([
        x0 + x1 + x2,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 + x_0_2*x_1_2 + x_0_3*x_1_3),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 + x_0_3*x_2_3),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2),
        x0 + x3 + x4,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 + x_1_3*x_2_3),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2),
        x1 + x3 + x5,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3),
        x2 + x4 + x5
    ])
    return gradient



# --------------------------------------------------------------------------
# Value Function (S4_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4(x_vec):
    """Calculates S_4 for n=4 using generated symbolic expressions.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        float: The value of S_4.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # S_k CSE Defs
    x0 = x_2_3**2
    x1 = x_1_2**2
    x2 = x_1_3**2
    x3 = x_0_1**2
    x4 = x_0_2**2
    x5 = x_0_3**2
    x6 = 2*x_0_1*x_2_3
    x7 = x_0_2*x_1_3
    x8 = x_0_3*x_1_2
    # Final S_k Calculation
    result = x0*x3 - x0*x_0_0*x_1_1 + x1*x5 - x1*x_0_0*x_3_3 + x2*x4 - x2*x_0_0*x_2_2 - x3*x_2_2*x_3_3 - x4*x_1_1*x_3_3 - x5*x_1_1*x_2_2 - x6*x7 - x6*x8 - 2*x7*x8 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S4_n4)
# Input: x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3, x_2_2, x_2_3, x_3_3
# --------------------------------------------------------------------------
@numba.jit(nopython=True)
def calculate_S4_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=4.
    This function is JIT-compiled with Numba for performance.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3
    
    Returns:
        numpy.ndarray: The gradient vector of S_4.
    """
    # Assign vars
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    # Jacobian CSE Defs
    x0 = x_2_3**2
    x1 = x_1_2**2
    x2 = x_1_3**2
    x3 = x_1_3*x_2_3
    x4 = x_0_3*x_2_3
    x5 = x_1_2*x_3_3
    x6 = x_0_3*x_1_3
    x7 = x_1_2*x_2_3
    x8 = x_0_2*x_1_2
    x9 = x_0_2**2
    x10 = x_0_3**2
    x11 = x_0_1*x_0_2
    x12 = x_0_1**2
    # Final Gradient Calculation
    gradient = np.array([
        -x0*x_1_1 - x1*x_3_3 - x2*x_2_2 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3,
        2*x0*x_0_1 - 2*x3*x_0_2 - 2*x4*x_1_2 - 2*x_0_1*x_2_2*x_3_3 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_3*x_1_3*x_2_2,
        2*x2*x_0_2 - 2*x3*x_0_1 + 2*x4*x_1_1 + 2*x5*x_0_1 - 2*x6*x_1_2 - 2*x_0_2*x_1_1*x_3_3,
        2*x1*x_0_3 - 2*x7*x_0_1 - 2*x8*x_1_3 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_2*x_1_1*x_2_3 - 2*x_0_3*x_1_1*x_2_2,
        -x0*x_0_0 - x10*x_2_2 - x9*x_3_3 + x_0_0*x_2_2*x_3_3 + 2*x_0_2*x_0_3*x_2_3,
        2*x10*x_1_2 - 2*x4*x_0_1 - 2*x5*x_0_0 - 2*x6*x_0_2 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_3_3,
        -2*x11*x_2_3 + 2*x7*x_0_0 - 2*x8*x_0_3 + 2*x9*x_1_3 - 2*x_0_0*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_2_2,
        -x10*x_1_1 - x12*x_3_3 - x2*x_0_0 + x_0_0*x_1_1*x_3_3 + 2*x_0_1*x_0_3*x_1_3,
        -2*x11*x_1_3 + 2*x12*x_2_3 - 2*x_0_0*x_1_1*x_2_3 + 2*x_0_0*x_1_2*x_1_3 - 2*x_0_1*x_0_3*x_1_2 + 2*x_0_2*x_0_3*x_1_1,
        -x1*x_0_0 - x12*x_2_2 - x9*x_1_1 + x_0_0*x_1_1*x_2_2 + 2*x_0_1*x_0_2*x_1_2
    ])
    return gradient


