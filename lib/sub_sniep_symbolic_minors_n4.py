# -*- coding: utf-8 -*-
# Separated Value, Jacobian, & Hessian Functions for N = 4 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import numpy as np
import numba

# --- Functions for S_1 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4(x_vec):
    """Calculates the value of S_1 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    return x_0_0 + x_1_1 + x_2_2 + x_3_3



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    return np.array([1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_1 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 0
    hessian[0, 6] = 0
    hessian[0, 7] = 0
    hessian[0, 8] = 0
    hessian[0, 9] = 0
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = 0
    hessian[4, 9] = 0
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 0
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[7, 0] = 0
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 0
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = 0
    hessian[9, 0] = 0
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 0
    hessian[9, 5] = 0
    hessian[9, 6] = 0
    hessian[9, 7] = 0
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_2 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4(x_vec):
    """Calculates the value of S_2 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    return x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 - x_0_1**2 - x_0_2**2 - x_0_3**2 + x_1_1*x_2_2 + x_1_1*x_3_3 - x_1_2**2 - x_1_3**2 + x_2_2*x_3_3 - x_2_3**2



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_2 + x_3_3
    x1 = x_0_0 + x_1_1
    return np.array([x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        x1 + x_3_3,
        -2*x_2_3,
        x1 + x_2_2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_2 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 1
    hessian[0, 5] = 0
    hessian[0, 6] = 0
    hessian[0, 7] = 1
    hessian[0, 8] = 0
    hessian[0, 9] = 1
    hessian[1, 0] = 0
    hessian[1, 1] = -2
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = -2
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = -2
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[4, 0] = 1
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 1
    hessian[4, 8] = 0
    hessian[4, 9] = 1
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = -2
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 0
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = -2
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[7, 0] = 1
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 1
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 1
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = -2
    hessian[8, 9] = 0
    hessian[9, 0] = 1
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 1
    hessian[9, 5] = 0
    hessian[9, 6] = 0
    hessian[9, 7] = 1
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_3 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4(x_vec):
    """Calculates the value of S_3 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_2_3**2
    x3 = x_0_1**2
    x4 = x_0_2**2
    x5 = x_0_3**2
    return -x0*x_0_0 - x0*x_3_3 - x1*x_0_0 - x1*x_2_2 - x2*x_0_0 - x2*x_1_1 - x3*x_2_2 - x3*x_3_3 - x4*x_1_1 - x4*x_3_3 - x5*x_1_1 - x5*x_2_2 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_2_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_2*x_0_3*x_2_3 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_2*x_3_3 - x_2_3**2
    x1 = x_1_1*x_3_3 - x_1_3**2
    x2 = x_1_1*x_2_2 - x_1_2**2
    x3 = x_0_0*x_3_3 - x_0_3**2
    x4 = x_0_0*x_2_2 - x_0_2**2
    x5 = x_0_0*x_1_1 - x_0_1**2
    return np.array([x0 + x1 + x2,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 + x_0_2*x_1_2 + x_0_3*x_1_3),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 + x_0_3*x_2_3),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2),
        x0 + x3 + x4,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 + x_1_3*x_2_3),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2),
        x1 + x3 + x5,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3),
        x2 + x4 + x5])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_3 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_2 + x_3_3
    x1 = 2*x_1_2
    x2 = -x1
    x3 = 2*x_1_3
    x4 = -x3
    x5 = x_1_1 + x_3_3
    x6 = 2*x_2_3
    x7 = -x6
    x8 = x_1_1 + x_2_2
    x9 = 2*x_0_2
    x10 = 2*x_0_3
    x11 = 2*x_0_1
    x12 = -x11
    x13 = -x9
    x14 = -x10
    x15 = x_0_0 + x_3_3
    x16 = x_0_0 + x_2_2
    x17 = x_0_0 + x_1_1
    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = x0
    hessian[0, 5] = x2
    hessian[0, 6] = x4
    hessian[0, 7] = x5
    hessian[0, 8] = x7
    hessian[0, 9] = x8
    hessian[1, 0] = 0
    hessian[1, 1] = -2*x0
    hessian[1, 2] = x1
    hessian[1, 3] = x3
    hessian[1, 4] = 0
    hessian[1, 5] = x9
    hessian[1, 6] = x10
    hessian[1, 7] = x12
    hessian[1, 8] = 0
    hessian[1, 9] = x12
    hessian[2, 0] = 0
    hessian[2, 1] = x1
    hessian[2, 2] = -2*x5
    hessian[2, 3] = x6
    hessian[2, 4] = x13
    hessian[2, 5] = x11
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = x10
    hessian[2, 9] = x13
    hessian[3, 0] = 0
    hessian[3, 1] = x3
    hessian[3, 2] = x6
    hessian[3, 3] = -2*x8
    hessian[3, 4] = x14
    hessian[3, 5] = 0
    hessian[3, 6] = x11
    hessian[3, 7] = x14
    hessian[3, 8] = x9
    hessian[3, 9] = 0
    hessian[4, 0] = x0
    hessian[4, 1] = 0
    hessian[4, 2] = x13
    hessian[4, 3] = x14
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = x15
    hessian[4, 8] = x7
    hessian[4, 9] = x16
    hessian[5, 0] = x2
    hessian[5, 1] = x9
    hessian[5, 2] = x11
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = -2*x15
    hessian[5, 6] = x6
    hessian[5, 7] = 0
    hessian[5, 8] = x3
    hessian[5, 9] = x2
    hessian[6, 0] = x4
    hessian[6, 1] = x10
    hessian[6, 2] = 0
    hessian[6, 3] = x11
    hessian[6, 4] = 0
    hessian[6, 5] = x6
    hessian[6, 6] = -2*x16
    hessian[6, 7] = x4
    hessian[6, 8] = x1
    hessian[6, 9] = 0
    hessian[7, 0] = x5
    hessian[7, 1] = x12
    hessian[7, 2] = 0
    hessian[7, 3] = x14
    hessian[7, 4] = x15
    hessian[7, 5] = 0
    hessian[7, 6] = x4
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = x17
    hessian[8, 0] = x7
    hessian[8, 1] = 0
    hessian[8, 2] = x10
    hessian[8, 3] = x9
    hessian[8, 4] = x7
    hessian[8, 5] = x3
    hessian[8, 6] = x1
    hessian[8, 7] = 0
    hessian[8, 8] = -2*x17
    hessian[8, 9] = 0
    hessian[9, 0] = x8
    hessian[9, 1] = x12
    hessian[9, 2] = x13
    hessian[9, 3] = 0
    hessian[9, 4] = x16
    hessian[9, 5] = x2
    hessian[9, 6] = 0
    hessian[9, 7] = x17
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    return hessian


# --- Functions for S_4 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4(x_vec):
    """Calculates the value of S_4 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_3**2
    x1 = x_1_2**2
    x2 = x_1_3**2
    x3 = x_0_1**2
    x4 = x_0_2**2
    x5 = x_0_3**2
    x6 = 2*x_0_1*x_2_3
    x7 = x_0_2*x_1_3
    x8 = x_0_3*x_1_2
    return x0*x3 - x0*x_0_0*x_1_1 + x1*x5 - x1*x_0_0*x_3_3 + x2*x4 - x2*x_0_0*x_2_2 - x3*x_2_2*x_3_3 - x4*x_1_1*x_3_3 - x5*x_1_1*x_2_2 - x6*x7 - x6*x8 - 2*x7*x8 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_3**2
    x1 = x_1_2**2
    x2 = x_1_3**2
    x3 = x_1_3*x_2_3
    x4 = x_0_3*x_2_3
    x5 = x_1_2*x_3_3
    x6 = x_0_3*x_1_3
    x7 = x_1_2*x_2_3
    x8 = x_0_2*x_1_2
    x9 = x_0_2**2
    x10 = x_0_3**2
    x11 = x_0_1*x_0_2
    x12 = x_0_1**2
    return np.array([-x0*x_1_1 - x1*x_3_3 - x2*x_2_2 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3,
        2*x0*x_0_1 - 2*x3*x_0_2 - 2*x4*x_1_2 - 2*x_0_1*x_2_2*x_3_3 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_3*x_1_3*x_2_2,
        2*x2*x_0_2 - 2*x3*x_0_1 + 2*x4*x_1_1 + 2*x5*x_0_1 - 2*x6*x_1_2 - 2*x_0_2*x_1_1*x_3_3,
        2*x1*x_0_3 - 2*x7*x_0_1 - 2*x8*x_1_3 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_2*x_1_1*x_2_3 - 2*x_0_3*x_1_1*x_2_2,
        -x0*x_0_0 - x10*x_2_2 - x9*x_3_3 + x_0_0*x_2_2*x_3_3 + 2*x_0_2*x_0_3*x_2_3,
        2*x10*x_1_2 - 2*x4*x_0_1 - 2*x5*x_0_0 - 2*x6*x_0_2 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_3_3,
        -2*x11*x_2_3 + 2*x7*x_0_0 - 2*x8*x_0_3 + 2*x9*x_1_3 - 2*x_0_0*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_2_2,
        -x10*x_1_1 - x12*x_3_3 - x2*x_0_0 + x_0_0*x_1_1*x_3_3 + 2*x_0_1*x_0_3*x_1_3,
        -2*x11*x_1_3 + 2*x12*x_2_3 - 2*x_0_0*x_1_1*x_2_3 + 2*x_0_0*x_1_2*x_1_3 - 2*x_0_1*x_0_3*x_1_2 + 2*x_0_2*x_0_3*x_1_1,
        -x1*x_0_0 - x12*x_2_2 - x9*x_1_1 + x_0_0*x_1_1*x_2_2 + 2*x_0_1*x_0_2*x_1_2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_4 for n=4."""
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]
    x0 = x_2_2*x_3_3 - x_2_3**2
    x1 = x_1_2*x_3_3 - x_1_3*x_2_3
    x2 = -2*x1
    x3 = x_1_2*x_2_3 - x_1_3*x_2_2
    x4 = 2*x3
    x5 = x_1_1*x_3_3 - x_1_3**2
    x6 = x_1_1*x_2_3 - x_1_2*x_1_3
    x7 = -2*x6
    x8 = x_1_1*x_2_2 - x_1_2**2
    x9 = 2*x1
    x10 = -2*x3
    x11 = x_0_2*x_3_3 - x_0_3*x_2_3
    x12 = 2*x11
    x13 = x_0_2*x_2_3 - x_0_3*x_2_2
    x14 = -2*x13
    x15 = x_0_1*x_3_3 - x_0_3*x_1_3
    x16 = -2*x15
    x17 = x_0_2*x_1_3
    x18 = x_0_3*x_1_2
    x19 = -2*x17 - 2*x18 + 4*x_0_1*x_2_3
    x20 = x_0_1*x_2_2 - x_0_2*x_1_2
    x21 = -2*x20
    x22 = 2*x6
    x23 = -2*x11
    x24 = 2*x15
    x25 = x_0_1*x_2_3
    x26 = -2*x18 - 2*x25 + 4*x_0_2*x_1_3
    x27 = x_0_1*x_1_3 - x_0_3*x_1_1
    x28 = -2*x27
    x29 = x_0_1*x_1_2 - x_0_2*x_1_1
    x30 = 2*x29
    x31 = 2*x13
    x32 = -2*x17 - 2*x25 + 4*x_0_3*x_1_2
    x33 = 2*x20
    x34 = 2*x27
    x35 = -2*x29
    x36 = x_0_0*x_3_3 - x_0_3**2
    x37 = x_0_0*x_2_3 - x_0_2*x_0_3
    x38 = -2*x37
    x39 = x_0_0*x_2_2 - x_0_2**2
    x40 = 2*x37
    x41 = x_0_0*x_1_3 - x_0_1*x_0_3
    x42 = 2*x41
    x43 = x_0_0*x_1_2 - x_0_1*x_0_2
    x44 = -2*x43
    x45 = -2*x41
    x46 = 2*x43
    x47 = x_0_0*x_1_1 - x_0_1**2
    hessian = np.empty((10, 10))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = x0
    hessian[0, 5] = x2
    hessian[0, 6] = x4
    hessian[0, 7] = x5
    hessian[0, 8] = x7
    hessian[0, 9] = x8
    hessian[1, 0] = 0
    hessian[1, 1] = -2*x0
    hessian[1, 2] = x9
    hessian[1, 3] = x10
    hessian[1, 4] = 0
    hessian[1, 5] = x12
    hessian[1, 6] = x14
    hessian[1, 7] = x16
    hessian[1, 8] = x19
    hessian[1, 9] = x21
    hessian[2, 0] = 0
    hessian[2, 1] = x9
    hessian[2, 2] = -2*x5
    hessian[2, 3] = x22
    hessian[2, 4] = x23
    hessian[2, 5] = x24
    hessian[2, 6] = x26
    hessian[2, 7] = 0
    hessian[2, 8] = x28
    hessian[2, 9] = x30
    hessian[3, 0] = 0
    hessian[3, 1] = x10
    hessian[3, 2] = x22
    hessian[3, 3] = -2*x8
    hessian[3, 4] = x31
    hessian[3, 5] = x32
    hessian[3, 6] = x33
    hessian[3, 7] = x34
    hessian[3, 8] = x35
    hessian[3, 9] = 0
    hessian[4, 0] = x0
    hessian[4, 1] = 0
    hessian[4, 2] = x23
    hessian[4, 3] = x31
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = x36
    hessian[4, 8] = x38
    hessian[4, 9] = x39
    hessian[5, 0] = x2
    hessian[5, 1] = x12
    hessian[5, 2] = x24
    hessian[5, 3] = x32
    hessian[5, 4] = 0
    hessian[5, 5] = -2*x36
    hessian[5, 6] = x40
    hessian[5, 7] = 0
    hessian[5, 8] = x42
    hessian[5, 9] = x44
    hessian[6, 0] = x4
    hessian[6, 1] = x14
    hessian[6, 2] = x26
    hessian[6, 3] = x33
    hessian[6, 4] = 0
    hessian[6, 5] = x40
    hessian[6, 6] = -2*x39
    hessian[6, 7] = x45
    hessian[6, 8] = x46
    hessian[6, 9] = 0
    hessian[7, 0] = x5
    hessian[7, 1] = x16
    hessian[7, 2] = 0
    hessian[7, 3] = x34
    hessian[7, 4] = x36
    hessian[7, 5] = 0
    hessian[7, 6] = x45
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = x47
    hessian[8, 0] = x7
    hessian[8, 1] = x19
    hessian[8, 2] = x28
    hessian[8, 3] = x35
    hessian[8, 4] = x38
    hessian[8, 5] = x42
    hessian[8, 6] = x46
    hessian[8, 7] = 0
    hessian[8, 8] = -2*x47
    hessian[8, 9] = 0
    hessian[9, 0] = x8
    hessian[9, 1] = x21
    hessian[9, 2] = x30
    hessian[9, 3] = 0
    hessian[9, 4] = x39
    hessian[9, 5] = x44
    hessian[9, 6] = 0
    hessian[9, 7] = x47
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    return hessian


