# -*- coding: utf-8 -*-
# Combined Value & Jacobian Functions for N = 4 (matrix_type='sub_sniep')
# Generated by symbolic_minors_generator.py using Newton's Sums
# Optimized for use with scipy.optimize.minimize(..., jac=True)
# DO NOT EDIT MANUALLY

import numpy as np
import numba
# The 'math' module is not needed as Numba recognizes standard functions


# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S1_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_1 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3

    Returns:
        (float, numpy.ndarray): A tuple containing the S_1 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    # Common subexpressions for value and gradient


    # Final calculations
    result = x_0_0 + x_1_1 + x_2_2 + x_3_3
    gradient = np.array([
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S2_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_2 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3

    Returns:
        (float, numpy.ndarray): A tuple containing the S_2 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = x_2_2 + x_3_3
    x1 = x_0_0 + x_1_1

    # Final calculations
    result = x_0_0*x_1_1 + x_0_0*x_2_2 + x_0_0*x_3_3 - x_0_1**2 - x_0_2**2 - x_0_3**2 + x_1_1*x_2_2 + x_1_1*x_3_3 - x_1_2**2 - x_1_3**2 + x_2_2*x_3_3 - x_2_3**2
    gradient = np.array([
        x0 + x_1_1,
        -2*x_0_1,
        -2*x_0_2,
        -2*x_0_3,
        x0 + x_0_0,
        -2*x_1_2,
        -2*x_1_3,
        x1 + x_3_3,
        -2*x_2_3,
        x1 + x_2_2
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S3_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_3 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3

    Returns:
        (float, numpy.ndarray): A tuple containing the S_3 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = x_1_2**2
    x1 = x_1_3**2
    x2 = x_2_3**2
    x3 = x_0_1**2
    x4 = x_0_2**2
    x5 = x_0_3**2
    x6 = -x2 + x_2_2*x_3_3
    x7 = -x1 + x_1_1*x_3_3
    x8 = -x0 + x_1_1*x_2_2
    x9 = -x5 + x_0_0*x_3_3
    x10 = -x4 + x_0_0*x_2_2
    x11 = -x3 + x_0_0*x_1_1

    # Final calculations
    result = -x0*x_0_0 - x0*x_3_3 - x1*x_0_0 - x1*x_2_2 - x2*x_0_0 - x2*x_1_1 - x3*x_2_2 - x3*x_3_3 - x4*x_1_1 - x4*x_3_3 - x5*x_1_1 - x5*x_2_2 + x_0_0*x_1_1*x_2_2 + x_0_0*x_1_1*x_3_3 + x_0_0*x_2_2*x_3_3 + 2*x_0_1*x_0_2*x_1_2 + 2*x_0_1*x_0_3*x_1_3 + 2*x_0_2*x_0_3*x_2_3 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3
    gradient = np.array([
        x6 + x7 + x8,
        2*(-x_0_1*x_2_2 - x_0_1*x_3_3 + x_0_2*x_1_2 + x_0_3*x_1_3),
        2*(x_0_1*x_1_2 - x_0_2*x_1_1 - x_0_2*x_3_3 + x_0_3*x_2_3),
        2*(x_0_1*x_1_3 + x_0_2*x_2_3 - x_0_3*x_1_1 - x_0_3*x_2_2),
        x10 + x6 + x9,
        2*(-x_0_0*x_1_2 + x_0_1*x_0_2 - x_1_2*x_3_3 + x_1_3*x_2_3),
        2*(-x_0_0*x_1_3 + x_0_1*x_0_3 + x_1_2*x_2_3 - x_1_3*x_2_2),
        x11 + x7 + x9,
        2*(-x_0_0*x_2_3 + x_0_2*x_0_3 - x_1_1*x_2_3 + x_1_2*x_1_3),
        x10 + x11 + x8
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S4_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_4 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 10
           containing the variable matrix elements in the specified order:
                      x_0_0, x_0_1, x_0_2, x_0_3, x_1_1, x_1_2, x_1_3,
           x_2_2, x_2_3, x_3_3

    Returns:
        (float, numpy.ndarray): A tuple containing the S_4 value and its gradient.
    """
    # Assign variables from input vector
    x_0_0 = x_vec[0]
    x_0_1 = x_vec[1]
    x_0_2 = x_vec[2]
    x_0_3 = x_vec[3]
    x_1_1 = x_vec[4]
    x_1_2 = x_vec[5]
    x_1_3 = x_vec[6]
    x_2_2 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_3 = x_vec[9]

    # Common subexpressions for value and gradient
    x0 = x_2_3**2
    x1 = x0*x_1_1
    x2 = x_1_2**2
    x3 = x2*x_3_3
    x4 = x_1_3**2
    x5 = x4*x_2_2
    x6 = x_0_1**2
    x7 = x6*x_3_3
    x8 = x_0_2**2
    x9 = x8*x_3_3
    x10 = x_0_3**2
    x11 = x10*x_2_2
    x12 = x_1_3*x_2_3
    x13 = x12*x_0_2
    x14 = 2*x_0_1
    x15 = x_0_3*x_2_3
    x16 = x15*x_1_2
    x17 = x_0_3*x_1_3
    x18 = x17*x_1_2
    x19 = x_1_2*x_3_3
    x20 = x_1_2*x_2_3
    x21 = x_0_2*x_1_2
    x22 = x_0_1*x_0_2

    # Final calculations
    result = x0*x6 - x1*x_0_0 + x10*x2 - x11*x_1_1 - x13*x14 - x14*x16 - 2*x18*x_0_2 - x3*x_0_0 + x4*x8 - x5*x_0_0 - x7*x_2_2 - x9*x_1_1 + x_0_0*x_1_1*x_2_2*x_3_3 + 2*x_0_0*x_1_2*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_1_2*x_3_3 + 2*x_0_1*x_0_3*x_1_3*x_2_2 + 2*x_0_2*x_0_3*x_1_1*x_2_3
    gradient = np.array([
        -x1 - x3 - x5 + x_1_1*x_2_2*x_3_3 + 2*x_1_2*x_1_3*x_2_3,
        2*x0*x_0_1 - 2*x13 - 2*x16 - 2*x_0_1*x_2_2*x_3_3 + 2*x_0_2*x_1_2*x_3_3 + 2*x_0_3*x_1_3*x_2_2,
        -2*x12*x_0_1 + 2*x15*x_1_1 - 2*x18 + 2*x19*x_0_1 + 2*x4*x_0_2 - 2*x_0_2*x_1_1*x_3_3,
        2*x2*x_0_3 - 2*x20*x_0_1 - 2*x21*x_1_3 + 2*x_0_1*x_1_3*x_2_2 + 2*x_0_2*x_1_1*x_2_3 - 2*x_0_3*x_1_1*x_2_2,
        -x0*x_0_0 - x11 - x9 + x_0_0*x_2_2*x_3_3 + 2*x_0_2*x_0_3*x_2_3,
        2*x10*x_1_2 - 2*x15*x_0_1 - 2*x17*x_0_2 - 2*x19*x_0_0 + 2*x_0_0*x_1_3*x_2_3 + 2*x_0_1*x_0_2*x_3_3,
        2*x20*x_0_0 - 2*x21*x_0_3 - 2*x22*x_2_3 + 2*x8*x_1_3 - 2*x_0_0*x_1_3*x_2_2 + 2*x_0_1*x_0_3*x_2_2,
        -x10*x_1_1 - x4*x_0_0 - x7 + x_0_0*x_1_1*x_3_3 + 2*x_0_1*x_0_3*x_1_3,
        -2*x22*x_1_3 + 2*x6*x_2_3 - 2*x_0_0*x_1_1*x_2_3 + 2*x_0_0*x_1_2*x_1_3 - 2*x_0_1*x_0_3*x_1_2 + 2*x_0_2*x_0_3*x_1_1,
        -x2*x_0_0 - x6*x_2_2 - x8*x_1_1 + x_0_0*x_1_1*x_2_2 + 2*x_0_1*x_0_2*x_1_2
    ])
    
    return result, gradient


