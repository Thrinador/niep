# -*- coding: utf-8 -*-
# Separated Value, Jacobian, & Hessian Functions for N = 4 (matrix_type='niep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import numpy as np
import numba

# --- Functions for S_1 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4(x_vec):
    """Calculates the value of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    return -x_0_1 - x_0_2 - x_0_3 - x_1_0 - x_1_2 - x_1_3 - x_2_0 - x_2_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    return np.array([-1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    hessian = np.empty((12, 12))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 0
    hessian[0, 6] = 0
    hessian[0, 7] = 0
    hessian[0, 8] = 0
    hessian[0, 9] = 0
    hessian[0, 10] = 0
    hessian[0, 11] = 0
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[1, 6] = 0
    hessian[1, 7] = 0
    hessian[1, 8] = 0
    hessian[1, 9] = 0
    hessian[1, 10] = 0
    hessian[1, 11] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[2, 6] = 0
    hessian[2, 7] = 0
    hessian[2, 8] = 0
    hessian[2, 9] = 0
    hessian[2, 10] = 0
    hessian[2, 11] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 0
    hessian[3, 7] = 0
    hessian[3, 8] = 0
    hessian[3, 9] = 0
    hessian[3, 10] = 0
    hessian[3, 11] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 0
    hessian[4, 7] = 0
    hessian[4, 8] = 0
    hessian[4, 9] = 0
    hessian[4, 10] = 0
    hessian[4, 11] = 0
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 0
    hessian[5, 7] = 0
    hessian[5, 8] = 0
    hessian[5, 9] = 0
    hessian[5, 10] = 0
    hessian[5, 11] = 0
    hessian[6, 0] = 0
    hessian[6, 1] = 0
    hessian[6, 2] = 0
    hessian[6, 3] = 0
    hessian[6, 4] = 0
    hessian[6, 5] = 0
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 0
    hessian[6, 10] = 0
    hessian[6, 11] = 0
    hessian[7, 0] = 0
    hessian[7, 1] = 0
    hessian[7, 2] = 0
    hessian[7, 3] = 0
    hessian[7, 4] = 0
    hessian[7, 5] = 0
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 0
    hessian[7, 10] = 0
    hessian[7, 11] = 0
    hessian[8, 0] = 0
    hessian[8, 1] = 0
    hessian[8, 2] = 0
    hessian[8, 3] = 0
    hessian[8, 4] = 0
    hessian[8, 5] = 0
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = 0
    hessian[8, 10] = 0
    hessian[8, 11] = 0
    hessian[9, 0] = 0
    hessian[9, 1] = 0
    hessian[9, 2] = 0
    hessian[9, 3] = 0
    hessian[9, 4] = 0
    hessian[9, 5] = 0
    hessian[9, 6] = 0
    hessian[9, 7] = 0
    hessian[9, 8] = 0
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[10, 0] = 0
    hessian[10, 1] = 0
    hessian[10, 2] = 0
    hessian[10, 3] = 0
    hessian[10, 4] = 0
    hessian[10, 5] = 0
    hessian[10, 6] = 0
    hessian[10, 7] = 0
    hessian[10, 8] = 0
    hessian[10, 9] = 0
    hessian[10, 10] = 0
    hessian[10, 11] = 0
    hessian[11, 0] = 0
    hessian[11, 1] = 0
    hessian[11, 2] = 0
    hessian[11, 3] = 0
    hessian[11, 4] = 0
    hessian[11, 5] = 0
    hessian[11, 6] = 0
    hessian[11, 7] = 0
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = 0
    return hessian


# --- Functions for S_2 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4(x_vec):
    """Calculates the value of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    return x_0_1*x_1_2 + x_0_1*x_1_3 + x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_1*x_2_3 + x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_1*x_3_2 - 3*x_0_1 + x_0_2*x_1_0 + x_0_2*x_1_2 + x_0_2*x_1_3 + x_0_2*x_2_1 + x_0_2*x_2_3 + x_0_2*x_3_0 + x_0_2*x_3_1 + x_0_2*x_3_2 - 3*x_0_2 + x_0_3*x_1_0 + x_0_3*x_1_2 + x_0_3*x_1_3 + x_0_3*x_2_0 + x_0_3*x_2_1 + x_0_3*x_2_3 + x_0_3*x_3_1 + x_0_3*x_3_2 - 3*x_0_3 + x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_0*x_2_3 + x_1_0*x_3_0 + x_1_0*x_3_1 + x_1_0*x_3_2 - 3*x_1_0 + x_1_2*x_2_0 + x_1_2*x_2_3 + x_1_2*x_3_0 + x_1_2*x_3_1 + x_1_2*x_3_2 - 3*x_1_2 + x_1_3*x_2_0 + x_1_3*x_2_1 + x_1_3*x_2_3 + x_1_3*x_3_0 + x_1_3*x_3_2 - 3*x_1_3 + x_2_0*x_3_0 + x_2_0*x_3_1 + x_2_0*x_3_2 - 3*x_2_0 + x_2_1*x_3_0 + x_2_1*x_3_1 + x_2_1*x_3_2 - 3*x_2_1 + x_2_3*x_3_0 + x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 6



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_1_3 + x_3_0 + x_3_1 + x_3_2 - 3
    x1 = x_1_2 + x_2_0 + x_2_1 + x_2_3
    x2 = x_2_1 + x_2_3
    x3 = x0 + x_1_0
    x4 = x3 + x_1_2
    x5 = x_3_2 - 3
    x6 = x5 + x_3_1
    x7 = x1 + x_1_0
    x8 = x7 + x_1_3
    x9 = x_0_2 + x_0_3
    x10 = x9 + x_3_0
    x11 = x10 + x6 + x_2_0
    x12 = x10 + x_0_1
    x13 = x9 + x_0_1
    x14 = x_1_0 + x_1_2 + x_1_3 - 3
    return np.array([x0 + x1,
        x2 + x4,
        x6 + x8,
        x11 + x2,
        x11 + x_0_1 + x_2_3,
        x12 + x2 + x5 + x_2_0,
        x4 + x_0_1 + x_0_3,
        x13 + x3,
        x12 + x14 + x_3_1,
        x8 + x_0_1 + x_0_2 - 3,
        x13 + x7 - 3,
        x13 + x14 + x_2_0 + x_2_1])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    hessian = np.empty((12, 12))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 1
    hessian[0, 5] = 1
    hessian[0, 6] = 1
    hessian[0, 7] = 1
    hessian[0, 8] = 1
    hessian[0, 9] = 1
    hessian[0, 10] = 1
    hessian[0, 11] = 1
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 1
    hessian[1, 4] = 1
    hessian[1, 5] = 1
    hessian[1, 6] = 0
    hessian[1, 7] = 1
    hessian[1, 8] = 1
    hessian[1, 9] = 1
    hessian[1, 10] = 1
    hessian[1, 11] = 1
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 1
    hessian[2, 4] = 1
    hessian[2, 5] = 1
    hessian[2, 6] = 1
    hessian[2, 7] = 1
    hessian[2, 8] = 1
    hessian[2, 9] = 0
    hessian[2, 10] = 1
    hessian[2, 11] = 1
    hessian[3, 0] = 0
    hessian[3, 1] = 1
    hessian[3, 2] = 1
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = 1
    hessian[3, 7] = 1
    hessian[3, 8] = 1
    hessian[3, 9] = 1
    hessian[3, 10] = 1
    hessian[3, 11] = 1
    hessian[4, 0] = 1
    hessian[4, 1] = 1
    hessian[4, 2] = 1
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = 1
    hessian[4, 7] = 0
    hessian[4, 8] = 1
    hessian[4, 9] = 1
    hessian[4, 10] = 1
    hessian[4, 11] = 1
    hessian[5, 0] = 1
    hessian[5, 1] = 1
    hessian[5, 2] = 1
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = 1
    hessian[5, 7] = 1
    hessian[5, 8] = 1
    hessian[5, 9] = 1
    hessian[5, 10] = 0
    hessian[5, 11] = 1
    hessian[6, 0] = 1
    hessian[6, 1] = 0
    hessian[6, 2] = 1
    hessian[6, 3] = 1
    hessian[6, 4] = 1
    hessian[6, 5] = 1
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = 1
    hessian[6, 10] = 1
    hessian[6, 11] = 1
    hessian[7, 0] = 1
    hessian[7, 1] = 1
    hessian[7, 2] = 1
    hessian[7, 3] = 1
    hessian[7, 4] = 0
    hessian[7, 5] = 1
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = 1
    hessian[7, 10] = 1
    hessian[7, 11] = 1
    hessian[8, 0] = 1
    hessian[8, 1] = 1
    hessian[8, 2] = 1
    hessian[8, 3] = 1
    hessian[8, 4] = 1
    hessian[8, 5] = 1
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = 1
    hessian[8, 10] = 1
    hessian[8, 11] = 0
    hessian[9, 0] = 1
    hessian[9, 1] = 1
    hessian[9, 2] = 0
    hessian[9, 3] = 1
    hessian[9, 4] = 1
    hessian[9, 5] = 1
    hessian[9, 6] = 1
    hessian[9, 7] = 1
    hessian[9, 8] = 1
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[10, 0] = 1
    hessian[10, 1] = 1
    hessian[10, 2] = 1
    hessian[10, 3] = 1
    hessian[10, 4] = 1
    hessian[10, 5] = 0
    hessian[10, 6] = 1
    hessian[10, 7] = 1
    hessian[10, 8] = 1
    hessian[10, 9] = 0
    hessian[10, 10] = 0
    hessian[10, 11] = 0
    hessian[11, 0] = 1
    hessian[11, 1] = 1
    hessian[11, 2] = 1
    hessian[11, 3] = 1
    hessian[11, 4] = 1
    hessian[11, 5] = 1
    hessian[11, 6] = 1
    hessian[11, 7] = 1
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = 0
    return hessian


# --- Functions for S_3 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4(x_vec):
    """Calculates the value of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_0_1*x_1_2
    x1 = x_0_1*x_1_3
    x2 = x_0_1*x_2_0
    x3 = x_0_1*x_2_1
    x4 = x_0_1*x_2_3
    x5 = x_0_2*x_1_0
    x6 = x_0_2*x_1_2
    x7 = x_0_2*x_1_3
    x8 = x_0_2*x_2_1
    x9 = x_2_3*x_3_1
    x10 = x_0_3*x_1_0
    x11 = x_0_3*x_1_2
    x12 = x_0_3*x_1_3
    x13 = x_0_3*x_3_1
    x14 = x_2_1*x_3_2
    x15 = x_1_0*x_2_0
    x16 = x_1_0*x_2_1
    x17 = x_2_3*x_3_0
    x18 = x_1_2*x_2_0
    x19 = x_1_3*x_2_0
    return -x0*x_2_3 - x0*x_3_0 - x0*x_3_1 - x0*x_3_2 - x1*x_2_0 - x1*x_2_1 - x1*x_2_3 - x1*x_3_2 - x10*x_2_0 - x10*x_2_1 - x10*x_2_3 - x10*x_3_2 - x11*x_2_0 - x11*x_2_3 - x11*x_3_1 - x11*x_3_2 - x12*x_2_0 - x12*x_2_1 - x12*x_2_3 - x12*x_3_2 - x13*x_2_0 - x13*x_2_1 - x14*x_0_3 - x14*x_1_0 - x15*x_3_0 - x15*x_3_1 - x15*x_3_2 - x16*x_3_0 - x16*x_3_1 - x17*x_1_0 - x17*x_1_2 - x17*x_1_3 - x18*x_3_0 - x18*x_3_1 - x18*x_3_2 - x19*x_3_0 - x19*x_3_2 - x2*x_3_0 - x2*x_3_1 - x2*x_3_2 - x3*x_3_0 - x3*x_3_1 - x3*x_3_2 - x4*x_3_0 - x4*x_3_1 - x5*x_2_3 - x5*x_3_0 - x5*x_3_1 - x5*x_3_2 - x6*x_2_3 - x6*x_3_0 - x6*x_3_1 - x6*x_3_2 - x7*x_2_1 - x7*x_2_3 - x7*x_3_0 - x7*x_3_2 - x8*x_3_0 - x8*x_3_1 - x8*x_3_2 - x9*x_0_2 - x9*x_0_3 - x9*x_1_0 + 2*x_0_1*x_1_2 + 2*x_0_1*x_1_3 + 2*x_0_1*x_2_0 + 2*x_0_1*x_2_1 + 2*x_0_1*x_2_3 + 2*x_0_1*x_3_0 + 2*x_0_1*x_3_1 + 2*x_0_1*x_3_2 - 3*x_0_1 + 2*x_0_2*x_1_0 + 2*x_0_2*x_1_2 + 2*x_0_2*x_1_3 + 2*x_0_2*x_2_1 + 2*x_0_2*x_2_3 + 2*x_0_2*x_3_0 + 2*x_0_2*x_3_1 + 2*x_0_2*x_3_2 - 3*x_0_2 + 2*x_0_3*x_1_0 + 2*x_0_3*x_1_2 + 2*x_0_3*x_1_3 + 2*x_0_3*x_2_0 + 2*x_0_3*x_2_1 + 2*x_0_3*x_2_3 + 2*x_0_3*x_3_1 + 2*x_0_3*x_3_2 - 3*x_0_3 + 2*x_1_0*x_2_0 + 2*x_1_0*x_2_1 + 2*x_1_0*x_2_3 + 2*x_1_0*x_3_0 + 2*x_1_0*x_3_1 + 2*x_1_0*x_3_2 - 3*x_1_0 + 2*x_1_2*x_2_0 + 2*x_1_2*x_2_3 + 2*x_1_2*x_3_0 + 2*x_1_2*x_3_1 + 2*x_1_2*x_3_2 - 3*x_1_2 + 2*x_1_3*x_2_0 - x_1_3*x_2_1*x_3_0 + 2*x_1_3*x_2_1 + 2*x_1_3*x_2_3 + 2*x_1_3*x_3_0 + 2*x_1_3*x_3_2 - 3*x_1_3 + 2*x_2_0*x_3_0 + 2*x_2_0*x_3_1 + 2*x_2_0*x_3_2 - 3*x_2_0 + 2*x_2_1*x_3_0 + 2*x_2_1*x_3_1 + 2*x_2_1*x_3_2 - 3*x_2_1 + 2*x_2_3*x_3_0 + 2*x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_1_2*x_3_0
    x1 = x_1_2*x_3_1
    x2 = x_1_2*x_3_2
    x3 = x_1_3*x_3_2
    x4 = -2*x_1_3
    x5 = -2*x_3_0
    x6 = -2*x_3_1
    x7 = -2*x_3_2
    x8 = x4 + x5 + x6 + x7 + 3
    x9 = x0 + x1 + x2 + x3 + x8
    x10 = x_1_2*x_2_3
    x11 = x_1_3*x_2_0
    x12 = x_1_3*x_2_1
    x13 = x_1_3*x_2_3
    x14 = -2*x_1_2
    x15 = -2*x_2_0
    x16 = -2*x_2_1
    x17 = -2*x_2_3
    x18 = x14 + x15 + x16 + x17
    x19 = x10 + x11 + x12 + x13 + x18
    x20 = x_2_1*x_3_0
    x21 = x_2_1*x_3_1
    x22 = x_2_1*x_3_2
    x23 = x_2_3*x_3_1
    x24 = x_2_0*x_3_0
    x25 = x_2_0*x_3_1
    x26 = x_2_0*x_3_2
    x27 = x_2_3*x_3_0
    x28 = x24 + x25 + x26 + x27
    x29 = x20 + x21 + x22 + x23 + x28
    x30 = x16 + x17
    x31 = x20 + x30
    x32 = -2*x_1_0
    x33 = x32 + x_1_0*x_2_3
    x34 = x21 + x22 + x23 + x33
    x35 = x_1_0*x_3_0
    x36 = x_1_0*x_3_1
    x37 = x_1_0*x_3_2
    x38 = x_1_3*x_3_0
    x39 = x35 + x36 + x37 + x38
    x40 = x14 + x39 + x9
    x41 = x7 + 3
    x42 = x41 + x6
    x43 = x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_2*x_2_0
    x44 = x4 + x43
    x45 = x19 + x44
    x46 = x_0_3*x_2_1
    x47 = x15 + x46
    x48 = x_0_2*x_3_0 + x_0_2*x_3_2 + x_0_3*x_3_2
    x49 = x_0_2*x_2_3 + x_0_3*x_2_0 + x_0_3*x_2_3
    x50 = x47 + x48 + x49
    x51 = -2*x_0_2
    x52 = -2*x_0_3
    x53 = x_0_2*x_3_1
    x54 = x5 + x51 + x52 + x53
    x55 = x42 + x54
    x56 = x_0_1*x_3_2
    x57 = -2*x_0_1
    x58 = x57 + x_0_1*x_2_3
    x59 = x56 + x58
    x60 = x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_3*x_3_1
    x61 = x48 + x60
    x62 = x51 + x52
    x63 = x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_2*x_2_1
    x64 = x62 + x63
    x65 = x_0_1*x_1_3
    x66 = x_0_3*x_1_0
    x67 = x_0_3*x_1_3
    x68 = x32 + x56 + x57 + x65 + x66 + x67
    x69 = x_0_3*x_1_2
    x70 = x60 + x69
    x71 = x_0_2*x_1_3
    x72 = x_0_1*x_1_2 + x_0_2*x_1_0 + x_0_2*x_1_2 + 3
    x73 = x71 + x72
    x74 = x14 + x32 + x57 + x65 + x66 + x67 + x73
    x75 = x33 + x58
    x76 = x64 + x69
    return np.array([-x19 - x29 - x9,
        -x10 - x12 - x13 - x31 - x34 - x40,
        -x1 - x2 - x25 - x3 - x34 - x37 - x42 - x45,
        -x29 - x30 - x50 - x55,
        -x15 - x17 - x28 - x49 - x55 - x59 - x61,
        -x24 - x26 - x27 - x31 - x41 - x5 - x50 - x59 - x64,
        -x40 - x52 - x68 - x70,
        -x39 - x53 - x61 - x62 - x68 - x71 - x8,
        -x0 - x35 - x36 - x38 - x4 - x54 - x6 - x70 - x74,
        -x45 - x51 - x63 - x73 - x75,
        -x18 - x43 - x46 - x49 - x72 - x75 - x76,
        -x11 - x16 - x44 - x47 - x74 - x76])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_2_3 - 2
    x1 = x0 + x_3_2
    x2 = x_3_0 + x_3_1
    x3 = -x1 - x2
    x4 = x_2_0 + x_2_1
    x5 = -x1 - x4
    x6 = x_1_3 - 2
    x7 = x2 + x6
    x8 = -x7 - x_3_2
    x9 = -x7 - x_1_2
    x10 = x4 + x_1_2
    x11 = -x0 - x10
    x12 = -x10 - x6
    x13 = -x1 - x_2_1 - x_3_0
    x14 = x_1_0 + x_1_2
    x15 = x14 + x6
    x16 = -x15 - x_3_1
    x17 = -x15 - x_2_1
    x18 = -x0 - x14 - x_2_1
    x19 = -x1 - x_2_0 - x_3_1
    x20 = x6 + x_1_0
    x21 = -x20 - x_3_1 - x_3_2
    x22 = x_0_3 - 2
    x23 = x2 + x22
    x24 = -x23 - x_3_2
    x25 = -x23 - x_0_2
    x26 = x4 + x_0_2
    x27 = -x0 - x26
    x28 = -x22 - x26
    x29 = x_0_1 + x_0_2
    x30 = x22 + x29
    x31 = -x30 - x_3_0
    x32 = -x0 - x29 - x_2_0
    x33 = -x30 - x_2_0
    x34 = x22 + x_0_1
    x35 = -x34 - x_3_0 - x_3_2
    x36 = -x15 - x_0_1
    x37 = -x14 - x34
    x38 = -x20 - x29
    x39 = -x30 - x_1_0
    hessian = np.empty((12, 12))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = x3
    hessian[0, 5] = x5
    hessian[0, 6] = x8
    hessian[0, 7] = x8
    hessian[0, 8] = x9
    hessian[0, 9] = x11
    hessian[0, 10] = x11
    hessian[0, 11] = x12
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = x3
    hessian[1, 4] = x3
    hessian[1, 5] = x13
    hessian[1, 6] = 0
    hessian[1, 7] = x8
    hessian[1, 8] = x16
    hessian[1, 9] = x17
    hessian[1, 10] = x18
    hessian[1, 11] = x17
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = x5
    hessian[2, 4] = x19
    hessian[2, 5] = x5
    hessian[2, 6] = x16
    hessian[2, 7] = x21
    hessian[2, 8] = x16
    hessian[2, 9] = 0
    hessian[2, 10] = x11
    hessian[2, 11] = x17
    hessian[3, 0] = 0
    hessian[3, 1] = x3
    hessian[3, 2] = x5
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = x24
    hessian[3, 7] = x24
    hessian[3, 8] = x25
    hessian[3, 9] = x27
    hessian[3, 10] = x27
    hessian[3, 11] = x28
    hessian[4, 0] = x3
    hessian[4, 1] = x3
    hessian[4, 2] = x19
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = x24
    hessian[4, 7] = 0
    hessian[4, 8] = x31
    hessian[4, 9] = x32
    hessian[4, 10] = x33
    hessian[4, 11] = x33
    hessian[5, 0] = x5
    hessian[5, 1] = x13
    hessian[5, 2] = x5
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = x35
    hessian[5, 7] = x31
    hessian[5, 8] = x31
    hessian[5, 9] = x27
    hessian[5, 10] = 0
    hessian[5, 11] = x33
    hessian[6, 0] = x8
    hessian[6, 1] = 0
    hessian[6, 2] = x16
    hessian[6, 3] = x24
    hessian[6, 4] = x24
    hessian[6, 5] = x35
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = x36
    hessian[6, 10] = x37
    hessian[6, 11] = x36
    hessian[7, 0] = x8
    hessian[7, 1] = x8
    hessian[7, 2] = x21
    hessian[7, 3] = x24
    hessian[7, 4] = 0
    hessian[7, 5] = x31
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = x38
    hessian[7, 10] = x39
    hessian[7, 11] = x39
    hessian[8, 0] = x9
    hessian[8, 1] = x16
    hessian[8, 2] = x16
    hessian[8, 3] = x25
    hessian[8, 4] = x31
    hessian[8, 5] = x31
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = x36
    hessian[8, 10] = x39
    hessian[8, 11] = 0
    hessian[9, 0] = x11
    hessian[9, 1] = x17
    hessian[9, 2] = 0
    hessian[9, 3] = x27
    hessian[9, 4] = x32
    hessian[9, 5] = x27
    hessian[9, 6] = x36
    hessian[9, 7] = x38
    hessian[9, 8] = x36
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[10, 0] = x11
    hessian[10, 1] = x18
    hessian[10, 2] = x11
    hessian[10, 3] = x27
    hessian[10, 4] = x33
    hessian[10, 5] = 0
    hessian[10, 6] = x37
    hessian[10, 7] = x39
    hessian[10, 8] = x39
    hessian[10, 9] = 0
    hessian[10, 10] = 0
    hessian[10, 11] = 0
    hessian[11, 0] = x12
    hessian[11, 1] = x17
    hessian[11, 2] = x17
    hessian[11, 3] = x28
    hessian[11, 4] = x33
    hessian[11, 5] = x33
    hessian[11, 6] = x36
    hessian[11, 7] = x39
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = 0
    return hessian


# --- Functions for S_4 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4(x_vec):
    """Calculates the value of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_0_1*x_1_2
    x1 = x_0_1*x_1_3
    x2 = x_0_1*x_2_0
    x3 = x_0_1*x_2_1
    x4 = x_0_1*x_2_3
    x5 = x_0_2*x_1_0
    x6 = x_0_2*x_1_2
    x7 = x_0_2*x_1_3
    x8 = x_0_2*x_2_1
    x9 = x_0_3*x_1_0
    x10 = x_0_3*x_1_2
    x11 = x_0_3*x_1_3
    x12 = x_0_3*x_2_1
    x13 = x_1_0*x_2_0
    x14 = x_1_0*x_2_1
    x15 = x_1_0*x_2_3
    x16 = x_1_2*x_2_0
    x17 = x_1_3*x_2_0
    return -x0*x_2_3 - x0*x_3_0 - x0*x_3_1 - x0*x_3_2 - x1*x_2_0 - x1*x_2_1 - x1*x_2_3 - x1*x_3_2 - x10*x_2_0 - x10*x_2_3 - x10*x_3_1 - x10*x_3_2 - x11*x_2_0 - x11*x_2_1 - x11*x_2_3 - x11*x_3_2 - x12*x_3_1 - x12*x_3_2 - x13*x_3_0 - x13*x_3_1 - x13*x_3_2 - x14*x_3_0 - x14*x_3_1 - x14*x_3_2 - x15*x_3_0 - x15*x_3_1 - x16*x_3_0 - x16*x_3_1 - x16*x_3_2 - x17*x_3_0 - x17*x_3_2 - x2*x_3_0 - x2*x_3_1 - x2*x_3_2 - x3*x_3_0 - x3*x_3_1 - x3*x_3_2 - x4*x_3_0 - x4*x_3_1 - x5*x_2_3 - x5*x_3_0 - x5*x_3_1 - x5*x_3_2 - x6*x_2_3 - x6*x_3_0 - x6*x_3_1 - x6*x_3_2 - x7*x_2_1 - x7*x_2_3 - x7*x_3_0 - x7*x_3_2 - x8*x_3_0 - x8*x_3_1 - x8*x_3_2 - x9*x_2_0 - x9*x_2_1 - x9*x_2_3 - x9*x_3_2 + x_0_1*x_1_2 + x_0_1*x_1_3 + x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_1*x_2_3 + x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_1*x_3_2 - x_0_1 + x_0_2*x_1_0 + x_0_2*x_1_2 + x_0_2*x_1_3 + x_0_2*x_2_1 - x_0_2*x_2_3*x_3_1 + x_0_2*x_2_3 + x_0_2*x_3_0 + x_0_2*x_3_1 + x_0_2*x_3_2 - x_0_2 + x_0_3*x_1_0 + x_0_3*x_1_2 + x_0_3*x_1_3 - x_0_3*x_2_0*x_3_1 + x_0_3*x_2_0 + x_0_3*x_2_1 - x_0_3*x_2_3*x_3_1 + x_0_3*x_2_3 + x_0_3*x_3_1 + x_0_3*x_3_2 - x_0_3 + x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_0*x_2_3 + x_1_0*x_3_0 + x_1_0*x_3_1 + x_1_0*x_3_2 - x_1_0 + x_1_2*x_2_0 - x_1_2*x_2_3*x_3_0 + x_1_2*x_2_3 + x_1_2*x_3_0 + x_1_2*x_3_1 + x_1_2*x_3_2 - x_1_2 + x_1_3*x_2_0 - x_1_3*x_2_1*x_3_0 + x_1_3*x_2_1 - x_1_3*x_2_3*x_3_0 + x_1_3*x_2_3 + x_1_3*x_3_0 + x_1_3*x_3_2 - x_1_3 + x_2_0*x_3_0 + x_2_0*x_3_1 + x_2_0*x_3_2 - x_2_0 + x_2_1*x_3_0 + x_2_1*x_3_1 + x_2_1*x_3_2 - x_2_1 + x_2_3*x_3_0 + x_2_3*x_3_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 1



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_1_2*x_3_0
    x1 = x_1_2*x_3_1
    x2 = x_1_2*x_3_2
    x3 = x_1_3*x_3_2
    x4 = -x_1_3
    x5 = -x_3_0
    x6 = -x_3_1
    x7 = -x_3_2
    x8 = x4 + x5 + x6 + x7 + 1
    x9 = x0 + x1 + x2 + x3 + x8
    x10 = x_1_2*x_2_3
    x11 = x_1_3*x_2_0
    x12 = x_1_3*x_2_1
    x13 = x_1_3*x_2_3
    x14 = -x_1_2
    x15 = -x_2_0
    x16 = -x_2_1
    x17 = -x_2_3
    x18 = x14 + x15 + x16 + x17
    x19 = x10 + x11 + x12 + x13 + x18
    x20 = x_2_1*x_3_0
    x21 = x_2_1*x_3_1
    x22 = x_2_1*x_3_2
    x23 = x_2_3*x_3_1
    x24 = x_2_0*x_3_0
    x25 = x_2_0*x_3_1
    x26 = x_2_0*x_3_2
    x27 = x_2_3*x_3_0
    x28 = x24 + x25 + x26 + x27
    x29 = x20 + x21 + x22 + x23 + x28
    x30 = x16 + x17
    x31 = x20 + x30
    x32 = -x_1_0
    x33 = x32 + x_1_0*x_2_3
    x34 = x21 + x22 + x23 + x33
    x35 = x_1_0*x_3_0
    x36 = x_1_0*x_3_1
    x37 = x_1_0*x_3_2
    x38 = x_1_3*x_3_0
    x39 = x35 + x36 + x37 + x38
    x40 = x14 + x39 + x9
    x41 = x7 + 1
    x42 = x41 + x6
    x43 = x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_2*x_2_0
    x44 = x4 + x43
    x45 = x19 + x44
    x46 = x_0_3*x_2_1
    x47 = x15 + x46
    x48 = x_0_2*x_3_0 + x_0_2*x_3_2 + x_0_3*x_3_2
    x49 = x_0_2*x_2_3 + x_0_3*x_2_0 + x_0_3*x_2_3
    x50 = x47 + x48 + x49
    x51 = -x_0_2
    x52 = -x_0_3
    x53 = x_0_2*x_3_1
    x54 = x5 + x51 + x52 + x53
    x55 = x42 + x54
    x56 = x_0_1*x_3_2
    x57 = -x_0_1
    x58 = x57 + x_0_1*x_2_3
    x59 = x56 + x58
    x60 = x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_3*x_3_1
    x61 = x48 + x60
    x62 = x51 + x52
    x63 = x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_2*x_2_1
    x64 = x62 + x63
    x65 = x_0_1*x_1_3
    x66 = x_0_3*x_1_0
    x67 = x_0_3*x_1_3
    x68 = x32 + x56 + x57 + x65 + x66 + x67
    x69 = x_0_3*x_1_2
    x70 = x60 + x69
    x71 = x_0_2*x_1_3
    x72 = x_0_1*x_1_2 + x_0_2*x_1_0 + x_0_2*x_1_2 + 1
    x73 = x71 + x72
    x74 = x14 + x32 + x57 + x65 + x66 + x67 + x73
    x75 = x33 + x58
    x76 = x64 + x69
    return np.array([-x19 - x29 - x9,
        -x10 - x12 - x13 - x31 - x34 - x40,
        -x1 - x2 - x25 - x3 - x34 - x37 - x42 - x45,
        -x29 - x30 - x50 - x55,
        -x15 - x17 - x28 - x49 - x55 - x59 - x61,
        -x24 - x26 - x27 - x31 - x41 - x5 - x50 - x59 - x64,
        -x40 - x52 - x68 - x70,
        -x39 - x53 - x61 - x62 - x68 - x71 - x8,
        -x0 - x35 - x36 - x38 - x4 - x54 - x6 - x70 - x74,
        -x45 - x51 - x63 - x73 - x75,
        -x18 - x43 - x46 - x49 - x72 - x75 - x76,
        -x11 - x16 - x44 - x47 - x74 - x76])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    x0 = x_2_3 - 1
    x1 = x0 + x_3_2
    x2 = x_3_0 + x_3_1
    x3 = -x1 - x2
    x4 = x_2_0 + x_2_1
    x5 = -x1 - x4
    x6 = x_1_3 - 1
    x7 = x2 + x6
    x8 = -x7 - x_3_2
    x9 = -x7 - x_1_2
    x10 = x4 + x_1_2
    x11 = -x0 - x10
    x12 = -x10 - x6
    x13 = -x1 - x_2_1 - x_3_0
    x14 = x_1_0 + x_1_2
    x15 = x14 + x6
    x16 = -x15 - x_3_1
    x17 = -x15 - x_2_1
    x18 = -x0 - x14 - x_2_1
    x19 = -x1 - x_2_0 - x_3_1
    x20 = x6 + x_1_0
    x21 = -x20 - x_3_1 - x_3_2
    x22 = x_0_3 - 1
    x23 = x2 + x22
    x24 = -x23 - x_3_2
    x25 = -x23 - x_0_2
    x26 = x4 + x_0_2
    x27 = -x0 - x26
    x28 = -x22 - x26
    x29 = x_0_1 + x_0_2
    x30 = x22 + x29
    x31 = -x30 - x_3_0
    x32 = -x0 - x29 - x_2_0
    x33 = -x30 - x_2_0
    x34 = x22 + x_0_1
    x35 = -x34 - x_3_0 - x_3_2
    x36 = -x15 - x_0_1
    x37 = -x14 - x34
    x38 = -x20 - x29
    x39 = -x30 - x_1_0
    hessian = np.empty((12, 12))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = x3
    hessian[0, 5] = x5
    hessian[0, 6] = x8
    hessian[0, 7] = x8
    hessian[0, 8] = x9
    hessian[0, 9] = x11
    hessian[0, 10] = x11
    hessian[0, 11] = x12
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = x3
    hessian[1, 4] = x3
    hessian[1, 5] = x13
    hessian[1, 6] = 0
    hessian[1, 7] = x8
    hessian[1, 8] = x16
    hessian[1, 9] = x17
    hessian[1, 10] = x18
    hessian[1, 11] = x17
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = x5
    hessian[2, 4] = x19
    hessian[2, 5] = x5
    hessian[2, 6] = x16
    hessian[2, 7] = x21
    hessian[2, 8] = x16
    hessian[2, 9] = 0
    hessian[2, 10] = x11
    hessian[2, 11] = x17
    hessian[3, 0] = 0
    hessian[3, 1] = x3
    hessian[3, 2] = x5
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[3, 6] = x24
    hessian[3, 7] = x24
    hessian[3, 8] = x25
    hessian[3, 9] = x27
    hessian[3, 10] = x27
    hessian[3, 11] = x28
    hessian[4, 0] = x3
    hessian[4, 1] = x3
    hessian[4, 2] = x19
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[4, 6] = x24
    hessian[4, 7] = 0
    hessian[4, 8] = x31
    hessian[4, 9] = x32
    hessian[4, 10] = x33
    hessian[4, 11] = x33
    hessian[5, 0] = x5
    hessian[5, 1] = x13
    hessian[5, 2] = x5
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    hessian[5, 6] = x35
    hessian[5, 7] = x31
    hessian[5, 8] = x31
    hessian[5, 9] = x27
    hessian[5, 10] = 0
    hessian[5, 11] = x33
    hessian[6, 0] = x8
    hessian[6, 1] = 0
    hessian[6, 2] = x16
    hessian[6, 3] = x24
    hessian[6, 4] = x24
    hessian[6, 5] = x35
    hessian[6, 6] = 0
    hessian[6, 7] = 0
    hessian[6, 8] = 0
    hessian[6, 9] = x36
    hessian[6, 10] = x37
    hessian[6, 11] = x36
    hessian[7, 0] = x8
    hessian[7, 1] = x8
    hessian[7, 2] = x21
    hessian[7, 3] = x24
    hessian[7, 4] = 0
    hessian[7, 5] = x31
    hessian[7, 6] = 0
    hessian[7, 7] = 0
    hessian[7, 8] = 0
    hessian[7, 9] = x38
    hessian[7, 10] = x39
    hessian[7, 11] = x39
    hessian[8, 0] = x9
    hessian[8, 1] = x16
    hessian[8, 2] = x16
    hessian[8, 3] = x25
    hessian[8, 4] = x31
    hessian[8, 5] = x31
    hessian[8, 6] = 0
    hessian[8, 7] = 0
    hessian[8, 8] = 0
    hessian[8, 9] = x36
    hessian[8, 10] = x39
    hessian[8, 11] = 0
    hessian[9, 0] = x11
    hessian[9, 1] = x17
    hessian[9, 2] = 0
    hessian[9, 3] = x27
    hessian[9, 4] = x32
    hessian[9, 5] = x27
    hessian[9, 6] = x36
    hessian[9, 7] = x38
    hessian[9, 8] = x36
    hessian[9, 9] = 0
    hessian[9, 10] = 0
    hessian[9, 11] = 0
    hessian[10, 0] = x11
    hessian[10, 1] = x18
    hessian[10, 2] = x11
    hessian[10, 3] = x27
    hessian[10, 4] = x33
    hessian[10, 5] = 0
    hessian[10, 6] = x37
    hessian[10, 7] = x39
    hessian[10, 8] = x39
    hessian[10, 9] = 0
    hessian[10, 10] = 0
    hessian[10, 11] = 0
    hessian[11, 0] = x12
    hessian[11, 1] = x17
    hessian[11, 2] = x17
    hessian[11, 3] = x28
    hessian[11, 4] = x33
    hessian[11, 5] = x33
    hessian[11, 6] = x36
    hessian[11, 7] = x39
    hessian[11, 8] = 0
    hessian[11, 9] = 0
    hessian[11, 10] = 0
    hessian[11, 11] = 0
    return hessian


