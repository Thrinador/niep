# -*- coding: utf-8 -*-
# Combined Value & Jacobian Functions for N = 4 (matrix_type='niep')
# Generated by symbolic_minors_generator.py using Newton's Sums
# Optimized for use with scipy.optimize.minimize(..., jac=True)
# DO NOT EDIT MANUALLY

import numpy as np
import numba
# The 'math' module is not needed as Numba recognizes standard functions


# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S1_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_1 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 12
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2

    Returns:
        (float, numpy.ndarray): A tuple containing the S_1 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    # Common subexpressions for value and gradient


    # Final calculations
    result = -x_0_1 - x_0_2 - x_0_3 - x_1_0 - x_1_2 - x_1_3 - x_2_0 - x_2_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 4
    gradient = np.array([
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S2_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_2 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 12
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2

    Returns:
        (float, numpy.ndarray): A tuple containing the S_2 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    # Common subexpressions for value and gradient
    x0 = x_1_3 + x_3_0 + x_3_1 + x_3_2 - 3
    x1 = x_1_2 + x_2_0 + x_2_1 + x_2_3
    x2 = x_2_1 + x_2_3
    x3 = x0 + x_1_0
    x4 = x3 + x_1_2
    x5 = x_3_2 - 3
    x6 = x5 + x_3_1
    x7 = x1 + x_1_0
    x8 = x7 + x_1_3
    x9 = x_0_2 + x_0_3
    x10 = x9 + x_3_0
    x11 = x10 + x6 + x_2_0
    x12 = x10 + x_0_1
    x13 = x9 + x_0_1
    x14 = x_1_0 + x_1_2 + x_1_3 - 3

    # Final calculations
    result = x_0_1*x_1_2 + x_0_1*x_1_3 + x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_1*x_2_3 + x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_1*x_3_2 - 3*x_0_1 + x_0_2*x_1_0 + x_0_2*x_1_2 + x_0_2*x_1_3 + x_0_2*x_2_1 + x_0_2*x_2_3 + x_0_2*x_3_0 + x_0_2*x_3_1 + x_0_2*x_3_2 - 3*x_0_2 + x_0_3*x_1_0 + x_0_3*x_1_2 + x_0_3*x_1_3 + x_0_3*x_2_0 + x_0_3*x_2_1 + x_0_3*x_2_3 + x_0_3*x_3_1 + x_0_3*x_3_2 - 3*x_0_3 + x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_0*x_2_3 + x_1_0*x_3_0 + x_1_0*x_3_1 + x_1_0*x_3_2 - 3*x_1_0 + x_1_2*x_2_0 + x_1_2*x_2_3 + x_1_2*x_3_0 + x_1_2*x_3_1 + x_1_2*x_3_2 - 3*x_1_2 + x_1_3*x_2_0 + x_1_3*x_2_1 + x_1_3*x_2_3 + x_1_3*x_3_0 + x_1_3*x_3_2 - 3*x_1_3 + x_2_0*x_3_0 + x_2_0*x_3_1 + x_2_0*x_3_2 - 3*x_2_0 + x_2_1*x_3_0 + x_2_1*x_3_1 + x_2_1*x_3_2 - 3*x_2_1 + x_2_3*x_3_0 + x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 6
    gradient = np.array([
        x0 + x1,
        x2 + x4,
        x6 + x8,
        x11 + x2,
        x11 + x_0_1 + x_2_3,
        x12 + x2 + x5 + x_2_0,
        x4 + x_0_1 + x_0_3,
        x13 + x3,
        x12 + x14 + x_3_1,
        x8 + x_0_1 + x_0_2 - 3,
        x13 + x7 - 3,
        x13 + x14 + x_2_0 + x_2_1
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S3_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_3 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 12
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2

    Returns:
        (float, numpy.ndarray): A tuple containing the S_3 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    # Common subexpressions for value and gradient
    x0 = x_1_2*x_2_3
    x1 = x_1_2*x_3_0
    x2 = x_1_2*x_3_1
    x3 = x_1_2*x_3_2
    x4 = x_1_3*x_2_0
    x5 = x_1_3*x_2_1
    x6 = x_1_3*x_2_3
    x7 = x_1_3*x_3_2
    x8 = x_2_0*x_3_0
    x9 = x_2_0*x_3_1
    x10 = x_2_0*x_3_2
    x11 = x_2_1*x_3_0
    x12 = x_2_1*x_3_1
    x13 = x_2_1*x_3_2
    x14 = x_2_3*x_3_0
    x15 = x_2_3*x_3_1
    x16 = x_1_0*x_2_3
    x17 = x_1_0*x_3_0
    x18 = x_1_0*x_3_1
    x19 = x_1_0*x_3_2
    x20 = x_1_3*x_3_0
    x21 = x_1_0*x_2_0
    x22 = x_1_0*x_2_1
    x23 = x_1_2*x_2_0
    x24 = -2*x_1_3
    x25 = -2*x_3_0
    x26 = -2*x_3_1
    x27 = -2*x_3_2
    x28 = x24 + x25 + x26 + x27 + 3
    x29 = x1 + x2 + x28 + x3 + x7
    x30 = -2*x_1_2
    x31 = -2*x_2_0
    x32 = -2*x_2_1
    x33 = -2*x_2_3
    x34 = x30 + x31 + x32 + x33
    x35 = x0 + x34 + x4 + x5 + x6
    x36 = x10 + x14 + x8 + x9
    x37 = x11 + x12 + x13 + x15 + x36
    x38 = x32 + x33
    x39 = x11 + x38
    x40 = -2*x_1_0
    x41 = x16 + x40
    x42 = x12 + x13 + x15 + x41
    x43 = x17 + x18 + x19 + x20
    x44 = x29 + x30 + x43
    x45 = x27 + 3
    x46 = x26 + x45
    x47 = x21 + x22 + x23
    x48 = x24 + x47
    x49 = x35 + x48
    x50 = x_0_3*x_2_1
    x51 = x31 + x50
    x52 = x_0_2*x_3_0 + x_0_2*x_3_2 + x_0_3*x_3_2
    x53 = x_0_2*x_2_3 + x_0_3*x_2_0 + x_0_3*x_2_3
    x54 = x51 + x52 + x53
    x55 = -2*x_0_2
    x56 = -2*x_0_3
    x57 = x_0_2*x_3_1
    x58 = x25 + x55 + x56 + x57
    x59 = x46 + x58
    x60 = x_0_1*x_3_2
    x61 = -2*x_0_1
    x62 = x61 + x_0_1*x_2_3
    x63 = x60 + x62
    x64 = x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_3*x_3_1
    x65 = x52 + x64
    x66 = x55 + x56
    x67 = x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_2*x_2_1
    x68 = x66 + x67
    x69 = x_0_1*x_1_3
    x70 = x_0_3*x_1_0
    x71 = x_0_3*x_1_3
    x72 = x40 + x60 + x61 + x69 + x70 + x71
    x73 = x_0_3*x_1_2
    x74 = x64 + x73
    x75 = x_0_2*x_1_3
    x76 = x_0_1*x_1_2 + x_0_2*x_1_0 + x_0_2*x_1_2 + 3
    x77 = x75 + x76
    x78 = x30 + x40 + x61 + x69 + x70 + x71 + x77
    x79 = x41 + x62
    x80 = x68 + x73

    # Final calculations
    result = -x0*x_0_1 - x0*x_0_2 - x0*x_0_3 - x0*x_3_0 - x1*x_0_1 - x1*x_0_2 - x1*x_2_0 - x10*x_0_1 - x10*x_1_0 - x11*x_0_1 - x11*x_0_2 - x11*x_1_0 - x12*x_0_1 - x12*x_0_2 - x12*x_0_3 - x12*x_1_0 - x13*x_0_1 - x13*x_0_2 - x13*x_0_3 - x13*x_1_0 - x14*x_0_1 - x14*x_1_0 - x15*x_0_1 - x15*x_0_2 - x15*x_0_3 - x15*x_1_0 - x16*x_0_2 - x16*x_0_3 - x17*x_0_2 - x18*x_0_2 - x19*x_0_2 - x19*x_0_3 - x2*x_0_1 - x2*x_0_2 - x2*x_0_3 - x2*x_2_0 - x20*x_0_2 - x21*x_0_3 - x22*x_0_3 - x23*x_0_3 - x3*x_0_1 - x3*x_0_2 - x3*x_0_3 - x3*x_2_0 - x4*x_0_1 - x4*x_0_3 - x4*x_3_0 - x4*x_3_2 - x5*x_0_1 - x5*x_0_2 - x5*x_0_3 - x5*x_3_0 - x6*x_0_1 - x6*x_0_2 - x6*x_0_3 - x6*x_3_0 - x7*x_0_1 - x7*x_0_2 - x7*x_0_3 - x8*x_0_1 - x8*x_1_0 - x9*x_0_1 - x9*x_0_3 - x9*x_1_0 + 2*x_0_1*x_1_2 + 2*x_0_1*x_1_3 + 2*x_0_1*x_2_0 + 2*x_0_1*x_2_1 + 2*x_0_1*x_2_3 + 2*x_0_1*x_3_0 + 2*x_0_1*x_3_1 + 2*x_0_1*x_3_2 - 3*x_0_1 + 2*x_0_2*x_1_0 + 2*x_0_2*x_1_2 + 2*x_0_2*x_1_3 + 2*x_0_2*x_2_1 + 2*x_0_2*x_2_3 + 2*x_0_2*x_3_0 + 2*x_0_2*x_3_1 + 2*x_0_2*x_3_2 - 3*x_0_2 + 2*x_0_3*x_1_0 + 2*x_0_3*x_1_2 + 2*x_0_3*x_1_3 + 2*x_0_3*x_2_0 + 2*x_0_3*x_2_1 + 2*x_0_3*x_2_3 + 2*x_0_3*x_3_1 + 2*x_0_3*x_3_2 - 3*x_0_3 + 2*x_1_0*x_2_0 + 2*x_1_0*x_2_1 + 2*x_1_0*x_2_3 + 2*x_1_0*x_3_0 + 2*x_1_0*x_3_1 + 2*x_1_0*x_3_2 - 3*x_1_0 + 2*x_1_2*x_2_0 + 2*x_1_2*x_2_3 + 2*x_1_2*x_3_0 + 2*x_1_2*x_3_1 + 2*x_1_2*x_3_2 - 3*x_1_2 + 2*x_1_3*x_2_0 + 2*x_1_3*x_2_1 + 2*x_1_3*x_2_3 + 2*x_1_3*x_3_0 + 2*x_1_3*x_3_2 - 3*x_1_3 + 2*x_2_0*x_3_0 + 2*x_2_0*x_3_1 + 2*x_2_0*x_3_2 - 3*x_2_0 + 2*x_2_1*x_3_0 + 2*x_2_1*x_3_1 + 2*x_2_1*x_3_2 - 3*x_2_1 + 2*x_2_3*x_3_0 + 2*x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 4
    gradient = np.array([
        -x29 - x35 - x37,
        -x0 - x39 - x42 - x44 - x5 - x6,
        -x19 - x2 - x3 - x42 - x46 - x49 - x7 - x9,
        -x37 - x38 - x54 - x59,
        -x31 - x33 - x36 - x53 - x59 - x63 - x65,
        -x10 - x14 - x25 - x39 - x45 - x54 - x63 - x68 - x8,
        -x44 - x56 - x72 - x74,
        -x28 - x43 - x57 - x65 - x66 - x72 - x75,
        -x1 - x17 - x18 - x20 - x24 - x26 - x58 - x74 - x78,
        -x49 - x55 - x67 - x77 - x79,
        -x34 - x47 - x50 - x53 - x76 - x79 - x80,
        -x32 - x4 - x48 - x51 - x78 - x80
    ])
    
    return result, gradient



# --------------------------------------------------------------------------
# Combined Value and Jacobian Function (S4_n4)
# Generated for use with scipy.optimize.minimize(..., jac=True)
# --------------------------------------------------------------------------
@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_value_and_jac(x_vec):
    """Calculates both the value and Jacobian of S_4 for n=4.

    Args:
        x_vec (numpy.ndarray): Input vector of length 12
           containing the variable matrix elements in the specified order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2

    Returns:
        (float, numpy.ndarray): A tuple containing the S_4 value and its gradient.
    """
    # Assign variables from input vector
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]

    # Common subexpressions for value and gradient
    x0 = x_0_1*x_1_2
    x1 = x_0_1*x_1_3
    x2 = x_0_1*x_2_0
    x3 = x_0_1*x_2_1
    x4 = x_0_1*x_2_3
    x5 = x_0_1*x_3_0
    x6 = x_0_1*x_3_1
    x7 = x_0_1*x_3_2
    x8 = x_0_2*x_1_0
    x9 = x_0_2*x_1_2
    x10 = x_0_2*x_1_3
    x11 = x_0_2*x_2_1
    x12 = x_0_2*x_2_3
    x13 = x_0_2*x_3_0
    x14 = x_0_2*x_3_1
    x15 = x_0_2*x_3_2
    x16 = x_0_3*x_1_0
    x17 = x_0_3*x_1_2
    x18 = x_0_3*x_1_3
    x19 = x_0_3*x_2_0
    x20 = x_0_3*x_2_1
    x21 = x_0_3*x_2_3
    x22 = x_0_3*x_3_1
    x23 = x_0_3*x_3_2
    x24 = x_1_0*x_2_0
    x25 = x_1_0*x_2_1
    x26 = x_1_0*x_2_3
    x27 = x_1_0*x_3_0
    x28 = x_1_0*x_3_1
    x29 = x_1_0*x_3_2
    x30 = x_1_2*x_2_0
    x31 = x_1_2*x_2_3
    x32 = x_1_2*x_3_0
    x33 = x_1_2*x_3_1
    x34 = x_1_2*x_3_2
    x35 = x_1_3*x_2_0
    x36 = x_1_3*x_2_1
    x37 = x_1_3*x_2_3
    x38 = x_1_3*x_3_0
    x39 = x_1_3*x_3_2
    x40 = x_2_0*x_3_0
    x41 = x_2_0*x_3_1
    x42 = x_2_0*x_3_2
    x43 = x_2_1*x_3_0
    x44 = x_2_1*x_3_1
    x45 = x_2_1*x_3_2
    x46 = x_2_3*x_3_0
    x47 = x_2_3*x_3_1
    x48 = -x_1_3
    x49 = -x_3_0
    x50 = -x_3_1
    x51 = -x_3_2
    x52 = x48 + x49 + x50 + x51 + 1
    x53 = x32 + x33 + x34 + x39 + x52
    x54 = -x_1_2
    x55 = -x_2_0
    x56 = -x_2_1
    x57 = -x_2_3
    x58 = x54 + x55 + x56 + x57
    x59 = x31 + x35 + x36 + x37 + x58
    x60 = x40 + x41 + x42 + x46
    x61 = x43 + x44 + x45 + x47 + x60
    x62 = x56 + x57
    x63 = x43 + x62
    x64 = -x_1_0
    x65 = x26 + x64
    x66 = x44 + x45 + x47 + x65
    x67 = x27 + x28 + x29 + x38
    x68 = x53 + x54 + x67
    x69 = x51 + 1
    x70 = x50 + x69
    x71 = x24 + x25 + x30
    x72 = x48 + x71
    x73 = x59 + x72
    x74 = x20 + x55
    x75 = x13 + x15 + x23
    x76 = x12 + x19 + x21
    x77 = x74 + x75 + x76
    x78 = -x_0_2
    x79 = -x_0_3
    x80 = x14 + x49 + x78 + x79
    x81 = x70 + x80
    x82 = -x_0_1
    x83 = x4 + x82
    x84 = x7 + x83
    x85 = x22 + x5 + x6
    x86 = x75 + x85
    x87 = x78 + x79
    x88 = x11 + x2 + x3
    x89 = x87 + x88
    x90 = x1 + x16 + x18 + x64 + x7 + x82
    x91 = x17 + x85
    x92 = x0 + x8 + x9 + 1
    x93 = x10 + x92
    x94 = x1 + x16 + x18 + x54 + x64 + x82 + x93
    x95 = x65 + x83
    x96 = x17 + x89

    # Final calculations
    result = -x0*x_2_3 - x0*x_3_0 - x0*x_3_1 - x0*x_3_2 + x0 - x1*x_2_0 - x1*x_2_1 - x1*x_2_3 - x1*x_3_2 + x1 - x10*x_2_1 - x10*x_2_3 - x10*x_3_0 - x10*x_3_2 + x10 - x11*x_3_0 - x11*x_3_1 - x11*x_3_2 + x11 - x12*x_3_1 + x12 + x13 + x14 + x15 - x16*x_2_0 - x16*x_2_1 - x16*x_2_3 - x16*x_3_2 + x16 - x17*x_2_0 - x17*x_2_3 - x17*x_3_1 - x17*x_3_2 + x17 - x18*x_2_0 - x18*x_2_1 - x18*x_2_3 - x18*x_3_2 + x18 - x19*x_3_1 + x19 - x2*x_3_0 - x2*x_3_1 - x2*x_3_2 + x2 - x20*x_3_1 - x20*x_3_2 + x20 - x21*x_3_1 + x21 + x22 + x23 - x24*x_3_0 - x24*x_3_1 - x24*x_3_2 + x24 - x25*x_3_0 - x25*x_3_1 - x25*x_3_2 + x25 - x26*x_3_0 - x26*x_3_1 + x26 + x27 + x28 + x29 - x3*x_3_0 - x3*x_3_1 - x3*x_3_2 + x3 - x30*x_3_0 - x30*x_3_1 - x30*x_3_2 + x30 - x31*x_3_0 + x31 + x32 + x33 + x34 - x35*x_3_0 - x35*x_3_2 + x35 - x36*x_3_0 + x36 - x37*x_3_0 + x37 + x38 + x39 - x4*x_3_0 - x4*x_3_1 + x4 + x40 + x41 + x42 + x43 + x44 + x45 + x46 + x47 + x5 + x6 + x7 - x8*x_2_3 - x8*x_3_0 - x8*x_3_1 - x8*x_3_2 + x8 - x9*x_2_3 - x9*x_3_0 - x9*x_3_1 - x9*x_3_2 + x9 - x_0_1 - x_0_2 - x_0_3 - x_1_0 - x_1_2 - x_1_3 - x_2_0 - x_2_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 1
    gradient = np.array([
        -x53 - x59 - x61,
        -x31 - x36 - x37 - x63 - x66 - x68,
        -x29 - x33 - x34 - x39 - x41 - x66 - x70 - x73,
        -x61 - x62 - x77 - x81,
        -x55 - x57 - x60 - x76 - x81 - x84 - x86,
        -x40 - x42 - x46 - x49 - x63 - x69 - x77 - x84 - x89,
        -x68 - x79 - x90 - x91,
        -x10 - x14 - x52 - x67 - x86 - x87 - x90,
        -x27 - x28 - x32 - x38 - x48 - x50 - x80 - x91 - x94,
        -x73 - x78 - x88 - x93 - x95,
        -x20 - x58 - x71 - x76 - x92 - x95 - x96,
        -x35 - x56 - x72 - x74 - x94 - x96
    ])
    
    return result, gradient


