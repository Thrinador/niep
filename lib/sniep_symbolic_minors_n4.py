# -*- coding: utf-8 -*-
# Separated Value, Jacobian, & Hessian Functions for N = 4 (matrix_type='sniep')
# Generated by symbolic_minors_generator.py
# DO NOT EDIT MANUALLY

import numpy as np
import numba

# --- Functions for S_1 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4(x_vec):
    """Calculates the value of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]

    return 2*(-x_0_1 - x_0_2 - x_0_3 - x_1_2 - x_1_3 - x_2_3 + 2)



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]

    return np.array([-2,
        -2,
        -2,
        -2,
        -2,
        -2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S1_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_1 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]

    hessian = np.empty((6, 6))
    hessian[0, 0] = 0
    hessian[0, 1] = 0
    hessian[0, 2] = 0
    hessian[0, 3] = 0
    hessian[0, 4] = 0
    hessian[0, 5] = 0
    hessian[1, 0] = 0
    hessian[1, 1] = 0
    hessian[1, 2] = 0
    hessian[1, 3] = 0
    hessian[1, 4] = 0
    hessian[1, 5] = 0
    hessian[2, 0] = 0
    hessian[2, 1] = 0
    hessian[2, 2] = 0
    hessian[2, 3] = 0
    hessian[2, 4] = 0
    hessian[2, 5] = 0
    hessian[3, 0] = 0
    hessian[3, 1] = 0
    hessian[3, 2] = 0
    hessian[3, 3] = 0
    hessian[3, 4] = 0
    hessian[3, 5] = 0
    hessian[4, 0] = 0
    hessian[4, 1] = 0
    hessian[4, 2] = 0
    hessian[4, 3] = 0
    hessian[4, 4] = 0
    hessian[4, 5] = 0
    hessian[5, 0] = 0
    hessian[5, 1] = 0
    hessian[5, 2] = 0
    hessian[5, 3] = 0
    hessian[5, 4] = 0
    hessian[5, 5] = 0
    return hessian


# --- Functions for S_2 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4(x_vec):
    """Calculates the value of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 3*x_0_1
    x1 = 3*x_0_2
    x2 = 3*x_0_3
    x3 = 3*x_1_2
    return x0*x_0_2 + x0*x_0_3 + x0*x_1_2 + x0*x_1_3 + x1*x_0_3 + x1*x_1_2 + x1*x_2_3 + x2*x_1_3 + x2*x_2_3 + x3*x_1_3 + x3*x_2_3 + 4*x_0_1*x_2_3 - 6*x_0_1 + 4*x_0_2*x_1_3 - 6*x_0_2 + 4*x_0_3*x_1_2 - 6*x_0_3 - 6*x_1_2 + 3*x_1_3*x_2_3 - 6*x_1_3 - 6*x_2_3 + 6



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 3*x_0_3 + 3*x_1_2 - 6
    x1 = 3*x_0_2 + 3*x_1_3
    x2 = x0 + x1
    x3 = 3*x_0_1 + 3*x_2_3
    x4 = x0 + x3
    x5 = x1 + x3 - 6
    return np.array([x2 + 4*x_2_3,
        x4 + 4*x_1_3,
        x5 + 4*x_1_2,
        x5 + 4*x_0_3,
        x4 + 4*x_0_2,
        x2 + 4*x_0_1])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S2_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_2 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]

    hessian = np.empty((6, 6))
    hessian[0, 0] = 0
    hessian[0, 1] = 3
    hessian[0, 2] = 3
    hessian[0, 3] = 3
    hessian[0, 4] = 3
    hessian[0, 5] = 4
    hessian[1, 0] = 3
    hessian[1, 1] = 0
    hessian[1, 2] = 3
    hessian[1, 3] = 3
    hessian[1, 4] = 4
    hessian[1, 5] = 3
    hessian[2, 0] = 3
    hessian[2, 1] = 3
    hessian[2, 2] = 0
    hessian[2, 3] = 4
    hessian[2, 4] = 3
    hessian[2, 5] = 3
    hessian[3, 0] = 3
    hessian[3, 1] = 3
    hessian[3, 2] = 4
    hessian[3, 3] = 0
    hessian[3, 4] = 3
    hessian[3, 5] = 3
    hessian[4, 0] = 3
    hessian[4, 1] = 4
    hessian[4, 2] = 3
    hessian[4, 3] = 3
    hessian[4, 4] = 0
    hessian[4, 5] = 3
    hessian[5, 0] = 4
    hessian[5, 1] = 3
    hessian[5, 2] = 3
    hessian[5, 3] = 3
    hessian[5, 4] = 3
    hessian[5, 5] = 0
    return hessian


# --- Functions for S_3 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4(x_vec):
    """Calculates the value of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 2*x_0_1
    x1 = x_0_2*x_1_3
    x2 = 2*x_0_1*x_2_3
    x3 = x_0_3*x_1_2
    x4 = 2*x_0_2
    x5 = 2*x1
    x6 = 2*x3
    return -2*x0*x1 - 2*x0*x3 - 2*x0*x_0_2*x_0_3 - 2*x0*x_1_2*x_1_3 - 2*x2*x_0_2 - 2*x2*x_0_3 - 2*x2*x_1_2 - 2*x2*x_1_3 - 2*x3*x4 - 2*x4*x_1_2*x_2_3 - 2*x5*x_0_3 - 2*x5*x_1_2 - 2*x5*x_2_3 - 2*x6*x_1_3 - 2*x6*x_2_3 + 6*x_0_1*x_0_2 + 6*x_0_1*x_0_3 + 6*x_0_1*x_1_2 + 6*x_0_1*x_1_3 + 8*x_0_1*x_2_3 - 6*x_0_1 + 6*x_0_2*x_0_3 + 6*x_0_2*x_1_2 + 8*x_0_2*x_1_3 + 6*x_0_2*x_2_3 - 6*x_0_2 + 8*x_0_3*x_1_2 - 4*x_0_3*x_1_3*x_2_3 + 6*x_0_3*x_1_3 + 6*x_0_3*x_2_3 - 6*x_0_3 + 6*x_1_2*x_1_3 + 6*x_1_2*x_2_3 - 6*x_1_2 + 6*x_1_3*x_2_3 - 6*x_1_3 - 6*x_2_3 + 4



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = -3*x_0_3
    x1 = -3*x_1_2
    x2 = 2*x_0_3
    x3 = x2*x_1_2
    x4 = 2*x_1_2
    x5 = x4*x_1_3
    x6 = x4*x_2_3
    x7 = 2*x_1_3
    x8 = x7*x_2_3
    x9 = x0 + x1 + x3 + x5 + x6 + x8 + 3
    x10 = 2*x_0_2
    x11 = x10*x_0_3
    x12 = x10*x_2_3
    x13 = x2*x_2_3
    x14 = x10*x_1_3 - 3*x_0_2 - 3*x_1_3
    x15 = x11 + x12 + x13 + x14
    x16 = 2*x_0_1*x_2_3 - 3*x_0_1 - 3*x_2_3
    x17 = x2*x_0_1 + x2*x_1_3 + x7*x_0_1
    x18 = x16 + x17
    x19 = x10*x_0_1
    x20 = x4*x_0_1
    x21 = x10*x_1_2
    x22 = x16 + x19 + x20 + x21 + 3
    x23 = x0 + x1 + x3
    return np.array([-2*x15 - 2*x9 + 8*x_2_3,
        -2*x18 - 2*x9 + 8*x_1_3,
        -2*x14 - 2*x22 - 2*x5 - 2*x6 - 2*x8 + 8*x_1_2,
        -2*x15 - 2*x18 + 8*x_0_3 - 6,
        -2*x11 - 2*x12 - 2*x13 - 2*x22 - 2*x23 + 8*x_0_2,
        -2*x14 - 2*x17 - 2*x19 - 2*x20 - 2*x21 - 2*x23 + 8*x_0_1 - 6])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S3_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_3 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 2*x_0_3
    x1 = 2*x_1_3
    x2 = 2*x_2_3 - 3
    x3 = -2*x0 - 2*x1 - 2*x2
    x4 = 2*x_0_2
    x5 = 2*x_1_2
    x6 = -2*x2 - 2*x4 - 2*x5
    x7 = x_0_3 + x_1_2 - 2
    x8 = x_0_2 + x_1_3
    x9 = -4*x7 - 4*x8
    x10 = 2*x_0_1 - 3
    x11 = -2*x1 - 2*x10 - 2*x5
    x12 = x_0_1 + x_2_3
    x13 = -4*x12 - 4*x7
    x14 = -4*x12 - 4*x8 + 8
    x15 = -2*x0 - 2*x10 - 2*x4
    hessian = np.empty((6, 6))
    hessian[0, 0] = 0
    hessian[0, 1] = x3
    hessian[0, 2] = x6
    hessian[0, 3] = x3
    hessian[0, 4] = x6
    hessian[0, 5] = x9
    hessian[1, 0] = x3
    hessian[1, 1] = 0
    hessian[1, 2] = x11
    hessian[1, 3] = x3
    hessian[1, 4] = x13
    hessian[1, 5] = x11
    hessian[2, 0] = x6
    hessian[2, 1] = x11
    hessian[2, 2] = 0
    hessian[2, 3] = x14
    hessian[2, 4] = x6
    hessian[2, 5] = x11
    hessian[3, 0] = x3
    hessian[3, 1] = x3
    hessian[3, 2] = x14
    hessian[3, 3] = 0
    hessian[3, 4] = x15
    hessian[3, 5] = x15
    hessian[4, 0] = x6
    hessian[4, 1] = x13
    hessian[4, 2] = x6
    hessian[4, 3] = x15
    hessian[4, 4] = 0
    hessian[4, 5] = x15
    hessian[5, 0] = x9
    hessian[5, 1] = x11
    hessian[5, 2] = x11
    hessian[5, 3] = x15
    hessian[5, 4] = x15
    hessian[5, 5] = 0
    return hessian


# --- Functions for S_4 ---

@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4(x_vec):
    """Calculates the value of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 4*x_0_1
    x1 = x_0_2*x_1_3
    x2 = x0*x_2_3
    x3 = x_0_3*x_1_2
    x4 = x_1_3*x_2_3
    x5 = 4*x3
    x6 = 4*x1
    x7 = 4*x_0_2
    return -x0*x1 - x0*x3 - x0*x4 - x0*x_0_2*x_0_3 - x0*x_1_2*x_1_3 - x2*x_0_2 - x2*x_0_3 - x2*x_1_2 - x4*x7 - 4*x4*x_0_3 - x5*x_0_2 - x5*x_1_3 - x5*x_2_3 - x6*x_0_3 - x6*x_1_2 - x7*x_1_2*x_2_3 + 3*x_0_1*x_0_2 + 3*x_0_1*x_0_3 + 3*x_0_1*x_1_2 + 3*x_0_1*x_1_3 + 4*x_0_1*x_2_3 - 2*x_0_1 + 3*x_0_2*x_0_3 + 3*x_0_2*x_1_2 + 4*x_0_2*x_1_3 + 3*x_0_2*x_2_3 - 2*x_0_2 + 4*x_0_3*x_1_2 + 3*x_0_3*x_1_3 + 3*x_0_3*x_2_3 - 2*x_0_3 + 3*x_1_2*x_1_3 + 3*x_1_2*x_2_3 - 2*x_1_2 + 3*x_1_3*x_2_3 - 2*x_1_3 - 2*x_2_3 + 1



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_jacobian(x_vec):
    """Calculates the Jacobian of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = -3*x_0_3
    x1 = -3*x_1_2
    x2 = 4*x_1_2
    x3 = x2*x_0_3
    x4 = 4*x_1_3
    x5 = x4*x_1_2
    x6 = 4*x_2_3
    x7 = x6*x_1_2
    x8 = x6*x_1_3
    x9 = x0 + x1 + x3 + x5 + x7 + x8 + 2
    x10 = 4*x_0_3
    x11 = x10*x_0_2
    x12 = x6*x_0_2
    x13 = x6*x_0_3
    x14 = x4*x_0_2 - 3*x_0_2 - 3*x_1_3
    x15 = x11 + x12 + x13 + x14
    x16 = x6*x_0_1 - 3*x_0_1 - 3*x_2_3
    x17 = x10*x_0_1 + x4*x_0_1 + x4*x_0_3
    x18 = x16 + x17
    x19 = 4*x_0_1*x_0_2
    x20 = x2*x_0_1
    x21 = x2*x_0_2
    x22 = x16 + x19 + x20 + x21 + 2
    x23 = x0 + x1 + x3
    return np.array([-x15 - x9 + 4*x_2_3,
        -x18 - x9 + 4*x_1_3,
        -x14 - x22 - x5 - x7 - x8 + 4*x_1_2,
        -x15 - x18 + 4*x_0_3 - 2,
        -x11 - x12 - x13 - x22 - x23 + 4*x_0_2,
        -x14 - x17 - x19 - x20 - x21 - x23 + 4*x_0_1 - 2])



@numba.jit(nopython=True, fastmath=True, cache=True)
def calculate_S4_n4_hessian(x_vec):
    """Calculates the Hessian matrix of S_4 for n=4."""
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_2 = x_vec[3]
    x_1_3 = x_vec[4]
    x_2_3 = x_vec[5]
    x0 = 4*x_0_3
    x1 = 4*x_1_3
    x2 = 4*x_2_3 - 3
    x3 = -x0 - x1 - x2
    x4 = 4*x_0_2
    x5 = 4*x_1_2
    x6 = -x2 - x4 - x5
    x7 = x_0_3 + x_1_2 - 1
    x8 = x_0_2 + x_1_3
    x9 = -4*x7 - 4*x8
    x10 = 4*x_0_1 - 3
    x11 = -x1 - x10 - x5
    x12 = x_0_1 + x_2_3
    x13 = -4*x12 - 4*x7
    x14 = -4*x12 - 4*x8 + 4
    x15 = -x0 - x10 - x4
    hessian = np.empty((6, 6))
    hessian[0, 0] = 0
    hessian[0, 1] = x3
    hessian[0, 2] = x6
    hessian[0, 3] = x3
    hessian[0, 4] = x6
    hessian[0, 5] = x9
    hessian[1, 0] = x3
    hessian[1, 1] = 0
    hessian[1, 2] = x11
    hessian[1, 3] = x3
    hessian[1, 4] = x13
    hessian[1, 5] = x11
    hessian[2, 0] = x6
    hessian[2, 1] = x11
    hessian[2, 2] = 0
    hessian[2, 3] = x14
    hessian[2, 4] = x6
    hessian[2, 5] = x11
    hessian[3, 0] = x3
    hessian[3, 1] = x3
    hessian[3, 2] = x14
    hessian[3, 3] = 0
    hessian[3, 4] = x15
    hessian[3, 5] = x15
    hessian[4, 0] = x6
    hessian[4, 1] = x13
    hessian[4, 2] = x6
    hessian[4, 3] = x15
    hessian[4, 4] = 0
    hessian[4, 5] = x15
    hessian[5, 0] = x9
    hessian[5, 1] = x11
    hessian[5, 2] = x11
    hessian[5, 3] = x15
    hessian[5, 4] = x15
    hessian[5, 5] = 0
    return hessian


