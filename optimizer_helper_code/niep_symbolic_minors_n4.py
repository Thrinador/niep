# -*- coding: utf-8 -*-
# Symbolic Functions for N = 4 (General Symm. Stochastic)
# Generated by script

import math
import numpy as np


# --------------------------------------------------------------------------
# Value Function (S1_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S1_n4(x_vec):
    """Calculates S_1 for n=4 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_1 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # S_k CSE Defs

    # Final S_k Calculation
    result = -x_0_1 - x_0_2 - x_0_3 - x_1_0 - x_1_2 - x_1_3 - x_2_0 - x_2_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 4
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S1_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S1_n4_jacobian(x_vec):
    """Calculates Jacobian of S_1 (n=4).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # Jacobian CSE Defs

    # Final Gradient Calculation
    gradient = [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1
    ]
    return gradient



# --------------------------------------------------------------------------
# Value Function (S2_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S2_n4(x_vec):
    """Calculates S_2 for n=4 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_2 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # S_k CSE Defs

    # Final S_k Calculation
    result = x_0_1*x_1_2 + x_0_1*x_1_3 + x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_1*x_2_3 + x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_1*x_3_2 - 3*x_0_1 + x_0_2*x_1_0 + x_0_2*x_1_2 + x_0_2*x_1_3 + x_0_2*x_2_1 + x_0_2*x_2_3 + x_0_2*x_3_0 + x_0_2*x_3_1 + x_0_2*x_3_2 - 3*x_0_2 + x_0_3*x_1_0 + x_0_3*x_1_2 + x_0_3*x_1_3 + x_0_3*x_2_0 + x_0_3*x_2_1 + x_0_3*x_2_3 + x_0_3*x_3_1 + x_0_3*x_3_2 - 3*x_0_3 + x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_0*x_2_3 + x_1_0*x_3_0 + x_1_0*x_3_1 + x_1_0*x_3_2 - 3*x_1_0 + x_1_2*x_2_0 + x_1_2*x_2_3 + x_1_2*x_3_0 + x_1_2*x_3_1 + x_1_2*x_3_2 - 3*x_1_2 + x_1_3*x_2_0 + x_1_3*x_2_1 + x_1_3*x_2_3 + x_1_3*x_3_0 + x_1_3*x_3_2 - 3*x_1_3 + x_2_0*x_3_0 + x_2_0*x_3_1 + x_2_0*x_3_2 - 3*x_2_0 + x_2_1*x_3_0 + x_2_1*x_3_1 + x_2_1*x_3_2 - 3*x_2_1 + x_2_3*x_3_0 + x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 6
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S2_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S2_n4_jacobian(x_vec):
    """Calculates Jacobian of S_2 (n=4).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # Jacobian CSE Defs
    x0 = x_1_3 + x_3_0 + x_3_1 + x_3_2 - 3
    x1 = x_1_2 + x_2_0 + x_2_1 + x_2_3
    x2 = x_2_1 + x_2_3
    x3 = x0 + x_1_0
    x4 = x3 + x_1_2
    x5 = x_3_2 - 3
    x6 = x5 + x_3_1
    x7 = x1 + x_1_0
    x8 = x7 + x_1_3
    x9 = x_0_2 + x_0_3
    x10 = x9 + x_3_0
    x11 = x10 + x6 + x_2_0
    x12 = x10 + x_0_1
    x13 = x9 + x_0_1
    x14 = x_1_0 + x_1_2 + x_1_3 - 3
    # Final Gradient Calculation
    gradient = [
        x0 + x1,
        x2 + x4,
        x6 + x8,
        x11 + x2,
        x11 + x_0_1 + x_2_3,
        x12 + x2 + x5 + x_2_0,
        x4 + x_0_1 + x_0_3,
        x13 + x3,
        x12 + x14 + x_3_1,
        x8 + x_0_1 + x_0_2 - 3,
        x13 + x7 - 3,
        x13 + x14 + x_2_0 + x_2_1
    ]
    return gradient



# --------------------------------------------------------------------------
# Value Function (S3_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S3_n4(x_vec):
    """Calculates S_3 for n=4 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_3 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # S_k CSE Defs
    x0 = x_0_1*x_1_2
    x1 = x_0_1*x_1_3
    x2 = x_0_1*x_2_0
    x3 = x_0_1*x_2_1
    x4 = x_0_1*x_2_3
    x5 = x_0_2*x_1_0
    x6 = x_0_2*x_1_2
    x7 = x_0_2*x_1_3
    x8 = x_0_2*x_2_1
    x9 = x_2_3*x_3_1
    x10 = x_0_3*x_1_0
    x11 = x_0_3*x_1_2
    x12 = x_0_3*x_1_3
    x13 = x_0_3*x_3_1
    x14 = x_2_1*x_3_2
    x15 = x_1_0*x_2_0
    x16 = x_1_0*x_2_1
    x17 = x_2_3*x_3_0
    x18 = x_1_2*x_2_0
    x19 = x_1_3*x_2_0
    # Final S_k Calculation
    result = -x0*x_2_3 - x0*x_3_0 - x0*x_3_1 - x0*x_3_2 - x1*x_2_0 - x1*x_2_1 - x1*x_2_3 - x1*x_3_2 - x10*x_2_0 - x10*x_2_1 - x10*x_2_3 - x10*x_3_2 - x11*x_2_0 - x11*x_2_3 - x11*x_3_1 - x11*x_3_2 - x12*x_2_0 - x12*x_2_1 - x12*x_2_3 - x12*x_3_2 - x13*x_2_0 - x13*x_2_1 - x14*x_0_3 - x14*x_1_0 - x15*x_3_0 - x15*x_3_1 - x15*x_3_2 - x16*x_3_0 - x16*x_3_1 - x17*x_1_0 - x17*x_1_2 - x17*x_1_3 - x18*x_3_0 - x18*x_3_1 - x18*x_3_2 - x19*x_3_0 - x19*x_3_2 - x2*x_3_0 - x2*x_3_1 - x2*x_3_2 - x3*x_3_0 - x3*x_3_1 - x3*x_3_2 - x4*x_3_0 - x4*x_3_1 - x5*x_2_3 - x5*x_3_0 - x5*x_3_1 - x5*x_3_2 - x6*x_2_3 - x6*x_3_0 - x6*x_3_1 - x6*x_3_2 - x7*x_2_1 - x7*x_2_3 - x7*x_3_0 - x7*x_3_2 - x8*x_3_0 - x8*x_3_1 - x8*x_3_2 - x9*x_0_2 - x9*x_0_3 - x9*x_1_0 + 2*x_0_1*x_1_2 + 2*x_0_1*x_1_3 + 2*x_0_1*x_2_0 + 2*x_0_1*x_2_1 + 2*x_0_1*x_2_3 + 2*x_0_1*x_3_0 + 2*x_0_1*x_3_1 + 2*x_0_1*x_3_2 - 3*x_0_1 + 2*x_0_2*x_1_0 + 2*x_0_2*x_1_2 + 2*x_0_2*x_1_3 + 2*x_0_2*x_2_1 + 2*x_0_2*x_2_3 + 2*x_0_2*x_3_0 + 2*x_0_2*x_3_1 + 2*x_0_2*x_3_2 - 3*x_0_2 + 2*x_0_3*x_1_0 + 2*x_0_3*x_1_2 + 2*x_0_3*x_1_3 + 2*x_0_3*x_2_0 + 2*x_0_3*x_2_1 + 2*x_0_3*x_2_3 + 2*x_0_3*x_3_1 + 2*x_0_3*x_3_2 - 3*x_0_3 + 2*x_1_0*x_2_0 + 2*x_1_0*x_2_1 + 2*x_1_0*x_2_3 + 2*x_1_0*x_3_0 + 2*x_1_0*x_3_1 + 2*x_1_0*x_3_2 - 3*x_1_0 + 2*x_1_2*x_2_0 + 2*x_1_2*x_2_3 + 2*x_1_2*x_3_0 + 2*x_1_2*x_3_1 + 2*x_1_2*x_3_2 - 3*x_1_2 + 2*x_1_3*x_2_0 - x_1_3*x_2_1*x_3_0 + 2*x_1_3*x_2_1 + 2*x_1_3*x_2_3 + 2*x_1_3*x_3_0 + 2*x_1_3*x_3_2 - 3*x_1_3 + 2*x_2_0*x_3_0 + 2*x_2_0*x_3_1 + 2*x_2_0*x_3_2 - 3*x_2_0 + 2*x_2_1*x_3_0 + 2*x_2_1*x_3_1 + 2*x_2_1*x_3_2 - 3*x_2_1 + 2*x_2_3*x_3_0 + 2*x_2_3*x_3_1 - 3*x_2_3 - 3*x_3_0 - 3*x_3_1 - 3*x_3_2 + 4
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S3_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S3_n4_jacobian(x_vec):
    """Calculates Jacobian of S_3 (n=4).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # Jacobian CSE Defs
    x0 = x_1_2*x_3_0
    x1 = x_1_2*x_3_1
    x2 = x_1_2*x_3_2
    x3 = x_1_3*x_3_2
    x4 = -2*x_1_3
    x5 = -2*x_3_0
    x6 = -2*x_3_1
    x7 = -2*x_3_2
    x8 = x4 + x5 + x6 + x7 + 3
    x9 = x0 + x1 + x2 + x3 + x8
    x10 = x_1_2*x_2_3
    x11 = x_1_3*x_2_0
    x12 = x_1_3*x_2_1
    x13 = x_1_3*x_2_3
    x14 = -2*x_1_2
    x15 = -2*x_2_0
    x16 = -2*x_2_1
    x17 = -2*x_2_3
    x18 = x14 + x15 + x16 + x17
    x19 = x10 + x11 + x12 + x13 + x18
    x20 = x_2_1*x_3_0
    x21 = x_2_1*x_3_1
    x22 = x_2_1*x_3_2
    x23 = x_2_3*x_3_1
    x24 = x_2_0*x_3_0
    x25 = x_2_0*x_3_1
    x26 = x_2_0*x_3_2
    x27 = x_2_3*x_3_0
    x28 = x24 + x25 + x26 + x27
    x29 = x20 + x21 + x22 + x23 + x28
    x30 = x16 + x17
    x31 = x20 + x30
    x32 = -2*x_1_0
    x33 = x32 + x_1_0*x_2_3
    x34 = x21 + x22 + x23 + x33
    x35 = x_1_0*x_3_0
    x36 = x_1_0*x_3_1
    x37 = x_1_0*x_3_2
    x38 = x_1_3*x_3_0
    x39 = x35 + x36 + x37 + x38
    x40 = x14 + x39 + x9
    x41 = x7 + 3
    x42 = x41 + x6
    x43 = x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_2*x_2_0
    x44 = x4 + x43
    x45 = x19 + x44
    x46 = x_0_3*x_2_1
    x47 = x15 + x46
    x48 = x_0_2*x_3_0 + x_0_2*x_3_2 + x_0_3*x_3_2
    x49 = x_0_2*x_2_3 + x_0_3*x_2_0 + x_0_3*x_2_3
    x50 = x47 + x48 + x49
    x51 = -2*x_0_2
    x52 = -2*x_0_3
    x53 = x_0_2*x_3_1
    x54 = x5 + x51 + x52 + x53
    x55 = x42 + x54
    x56 = x_0_1*x_3_2
    x57 = -2*x_0_1
    x58 = x57 + x_0_1*x_2_3
    x59 = x56 + x58
    x60 = x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_3*x_3_1
    x61 = x48 + x60
    x62 = x51 + x52
    x63 = x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_2*x_2_1
    x64 = x62 + x63
    x65 = x_0_1*x_1_3
    x66 = x_0_3*x_1_0
    x67 = x_0_3*x_1_3
    x68 = x32 + x56 + x57 + x65 + x66 + x67
    x69 = x_0_3*x_1_2
    x70 = x60 + x69
    x71 = x_0_2*x_1_3
    x72 = x_0_1*x_1_2 + x_0_2*x_1_0 + x_0_2*x_1_2 + 3
    x73 = x71 + x72
    x74 = x14 + x32 + x57 + x65 + x66 + x67 + x73
    x75 = x33 + x58
    x76 = x64 + x69
    # Final Gradient Calculation
    gradient = [
        -x19 - x29 - x9,
        -x10 - x12 - x13 - x31 - x34 - x40,
        -x1 - x2 - x25 - x3 - x34 - x37 - x42 - x45,
        -x29 - x30 - x50 - x55,
        -x15 - x17 - x28 - x49 - x55 - x59 - x61,
        -x24 - x26 - x27 - x31 - x41 - x5 - x50 - x59 - x64,
        -x40 - x52 - x68 - x70,
        -x39 - x53 - x61 - x62 - x68 - x71 - x8,
        -x0 - x35 - x36 - x38 - x4 - x54 - x6 - x70 - x74,
        -x45 - x51 - x63 - x73 - x75,
        -x18 - x43 - x46 - x49 - x72 - x75 - x76,
        -x11 - x16 - x44 - x47 - x74 - x76
    ]
    return gradient



# --------------------------------------------------------------------------
# Value Function (S4_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S4_n4(x_vec):
    """Calculates S_4 for n=4 general symm. stochastic matrix.
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: float: S_4 value.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # S_k CSE Defs
    x0 = x_0_1*x_1_2
    x1 = x_0_1*x_1_3
    x2 = x_0_1*x_2_0
    x3 = x_0_1*x_2_1
    x4 = x_0_1*x_2_3
    x5 = x_0_2*x_1_0
    x6 = x_0_2*x_1_2
    x7 = x_0_2*x_1_3
    x8 = x_0_2*x_2_1
    x9 = x_0_3*x_1_0
    x10 = x_0_3*x_1_2
    x11 = x_0_3*x_1_3
    x12 = x_0_3*x_2_1
    x13 = x_1_0*x_2_0
    x14 = x_1_0*x_2_1
    x15 = x_1_0*x_2_3
    x16 = x_1_2*x_2_0
    x17 = x_1_3*x_2_0
    # Final S_k Calculation
    result = -x0*x_2_3 - x0*x_3_0 - x0*x_3_1 - x0*x_3_2 - x1*x_2_0 - x1*x_2_1 - x1*x_2_3 - x1*x_3_2 - x10*x_2_0 - x10*x_2_3 - x10*x_3_1 - x10*x_3_2 - x11*x_2_0 - x11*x_2_1 - x11*x_2_3 - x11*x_3_2 - x12*x_3_1 - x12*x_3_2 - x13*x_3_0 - x13*x_3_1 - x13*x_3_2 - x14*x_3_0 - x14*x_3_1 - x14*x_3_2 - x15*x_3_0 - x15*x_3_1 - x16*x_3_0 - x16*x_3_1 - x16*x_3_2 - x17*x_3_0 - x17*x_3_2 - x2*x_3_0 - x2*x_3_1 - x2*x_3_2 - x3*x_3_0 - x3*x_3_1 - x3*x_3_2 - x4*x_3_0 - x4*x_3_1 - x5*x_2_3 - x5*x_3_0 - x5*x_3_1 - x5*x_3_2 - x6*x_2_3 - x6*x_3_0 - x6*x_3_1 - x6*x_3_2 - x7*x_2_1 - x7*x_2_3 - x7*x_3_0 - x7*x_3_2 - x8*x_3_0 - x8*x_3_1 - x8*x_3_2 - x9*x_2_0 - x9*x_2_1 - x9*x_2_3 - x9*x_3_2 + x_0_1*x_1_2 + x_0_1*x_1_3 + x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_1*x_2_3 + x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_1*x_3_2 - x_0_1 + x_0_2*x_1_0 + x_0_2*x_1_2 + x_0_2*x_1_3 + x_0_2*x_2_1 - x_0_2*x_2_3*x_3_1 + x_0_2*x_2_3 + x_0_2*x_3_0 + x_0_2*x_3_1 + x_0_2*x_3_2 - x_0_2 + x_0_3*x_1_0 + x_0_3*x_1_2 + x_0_3*x_1_3 - x_0_3*x_2_0*x_3_1 + x_0_3*x_2_0 + x_0_3*x_2_1 - x_0_3*x_2_3*x_3_1 + x_0_3*x_2_3 + x_0_3*x_3_1 + x_0_3*x_3_2 - x_0_3 + x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_0*x_2_3 + x_1_0*x_3_0 + x_1_0*x_3_1 + x_1_0*x_3_2 - x_1_0 + x_1_2*x_2_0 - x_1_2*x_2_3*x_3_0 + x_1_2*x_2_3 + x_1_2*x_3_0 + x_1_2*x_3_1 + x_1_2*x_3_2 - x_1_2 + x_1_3*x_2_0 - x_1_3*x_2_1*x_3_0 + x_1_3*x_2_1 - x_1_3*x_2_3*x_3_0 + x_1_3*x_2_3 + x_1_3*x_3_0 + x_1_3*x_3_2 - x_1_3 + x_2_0*x_3_0 + x_2_0*x_3_1 + x_2_0*x_3_2 - x_2_0 + x_2_1*x_3_0 + x_2_1*x_3_1 + x_2_1*x_3_2 - x_2_1 + x_2_3*x_3_0 + x_2_3*x_3_1 - x_2_3 - x_3_0 - x_3_1 - x_3_2 + 1
    return result



# --------------------------------------------------------------------------
# Jacobian Function (S4_n4)
# Input: x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0, x_2_1, x_2_3, x_3_0,
# x_3_1, x_3_2
# --------------------------------------------------------------------------
def calculate_S4_n4_jacobian(x_vec):
    """Calculates Jacobian of S_4 (n=4).
    Args:
        x_vec (numpy array or list/tuple): Input vector of length 12
           containing the strict upper triangle elements in row-wise order:
                      x_0_1, x_0_2, x_0_3, x_1_0, x_1_2, x_1_3, x_2_0,
           x_2_1, x_2_3, x_3_0, x_3_1, x_3_2
           Diagonal elements are determined by stochastic constraint.
    
    Returns: list: Gradient vector.
    """
    # Assign vars
    x_0_1 = x_vec[0]
    x_0_2 = x_vec[1]
    x_0_3 = x_vec[2]
    x_1_0 = x_vec[3]
    x_1_2 = x_vec[4]
    x_1_3 = x_vec[5]
    x_2_0 = x_vec[6]
    x_2_1 = x_vec[7]
    x_2_3 = x_vec[8]
    x_3_0 = x_vec[9]
    x_3_1 = x_vec[10]
    x_3_2 = x_vec[11]
    # Jacobian CSE Defs
    x0 = x_1_2*x_3_0
    x1 = x_1_2*x_3_1
    x2 = x_1_2*x_3_2
    x3 = x_1_3*x_3_2
    x4 = -x_1_3
    x5 = -x_3_0
    x6 = -x_3_1
    x7 = -x_3_2
    x8 = x4 + x5 + x6 + x7 + 1
    x9 = x0 + x1 + x2 + x3 + x8
    x10 = x_1_2*x_2_3
    x11 = x_1_3*x_2_0
    x12 = x_1_3*x_2_1
    x13 = x_1_3*x_2_3
    x14 = -x_1_2
    x15 = -x_2_0
    x16 = -x_2_1
    x17 = -x_2_3
    x18 = x14 + x15 + x16 + x17
    x19 = x10 + x11 + x12 + x13 + x18
    x20 = x_2_1*x_3_0
    x21 = x_2_1*x_3_1
    x22 = x_2_1*x_3_2
    x23 = x_2_3*x_3_1
    x24 = x_2_0*x_3_0
    x25 = x_2_0*x_3_1
    x26 = x_2_0*x_3_2
    x27 = x_2_3*x_3_0
    x28 = x24 + x25 + x26 + x27
    x29 = x20 + x21 + x22 + x23 + x28
    x30 = x16 + x17
    x31 = x20 + x30
    x32 = -x_1_0
    x33 = x32 + x_1_0*x_2_3
    x34 = x21 + x22 + x23 + x33
    x35 = x_1_0*x_3_0
    x36 = x_1_0*x_3_1
    x37 = x_1_0*x_3_2
    x38 = x_1_3*x_3_0
    x39 = x35 + x36 + x37 + x38
    x40 = x14 + x39 + x9
    x41 = x7 + 1
    x42 = x41 + x6
    x43 = x_1_0*x_2_0 + x_1_0*x_2_1 + x_1_2*x_2_0
    x44 = x4 + x43
    x45 = x19 + x44
    x46 = x_0_3*x_2_1
    x47 = x15 + x46
    x48 = x_0_2*x_3_0 + x_0_2*x_3_2 + x_0_3*x_3_2
    x49 = x_0_2*x_2_3 + x_0_3*x_2_0 + x_0_3*x_2_3
    x50 = x47 + x48 + x49
    x51 = -x_0_2
    x52 = -x_0_3
    x53 = x_0_2*x_3_1
    x54 = x5 + x51 + x52 + x53
    x55 = x42 + x54
    x56 = x_0_1*x_3_2
    x57 = -x_0_1
    x58 = x57 + x_0_1*x_2_3
    x59 = x56 + x58
    x60 = x_0_1*x_3_0 + x_0_1*x_3_1 + x_0_3*x_3_1
    x61 = x48 + x60
    x62 = x51 + x52
    x63 = x_0_1*x_2_0 + x_0_1*x_2_1 + x_0_2*x_2_1
    x64 = x62 + x63
    x65 = x_0_1*x_1_3
    x66 = x_0_3*x_1_0
    x67 = x_0_3*x_1_3
    x68 = x32 + x56 + x57 + x65 + x66 + x67
    x69 = x_0_3*x_1_2
    x70 = x60 + x69
    x71 = x_0_2*x_1_3
    x72 = x_0_1*x_1_2 + x_0_2*x_1_0 + x_0_2*x_1_2 + 1
    x73 = x71 + x72
    x74 = x14 + x32 + x57 + x65 + x66 + x67 + x73
    x75 = x33 + x58
    x76 = x64 + x69
    # Final Gradient Calculation
    gradient = [
        -x19 - x29 - x9,
        -x10 - x12 - x13 - x31 - x34 - x40,
        -x1 - x2 - x25 - x3 - x34 - x37 - x42 - x45,
        -x29 - x30 - x50 - x55,
        -x15 - x17 - x28 - x49 - x55 - x59 - x61,
        -x24 - x26 - x27 - x31 - x41 - x5 - x50 - x59 - x64,
        -x40 - x52 - x68 - x70,
        -x39 - x53 - x61 - x62 - x68 - x71 - x8,
        -x0 - x35 - x36 - x38 - x4 - x54 - x6 - x70 - x74,
        -x45 - x51 - x63 - x73 - x75,
        -x18 - x43 - x46 - x49 - x72 - x75 - x76,
        -x11 - x16 - x44 - x47 - x74 - x76
    ]
    return gradient


